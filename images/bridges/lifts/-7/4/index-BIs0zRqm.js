(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&n(a)}).observe(document,{childList:!0,subtree:!0});function e(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(s){if(s.ep)return;s.ep=!0;const r=e(s);fetch(s.href,r)}})();/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const K1="172",ii={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},Qn={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},T3=0,Ia=1,E3=2,xo=1,w3=2,Pe=3,ve=0,Rt=1,ie=2,Kt=0,Ke=1,sr=2,La=3,Fa=4,A3=5,vn=100,R3=101,C3=102,P3=103,D3=104,I3=200,L3=201,F3=202,U3=203,rr=204,ar=205,N3=206,O3=207,B3=208,z3=209,k3=210,H3=211,V3=212,G3=213,W3=214,or=0,lr=1,cr=2,oi=3,ur=4,hr=5,fr=6,dr=7,yo=0,X3=1,q3=2,Ue=0,Y3=1,$3=2,j3=3,Mo=4,K3=5,Z3=6,J3=7,bo=300,li=301,ci=302,Hi=303,pr=304,Z1=306,_e=1e3,Nt=1001,mr=1002,B0=1003,Q3=1004,$i=1005,ft=1006,cs=1007,yn=1008,t5=1008,le=1009,X1=1010,sa=1011,ui=1012,si=1013,ae=1014,nt=1015,Ft=1016,ra=1017,aa=1018,hi=1020,So=35902,To=1021,Eo=1022,Z0=1023,wo=1024,Ao=1025,ri=1026,fi=1027,di=1028,J1=1029,Q1=1030,Gi=1031,pi=1033,B1=33776,z1=33777,k1=33778,H1=33779,gr=35840,_r=35841,vr=35842,xr=35843,yr=36196,Mr=37492,br=37496,Sr=37808,Tr=37809,Er=37810,wr=37811,Ar=37812,Rr=37813,Cr=37814,Pr=37815,Dr=37816,Ir=37817,Lr=37818,Fr=37819,Ur=37820,Nr=37821,V1=36492,Or=36494,Br=36495,Ro=36283,zr=36284,kr=36285,Hr=36286,e5=3200,n5=3201,Co=0,i5=1,$e="",ne="srgb",mi="srgb-linear",q1="linear",J0="srgb",wn=7680,Ua=519,s5=512,r5=513,a5=514,Po=515,o5=516,l5=517,c5=518,u5=519,Na=35044,Oa="300 es",Fe=2e3,Y1=2001;class Sn{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const n=this._listeners;n[t]===void 0&&(n[t]=[]),n[t].indexOf(e)===-1&&n[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const n=this._listeners;return n[t]!==void 0&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const s=this._listeners[t];if(s!==void 0){const r=s.indexOf(e);r!==-1&&s.splice(r,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const n=this._listeners[t.type];if(n!==void 0){t.target=this;const s=n.slice(0);for(let r=0,a=s.length;r<a;r++)s[r].call(this,t);t.target=null}}}const Et=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Ba=1234567;const Bi=Math.PI/180,gi=180/Math.PI;function xi(){const i=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,n=Math.random()*4294967295|0;return(Et[i&255]+Et[i>>8&255]+Et[i>>16&255]+Et[i>>24&255]+"-"+Et[t&255]+Et[t>>8&255]+"-"+Et[t>>16&15|64]+Et[t>>24&255]+"-"+Et[e&63|128]+Et[e>>8&255]+"-"+Et[e>>16&255]+Et[e>>24&255]+Et[n&255]+Et[n>>8&255]+Et[n>>16&255]+Et[n>>24&255]).toLowerCase()}function C0(i,t,e){return Math.max(t,Math.min(e,i))}function oa(i,t){return(i%t+t)%t}function h5(i,t,e,n,s){return n+(i-t)*(s-n)/(e-t)}function f5(i,t,e){return i!==t?(e-i)/(t-i):0}function zi(i,t,e){return(1-e)*i+e*t}function d5(i,t,e,n){return zi(i,t,1-Math.exp(-e*n))}function p5(i,t=1){return t-Math.abs(oa(i,t*2)-t)}function m5(i,t,e){return i<=t?0:i>=e?1:(i=(i-t)/(e-t),i*i*(3-2*i))}function g5(i,t,e){return i<=t?0:i>=e?1:(i=(i-t)/(e-t),i*i*i*(i*(i*6-15)+10))}function _5(i,t){return i+Math.floor(Math.random()*(t-i+1))}function v5(i,t){return i+Math.random()*(t-i)}function x5(i){return i*(.5-Math.random())}function y5(i){i!==void 0&&(Ba=i);let t=Ba+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function M5(i){return i*Bi}function b5(i){return i*gi}function S5(i){return(i&i-1)===0&&i!==0}function T5(i){return Math.pow(2,Math.ceil(Math.log(i)/Math.LN2))}function E5(i){return Math.pow(2,Math.floor(Math.log(i)/Math.LN2))}function w5(i,t,e,n,s){const r=Math.cos,a=Math.sin,o=r(e/2),l=a(e/2),u=r((t+n)/2),h=a((t+n)/2),f=r((t-n)/2),c=a((t-n)/2),m=r((n-t)/2),g=a((n-t)/2);switch(s){case"XYX":i.set(o*h,l*f,l*c,o*u);break;case"YZY":i.set(l*c,o*h,l*f,o*u);break;case"ZXZ":i.set(l*f,l*c,o*h,o*u);break;case"XZX":i.set(o*h,l*g,l*m,o*u);break;case"YXY":i.set(l*m,o*h,l*g,o*u);break;case"ZYZ":i.set(l*g,l*m,o*h,o*u);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}function Kn(i,t){switch(t.constructor){case Float32Array:return i;case Uint32Array:return i/4294967295;case Uint16Array:return i/65535;case Uint8Array:return i/255;case Int32Array:return Math.max(i/2147483647,-1);case Int16Array:return Math.max(i/32767,-1);case Int8Array:return Math.max(i/127,-1);default:throw new Error("Invalid component type.")}}function Dt(i,t){switch(t.constructor){case Float32Array:return i;case Uint32Array:return Math.round(i*4294967295);case Uint16Array:return Math.round(i*65535);case Uint8Array:return Math.round(i*255);case Int32Array:return Math.round(i*2147483647);case Int16Array:return Math.round(i*32767);case Int8Array:return Math.round(i*127);default:throw new Error("Invalid component type.")}}const A5={DEG2RAD:Bi,RAD2DEG:gi,generateUUID:xi,clamp:C0,euclideanModulo:oa,mapLinear:h5,inverseLerp:f5,lerp:zi,damp:d5,pingpong:p5,smoothstep:m5,smootherstep:g5,randInt:_5,randFloat:v5,randFloatSpread:x5,seededRandom:y5,degToRad:M5,radToDeg:b5,isPowerOfTwo:S5,ceilPowerOfTwo:T5,floorPowerOfTwo:E5,setQuaternionFromProperEuler:w5,normalize:Dt,denormalize:Kn};class f0{constructor(t=0,e=0){f0.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6],this.y=s[1]*e+s[4]*n+s[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=C0(this.x,t.x,e.x),this.y=C0(this.y,t.y,e.y),this}clampScalar(t,e){return this.x=C0(this.x,t,e),this.y=C0(this.y,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(C0(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),s=Math.sin(e),r=this.x-t.x,a=this.y-t.y;return this.x=r*n-a*s+t.x,this.y=r*s+a*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class P0{constructor(t,e,n,s,r,a,o,l,u){P0.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,n,s,r,a,o,l,u)}set(t,e,n,s,r,a,o,l,u){const h=this.elements;return h[0]=t,h[1]=s,h[2]=o,h[3]=e,h[4]=r,h[5]=l,h[6]=n,h[7]=a,h[8]=u,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,s=e.elements,r=this.elements,a=n[0],o=n[3],l=n[6],u=n[1],h=n[4],f=n[7],c=n[2],m=n[5],g=n[8],_=s[0],d=s[3],p=s[6],x=s[1],y=s[4],v=s[7],T=s[2],A=s[5],w=s[8];return r[0]=a*_+o*x+l*T,r[3]=a*d+o*y+l*A,r[6]=a*p+o*v+l*w,r[1]=u*_+h*x+f*T,r[4]=u*d+h*y+f*A,r[7]=u*p+h*v+f*w,r[2]=c*_+m*x+g*T,r[5]=c*d+m*y+g*A,r[8]=c*p+m*v+g*w,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],s=t[2],r=t[3],a=t[4],o=t[5],l=t[6],u=t[7],h=t[8];return e*a*h-e*o*u-n*r*h+n*o*l+s*r*u-s*a*l}invert(){const t=this.elements,e=t[0],n=t[1],s=t[2],r=t[3],a=t[4],o=t[5],l=t[6],u=t[7],h=t[8],f=h*a-o*u,c=o*l-h*r,m=u*r-a*l,g=e*f+n*c+s*m;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const _=1/g;return t[0]=f*_,t[1]=(s*u-h*n)*_,t[2]=(o*n-s*a)*_,t[3]=c*_,t[4]=(h*e-s*l)*_,t[5]=(s*r-o*e)*_,t[6]=m*_,t[7]=(n*l-u*e)*_,t[8]=(a*e-n*r)*_,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,s,r,a,o){const l=Math.cos(r),u=Math.sin(r);return this.set(n*l,n*u,-n*(l*a+u*o)+a+t,-s*u,s*l,-s*(-u*a+l*o)+o+e,0,0,1),this}scale(t,e){return this.premultiply(us.makeScale(t,e)),this}rotate(t){return this.premultiply(us.makeRotation(-t)),this}translate(t,e){return this.premultiply(us.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,n,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let s=0;s<9;s++)if(e[s]!==n[s])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const us=new P0;function Do(i){for(let t=i.length-1;t>=0;--t)if(i[t]>=65535)return!0;return!1}function $1(i){return document.createElementNS("http://www.w3.org/1999/xhtml",i)}function R5(){const i=$1("canvas");return i.style.display="block",i}const za={};function Zn(i){i in za||(za[i]=!0,console.warn(i))}function C5(i,t,e){return new Promise(function(n,s){function r(){switch(i.clientWaitSync(t,i.SYNC_FLUSH_COMMANDS_BIT,0)){case i.WAIT_FAILED:s();break;case i.TIMEOUT_EXPIRED:setTimeout(r,e);break;default:n()}}setTimeout(r,e)})}function P5(i){const t=i.elements;t[2]=.5*t[2]+.5*t[3],t[6]=.5*t[6]+.5*t[7],t[10]=.5*t[10]+.5*t[11],t[14]=.5*t[14]+.5*t[15]}function D5(i){const t=i.elements;t[11]===-1?(t[10]=-t[10]-1,t[14]=-t[14]):(t[10]=-t[10],t[14]=-t[14]+1)}const ka=new P0().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ha=new P0().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function I5(){const i={enabled:!0,workingColorSpace:mi,spaces:{},convert:function(s,r,a){return this.enabled===!1||r===a||!r||!a||(this.spaces[r].transfer===J0&&(s.r=Ne(s.r),s.g=Ne(s.g),s.b=Ne(s.b)),this.spaces[r].primaries!==this.spaces[a].primaries&&(s.applyMatrix3(this.spaces[r].toXYZ),s.applyMatrix3(this.spaces[a].fromXYZ)),this.spaces[a].transfer===J0&&(s.r=ai(s.r),s.g=ai(s.g),s.b=ai(s.b))),s},fromWorkingColorSpace:function(s,r){return this.convert(s,this.workingColorSpace,r)},toWorkingColorSpace:function(s,r){return this.convert(s,r,this.workingColorSpace)},getPrimaries:function(s){return this.spaces[s].primaries},getTransfer:function(s){return s===$e?q1:this.spaces[s].transfer},getLuminanceCoefficients:function(s,r=this.workingColorSpace){return s.fromArray(this.spaces[r].luminanceCoefficients)},define:function(s){Object.assign(this.spaces,s)},_getMatrix:function(s,r,a){return s.copy(this.spaces[r].toXYZ).multiply(this.spaces[a].fromXYZ)},_getDrawingBufferColorSpace:function(s){return this.spaces[s].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(s=this.workingColorSpace){return this.spaces[s].workingColorSpaceConfig.unpackColorSpace}},t=[.64,.33,.3,.6,.15,.06],e=[.2126,.7152,.0722],n=[.3127,.329];return i.define({[mi]:{primaries:t,whitePoint:n,transfer:q1,toXYZ:ka,fromXYZ:Ha,luminanceCoefficients:e,workingColorSpaceConfig:{unpackColorSpace:ne},outputColorSpaceConfig:{drawingBufferColorSpace:ne}},[ne]:{primaries:t,whitePoint:n,transfer:J0,toXYZ:ka,fromXYZ:Ha,luminanceCoefficients:e,outputColorSpaceConfig:{drawingBufferColorSpace:ne}}}),i}const q0=I5();function Ne(i){return i<.04045?i*.0773993808:Math.pow(i*.9478672986+.0521327014,2.4)}function ai(i){return i<.0031308?i*12.92:1.055*Math.pow(i,.41666)-.055}let An;class L5{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{An===void 0&&(An=$1("canvas")),An.width=t.width,An.height=t.height;const n=An.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=An}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=$1("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const s=n.getImageData(0,0,t.width,t.height),r=s.data;for(let a=0;a<r.length;a++)r[a]=Ne(r[a]/255)*255;return n.putImageData(s,0,0),e}else if(t.data){const e=t.data.slice(0);for(let n=0;n<e.length;n++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[n]=Math.floor(Ne(e[n]/255)*255):e[n]=Ne(e[n]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let F5=0;class la{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:F5++}),this.uuid=xi(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const n={uuid:this.uuid,url:""},s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let a=0,o=s.length;a<o;a++)s[a].isDataTexture?r.push(hs(s[a].image)):r.push(hs(s[a]))}else r=hs(s);n.url=r}return e||(t.images[this.uuid]=n),n}}function hs(i){return typeof HTMLImageElement<"u"&&i instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&i instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&i instanceof ImageBitmap?L5.getDataURL(i):i.data?{data:Array.from(i.data),width:i.width,height:i.height,type:i.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let U5=0;class Ot extends Sn{constructor(t=Ot.DEFAULT_IMAGE,e=Ot.DEFAULT_MAPPING,n=Nt,s=Nt,r=ft,a=yn,o=Z0,l=le,u=Ot.DEFAULT_ANISOTROPY,h=$e){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:U5++}),this.uuid=xi(),this.name="",this.source=new la(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=n,this.wrapT=s,this.magFilter=r,this.minFilter=a,this.anisotropy=u,this.format=o,this.internalFormat=null,this.type=l,this.offset=new f0(0,0),this.repeat=new f0(1,1),this.center=new f0(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new P0,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const n={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==bo)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case _e:t.x=t.x-Math.floor(t.x);break;case Nt:t.x=t.x<0?0:1;break;case mr:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case _e:t.y=t.y-Math.floor(t.y);break;case Nt:t.y=t.y<0?0:1;break;case mr:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Ot.DEFAULT_IMAGE=null;Ot.DEFAULT_MAPPING=bo;Ot.DEFAULT_ANISOTROPY=1;class K0{constructor(t=0,e=0,n=0,s=1){K0.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=s}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,s){return this.x=t,this.y=e,this.z=n,this.w=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,s=this.z,r=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*s+a[12]*r,this.y=a[1]*e+a[5]*n+a[9]*s+a[13]*r,this.z=a[2]*e+a[6]*n+a[10]*s+a[14]*r,this.w=a[3]*e+a[7]*n+a[11]*s+a[15]*r,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,s,r;const l=t.elements,u=l[0],h=l[4],f=l[8],c=l[1],m=l[5],g=l[9],_=l[2],d=l[6],p=l[10];if(Math.abs(h-c)<.01&&Math.abs(f-_)<.01&&Math.abs(g-d)<.01){if(Math.abs(h+c)<.1&&Math.abs(f+_)<.1&&Math.abs(g+d)<.1&&Math.abs(u+m+p-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const y=(u+1)/2,v=(m+1)/2,T=(p+1)/2,A=(h+c)/4,w=(f+_)/4,P=(g+d)/4;return y>v&&y>T?y<.01?(n=0,s=.707106781,r=.707106781):(n=Math.sqrt(y),s=A/n,r=w/n):v>T?v<.01?(n=.707106781,s=0,r=.707106781):(s=Math.sqrt(v),n=A/s,r=P/s):T<.01?(n=.707106781,s=.707106781,r=0):(r=Math.sqrt(T),n=w/r,s=P/r),this.set(n,s,r,e),this}let x=Math.sqrt((d-g)*(d-g)+(f-_)*(f-_)+(c-h)*(c-h));return Math.abs(x)<.001&&(x=1),this.x=(d-g)/x,this.y=(f-_)/x,this.z=(c-h)/x,this.w=Math.acos((u+m+p-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=C0(this.x,t.x,e.x),this.y=C0(this.y,t.y,e.y),this.z=C0(this.z,t.z,e.z),this.w=C0(this.w,t.w,e.w),this}clampScalar(t,e){return this.x=C0(this.x,t,e),this.y=C0(this.y,t,e),this.z=C0(this.z,t,e),this.w=C0(this.w,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class N5 extends Sn{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new K0(0,0,t,e),this.scissorTest=!1,this.viewport=new K0(0,0,t,e);const s={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:ft,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new Ot(s,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const a=n.count;for(let o=0;o<a;o++)this.textures[o]=r.clone(),this.textures[o].isRenderTargetTexture=!0,this.textures[o].renderTarget=this;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this._depthTexture=null,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}set depthTexture(t){this._depthTexture!==null&&(this._depthTexture.renderTarget=null),t!==null&&(t.renderTarget=this),this._depthTexture=t}get depthTexture(){return this._depthTexture}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let s=0,r=this.textures.length;s<r;s++)this.textures[s].image.width=t,this.textures[s].image.height=e,this.textures[s].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let n=0,s=t.textures.length;n<s;n++)this.textures[n]=t.textures[n].clone(),this.textures[n].isRenderTargetTexture=!0,this.textures[n].renderTarget=this;const e=Object.assign({},t.texture.image);return this.texture.source=new la(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Zt extends N5{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class ts extends Ot{constructor(t=null,e=1,n=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:e,height:n,depth:s},this.magFilter=B0,this.minFilter=B0,this.wrapR=Nt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class O5 extends Zt{constructor(t=1,e=1,n=1,s={}){super(t,e,s),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new ts(null,t,e,n),this.texture.isRenderTargetTexture=!0}}class B5 extends Ot{constructor(t=null,e=1,n=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:e,height:n,depth:s},this.magFilter=B0,this.minFilter=B0,this.wrapR=Nt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Je{constructor(t=0,e=0,n=0,s=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=s}static slerpFlat(t,e,n,s,r,a,o){let l=n[s+0],u=n[s+1],h=n[s+2],f=n[s+3];const c=r[a+0],m=r[a+1],g=r[a+2],_=r[a+3];if(o===0){t[e+0]=l,t[e+1]=u,t[e+2]=h,t[e+3]=f;return}if(o===1){t[e+0]=c,t[e+1]=m,t[e+2]=g,t[e+3]=_;return}if(f!==_||l!==c||u!==m||h!==g){let d=1-o;const p=l*c+u*m+h*g+f*_,x=p>=0?1:-1,y=1-p*p;if(y>Number.EPSILON){const T=Math.sqrt(y),A=Math.atan2(T,p*x);d=Math.sin(d*A)/T,o=Math.sin(o*A)/T}const v=o*x;if(l=l*d+c*v,u=u*d+m*v,h=h*d+g*v,f=f*d+_*v,d===1-o){const T=1/Math.sqrt(l*l+u*u+h*h+f*f);l*=T,u*=T,h*=T,f*=T}}t[e]=l,t[e+1]=u,t[e+2]=h,t[e+3]=f}static multiplyQuaternionsFlat(t,e,n,s,r,a){const o=n[s],l=n[s+1],u=n[s+2],h=n[s+3],f=r[a],c=r[a+1],m=r[a+2],g=r[a+3];return t[e]=o*g+h*f+l*m-u*c,t[e+1]=l*g+h*c+u*f-o*m,t[e+2]=u*g+h*m+o*c-l*f,t[e+3]=h*g-o*f-l*c-u*m,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,s){return this._x=t,this._y=e,this._z=n,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,s=t._y,r=t._z,a=t._order,o=Math.cos,l=Math.sin,u=o(n/2),h=o(s/2),f=o(r/2),c=l(n/2),m=l(s/2),g=l(r/2);switch(a){case"XYZ":this._x=c*h*f+u*m*g,this._y=u*m*f-c*h*g,this._z=u*h*g+c*m*f,this._w=u*h*f-c*m*g;break;case"YXZ":this._x=c*h*f+u*m*g,this._y=u*m*f-c*h*g,this._z=u*h*g-c*m*f,this._w=u*h*f+c*m*g;break;case"ZXY":this._x=c*h*f-u*m*g,this._y=u*m*f+c*h*g,this._z=u*h*g+c*m*f,this._w=u*h*f-c*m*g;break;case"ZYX":this._x=c*h*f-u*m*g,this._y=u*m*f+c*h*g,this._z=u*h*g-c*m*f,this._w=u*h*f+c*m*g;break;case"YZX":this._x=c*h*f+u*m*g,this._y=u*m*f+c*h*g,this._z=u*h*g-c*m*f,this._w=u*h*f-c*m*g;break;case"XZY":this._x=c*h*f-u*m*g,this._y=u*m*f-c*h*g,this._z=u*h*g+c*m*f,this._w=u*h*f+c*m*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,s=Math.sin(n);return this._x=t.x*s,this._y=t.y*s,this._z=t.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],s=e[4],r=e[8],a=e[1],o=e[5],l=e[9],u=e[2],h=e[6],f=e[10],c=n+o+f;if(c>0){const m=.5/Math.sqrt(c+1);this._w=.25/m,this._x=(h-l)*m,this._y=(r-u)*m,this._z=(a-s)*m}else if(n>o&&n>f){const m=2*Math.sqrt(1+n-o-f);this._w=(h-l)/m,this._x=.25*m,this._y=(s+a)/m,this._z=(r+u)/m}else if(o>f){const m=2*Math.sqrt(1+o-n-f);this._w=(r-u)/m,this._x=(s+a)/m,this._y=.25*m,this._z=(l+h)/m}else{const m=2*Math.sqrt(1+f-n-o);this._w=(a-s)/m,this._x=(r+u)/m,this._y=(l+h)/m,this._z=.25*m}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(C0(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const s=Math.min(1,e/n);return this.slerp(t,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,s=t._y,r=t._z,a=t._w,o=e._x,l=e._y,u=e._z,h=e._w;return this._x=n*h+a*o+s*u-r*l,this._y=s*h+a*l+r*o-n*u,this._z=r*h+a*u+n*l-s*o,this._w=a*h-n*o-s*l-r*u,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,s=this._y,r=this._z,a=this._w;let o=a*t._w+n*t._x+s*t._y+r*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=s,this._z=r,this;const l=1-o*o;if(l<=Number.EPSILON){const m=1-e;return this._w=m*a+e*this._w,this._x=m*n+e*this._x,this._y=m*s+e*this._y,this._z=m*r+e*this._z,this.normalize(),this}const u=Math.sqrt(l),h=Math.atan2(u,o),f=Math.sin((1-e)*h)/u,c=Math.sin(e*h)/u;return this._w=a*f+this._w*c,this._x=n*f+this._x*c,this._y=s*f+this._y*c,this._z=r*f+this._z*c,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),s=Math.sqrt(1-n),r=Math.sqrt(n);return this.set(s*Math.sin(t),s*Math.cos(t),r*Math.sin(e),r*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class D{constructor(t=0,e=0,n=0){D.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return n===void 0&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(Va.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Va.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,s=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*s,this.y=r[1]*e+r[4]*n+r[7]*s,this.z=r[2]*e+r[5]*n+r[8]*s,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,s=this.z,r=t.elements,a=1/(r[3]*e+r[7]*n+r[11]*s+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*s+r[12])*a,this.y=(r[1]*e+r[5]*n+r[9]*s+r[13])*a,this.z=(r[2]*e+r[6]*n+r[10]*s+r[14])*a,this}applyQuaternion(t){const e=this.x,n=this.y,s=this.z,r=t.x,a=t.y,o=t.z,l=t.w,u=2*(a*s-o*n),h=2*(o*e-r*s),f=2*(r*n-a*e);return this.x=e+l*u+a*f-o*h,this.y=n+l*h+o*u-r*f,this.z=s+l*f+r*h-a*u,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,s=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*s,this.y=r[1]*e+r[5]*n+r[9]*s,this.z=r[2]*e+r[6]*n+r[10]*s,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=C0(this.x,t.x,e.x),this.y=C0(this.y,t.y,e.y),this.z=C0(this.z,t.z,e.z),this}clampScalar(t,e){return this.x=C0(this.x,t,e),this.y=C0(this.y,t,e),this.z=C0(this.z,t,e),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(C0(n,t,e))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,s=t.y,r=t.z,a=e.x,o=e.y,l=e.z;return this.x=s*l-r*o,this.y=r*a-n*l,this.z=n*o-s*a,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return fs.copy(this).projectOnVector(t),this.sub(fs)}reflect(t){return this.sub(fs.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(C0(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,s=this.z-t.z;return e*e+n*n+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const s=Math.sin(e)*t;return this.x=s*Math.sin(n),this.y=Math.cos(e)*t,this.z=s*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),s=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=s,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,n=Math.sqrt(1-e*e);return this.x=n*Math.cos(t),this.y=e,this.z=n*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const fs=new D,Va=new Je;class Bt{constructor(t=new D(1/0,1/0,1/0),e=new D(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e+=3)this.expandByPoint(fe.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,n=t.count;e<n;e++)this.expandByPoint(fe.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=fe.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(n!==void 0){const r=n.getAttribute("position");if(e===!0&&r!==void 0&&t.isInstancedMesh!==!0)for(let a=0,o=r.count;a<o;a++)t.isMesh===!0?t.getVertexPosition(a,fe):fe.fromBufferAttribute(r,a),fe.applyMatrix4(t.matrixWorld),this.expandByPoint(fe);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),ji.copy(t.boundingBox)):(n.boundingBox===null&&n.computeBoundingBox(),ji.copy(n.boundingBox)),ji.applyMatrix4(t.matrixWorld),this.union(ji)}const s=t.children;for(let r=0,a=s.length;r<a;r++)this.expandByObject(s[r],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,fe),fe.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ti),Ki.subVectors(this.max,Ti),Rn.subVectors(t.a,Ti),Cn.subVectors(t.b,Ti),Pn.subVectors(t.c,Ti),ke.subVectors(Cn,Rn),He.subVectors(Pn,Cn),nn.subVectors(Rn,Pn);let e=[0,-ke.z,ke.y,0,-He.z,He.y,0,-nn.z,nn.y,ke.z,0,-ke.x,He.z,0,-He.x,nn.z,0,-nn.x,-ke.y,ke.x,0,-He.y,He.x,0,-nn.y,nn.x,0];return!ds(e,Rn,Cn,Pn,Ki)||(e=[1,0,0,0,1,0,0,0,1],!ds(e,Rn,Cn,Pn,Ki))?!1:(Zi.crossVectors(ke,He),e=[Zi.x,Zi.y,Zi.z],ds(e,Rn,Cn,Pn,Ki))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,fe).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(fe).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Ee[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Ee[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Ee[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Ee[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Ee[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Ee[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Ee[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Ee[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Ee),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Ee=[new D,new D,new D,new D,new D,new D,new D,new D],fe=new D,ji=new Bt,Rn=new D,Cn=new D,Pn=new D,ke=new D,He=new D,nn=new D,Ti=new D,Ki=new D,Zi=new D,sn=new D;function ds(i,t,e,n,s){for(let r=0,a=i.length-3;r<=a;r+=3){sn.fromArray(i,r);const o=s.x*Math.abs(sn.x)+s.y*Math.abs(sn.y)+s.z*Math.abs(sn.z),l=t.dot(sn),u=e.dot(sn),h=n.dot(sn);if(Math.max(-Math.max(l,u,h),Math.min(l,u,h))>o)return!1}return!0}const z5=new Bt,Ei=new D,ps=new D;class es{constructor(t=new D,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;e!==void 0?n.copy(e):z5.setFromPoints(t).getCenter(n);let s=0;for(let r=0,a=t.length;r<a;r++)s=Math.max(s,n.distanceToSquared(t[r]));return this.radius=Math.sqrt(s),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Ei.subVectors(t,this.center);const e=Ei.lengthSq();if(e>this.radius*this.radius){const n=Math.sqrt(e),s=(n-this.radius)*.5;this.center.addScaledVector(Ei,s/n),this.radius+=s}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(ps.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Ei.copy(t.center).add(ps)),this.expandByPoint(Ei.copy(t.center).sub(ps))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const we=new D,ms=new D,Ji=new D,Ve=new D,gs=new D,Qi=new D,_s=new D;class Io{constructor(t=new D,e=new D(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,we)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=we.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(we.copy(this.origin).addScaledVector(this.direction,e),we.distanceToSquared(t))}distanceSqToSegment(t,e,n,s){ms.copy(t).add(e).multiplyScalar(.5),Ji.copy(e).sub(t).normalize(),Ve.copy(this.origin).sub(ms);const r=t.distanceTo(e)*.5,a=-this.direction.dot(Ji),o=Ve.dot(this.direction),l=-Ve.dot(Ji),u=Ve.lengthSq(),h=Math.abs(1-a*a);let f,c,m,g;if(h>0)if(f=a*l-o,c=a*o-l,g=r*h,f>=0)if(c>=-g)if(c<=g){const _=1/h;f*=_,c*=_,m=f*(f+a*c+2*o)+c*(a*f+c+2*l)+u}else c=r,f=Math.max(0,-(a*c+o)),m=-f*f+c*(c+2*l)+u;else c=-r,f=Math.max(0,-(a*c+o)),m=-f*f+c*(c+2*l)+u;else c<=-g?(f=Math.max(0,-(-a*r+o)),c=f>0?-r:Math.min(Math.max(-r,-l),r),m=-f*f+c*(c+2*l)+u):c<=g?(f=0,c=Math.min(Math.max(-r,-l),r),m=c*(c+2*l)+u):(f=Math.max(0,-(a*r+o)),c=f>0?r:Math.min(Math.max(-r,-l),r),m=-f*f+c*(c+2*l)+u);else c=a>0?-r:r,f=Math.max(0,-(a*c+o)),m=-f*f+c*(c+2*l)+u;return n&&n.copy(this.origin).addScaledVector(this.direction,f),s&&s.copy(ms).addScaledVector(Ji,c),m}intersectSphere(t,e){we.subVectors(t.center,this.origin);const n=we.dot(this.direction),s=we.dot(we)-n*n,r=t.radius*t.radius;if(s>r)return null;const a=Math.sqrt(r-s),o=n-a,l=n+a;return l<0?null:o<0?this.at(l,e):this.at(o,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return n===null?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,s,r,a,o,l;const u=1/this.direction.x,h=1/this.direction.y,f=1/this.direction.z,c=this.origin;return u>=0?(n=(t.min.x-c.x)*u,s=(t.max.x-c.x)*u):(n=(t.max.x-c.x)*u,s=(t.min.x-c.x)*u),h>=0?(r=(t.min.y-c.y)*h,a=(t.max.y-c.y)*h):(r=(t.max.y-c.y)*h,a=(t.min.y-c.y)*h),n>a||r>s||((r>n||isNaN(n))&&(n=r),(a<s||isNaN(s))&&(s=a),f>=0?(o=(t.min.z-c.z)*f,l=(t.max.z-c.z)*f):(o=(t.max.z-c.z)*f,l=(t.min.z-c.z)*f),n>l||o>s)||((o>n||n!==n)&&(n=o),(l<s||s!==s)&&(s=l),s<0)?null:this.at(n>=0?n:s,e)}intersectsBox(t){return this.intersectBox(t,we)!==null}intersectTriangle(t,e,n,s,r){gs.subVectors(e,t),Qi.subVectors(n,t),_s.crossVectors(gs,Qi);let a=this.direction.dot(_s),o;if(a>0){if(s)return null;o=1}else if(a<0)o=-1,a=-a;else return null;Ve.subVectors(this.origin,t);const l=o*this.direction.dot(Qi.crossVectors(Ve,Qi));if(l<0)return null;const u=o*this.direction.dot(gs.cross(Ve));if(u<0||l+u>a)return null;const h=-o*Ve.dot(_s);return h<0?null:this.at(h/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class U0{constructor(t,e,n,s,r,a,o,l,u,h,f,c,m,g,_,d){U0.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,n,s,r,a,o,l,u,h,f,c,m,g,_,d)}set(t,e,n,s,r,a,o,l,u,h,f,c,m,g,_,d){const p=this.elements;return p[0]=t,p[4]=e,p[8]=n,p[12]=s,p[1]=r,p[5]=a,p[9]=o,p[13]=l,p[2]=u,p[6]=h,p[10]=f,p[14]=c,p[3]=m,p[7]=g,p[11]=_,p[15]=d,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new U0().fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,s=1/Dn.setFromMatrixColumn(t,0).length(),r=1/Dn.setFromMatrixColumn(t,1).length(),a=1/Dn.setFromMatrixColumn(t,2).length();return e[0]=n[0]*s,e[1]=n[1]*s,e[2]=n[2]*s,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,s=t.y,r=t.z,a=Math.cos(n),o=Math.sin(n),l=Math.cos(s),u=Math.sin(s),h=Math.cos(r),f=Math.sin(r);if(t.order==="XYZ"){const c=a*h,m=a*f,g=o*h,_=o*f;e[0]=l*h,e[4]=-l*f,e[8]=u,e[1]=m+g*u,e[5]=c-_*u,e[9]=-o*l,e[2]=_-c*u,e[6]=g+m*u,e[10]=a*l}else if(t.order==="YXZ"){const c=l*h,m=l*f,g=u*h,_=u*f;e[0]=c+_*o,e[4]=g*o-m,e[8]=a*u,e[1]=a*f,e[5]=a*h,e[9]=-o,e[2]=m*o-g,e[6]=_+c*o,e[10]=a*l}else if(t.order==="ZXY"){const c=l*h,m=l*f,g=u*h,_=u*f;e[0]=c-_*o,e[4]=-a*f,e[8]=g+m*o,e[1]=m+g*o,e[5]=a*h,e[9]=_-c*o,e[2]=-a*u,e[6]=o,e[10]=a*l}else if(t.order==="ZYX"){const c=a*h,m=a*f,g=o*h,_=o*f;e[0]=l*h,e[4]=g*u-m,e[8]=c*u+_,e[1]=l*f,e[5]=_*u+c,e[9]=m*u-g,e[2]=-u,e[6]=o*l,e[10]=a*l}else if(t.order==="YZX"){const c=a*l,m=a*u,g=o*l,_=o*u;e[0]=l*h,e[4]=_-c*f,e[8]=g*f+m,e[1]=f,e[5]=a*h,e[9]=-o*h,e[2]=-u*h,e[6]=m*f+g,e[10]=c-_*f}else if(t.order==="XZY"){const c=a*l,m=a*u,g=o*l,_=o*u;e[0]=l*h,e[4]=-f,e[8]=u*h,e[1]=c*f+_,e[5]=a*h,e[9]=m*f-g,e[2]=g*f-m,e[6]=o*h,e[10]=_*f+c}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(k5,t,H5)}lookAt(t,e,n){const s=this.elements;return qt.subVectors(t,e),qt.lengthSq()===0&&(qt.z=1),qt.normalize(),Ge.crossVectors(n,qt),Ge.lengthSq()===0&&(Math.abs(n.z)===1?qt.x+=1e-4:qt.z+=1e-4,qt.normalize(),Ge.crossVectors(n,qt)),Ge.normalize(),t1.crossVectors(qt,Ge),s[0]=Ge.x,s[4]=t1.x,s[8]=qt.x,s[1]=Ge.y,s[5]=t1.y,s[9]=qt.y,s[2]=Ge.z,s[6]=t1.z,s[10]=qt.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,s=e.elements,r=this.elements,a=n[0],o=n[4],l=n[8],u=n[12],h=n[1],f=n[5],c=n[9],m=n[13],g=n[2],_=n[6],d=n[10],p=n[14],x=n[3],y=n[7],v=n[11],T=n[15],A=s[0],w=s[4],P=s[8],b=s[12],M=s[1],C=s[5],F=s[9],L=s[13],B=s[2],G=s[6],H=s[10],q=s[14],W=s[3],t0=s[7],c0=s[11],_0=s[15];return r[0]=a*A+o*M+l*B+u*W,r[4]=a*w+o*C+l*G+u*t0,r[8]=a*P+o*F+l*H+u*c0,r[12]=a*b+o*L+l*q+u*_0,r[1]=h*A+f*M+c*B+m*W,r[5]=h*w+f*C+c*G+m*t0,r[9]=h*P+f*F+c*H+m*c0,r[13]=h*b+f*L+c*q+m*_0,r[2]=g*A+_*M+d*B+p*W,r[6]=g*w+_*C+d*G+p*t0,r[10]=g*P+_*F+d*H+p*c0,r[14]=g*b+_*L+d*q+p*_0,r[3]=x*A+y*M+v*B+T*W,r[7]=x*w+y*C+v*G+T*t0,r[11]=x*P+y*F+v*H+T*c0,r[15]=x*b+y*L+v*q+T*_0,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],s=t[8],r=t[12],a=t[1],o=t[5],l=t[9],u=t[13],h=t[2],f=t[6],c=t[10],m=t[14],g=t[3],_=t[7],d=t[11],p=t[15];return g*(+r*l*f-s*u*f-r*o*c+n*u*c+s*o*m-n*l*m)+_*(+e*l*m-e*u*c+r*a*c-s*a*m+s*u*h-r*l*h)+d*(+e*u*f-e*o*m-r*a*f+n*a*m+r*o*h-n*u*h)+p*(-s*o*h-e*l*f+e*o*c+s*a*f-n*a*c+n*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const s=this.elements;return t.isVector3?(s[12]=t.x,s[13]=t.y,s[14]=t.z):(s[12]=t,s[13]=e,s[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],s=t[2],r=t[3],a=t[4],o=t[5],l=t[6],u=t[7],h=t[8],f=t[9],c=t[10],m=t[11],g=t[12],_=t[13],d=t[14],p=t[15],x=f*d*u-_*c*u+_*l*m-o*d*m-f*l*p+o*c*p,y=g*c*u-h*d*u-g*l*m+a*d*m+h*l*p-a*c*p,v=h*_*u-g*f*u+g*o*m-a*_*m-h*o*p+a*f*p,T=g*f*l-h*_*l-g*o*c+a*_*c+h*o*d-a*f*d,A=e*x+n*y+s*v+r*T;if(A===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/A;return t[0]=x*w,t[1]=(_*c*r-f*d*r-_*s*m+n*d*m+f*s*p-n*c*p)*w,t[2]=(o*d*r-_*l*r+_*s*u-n*d*u-o*s*p+n*l*p)*w,t[3]=(f*l*r-o*c*r-f*s*u+n*c*u+o*s*m-n*l*m)*w,t[4]=y*w,t[5]=(h*d*r-g*c*r+g*s*m-e*d*m-h*s*p+e*c*p)*w,t[6]=(g*l*r-a*d*r-g*s*u+e*d*u+a*s*p-e*l*p)*w,t[7]=(a*c*r-h*l*r+h*s*u-e*c*u-a*s*m+e*l*m)*w,t[8]=v*w,t[9]=(g*f*r-h*_*r-g*n*m+e*_*m+h*n*p-e*f*p)*w,t[10]=(a*_*r-g*o*r+g*n*u-e*_*u-a*n*p+e*o*p)*w,t[11]=(h*o*r-a*f*r-h*n*u+e*f*u+a*n*m-e*o*m)*w,t[12]=T*w,t[13]=(h*_*s-g*f*s+g*n*c-e*_*c-h*n*d+e*f*d)*w,t[14]=(g*o*s-a*_*s-g*n*l+e*_*l+a*n*d-e*o*d)*w,t[15]=(a*f*s-h*o*s+h*n*l-e*f*l-a*n*c+e*o*c)*w,this}scale(t){const e=this.elements,n=t.x,s=t.y,r=t.z;return e[0]*=n,e[4]*=s,e[8]*=r,e[1]*=n,e[5]*=s,e[9]*=r,e[2]*=n,e[6]*=s,e[10]*=r,e[3]*=n,e[7]*=s,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],s=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,s))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),s=Math.sin(e),r=1-n,a=t.x,o=t.y,l=t.z,u=r*a,h=r*o;return this.set(u*a+n,u*o-s*l,u*l+s*o,0,u*o+s*l,h*o+n,h*l-s*a,0,u*l-s*o,h*l+s*a,r*l*l+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,s,r,a){return this.set(1,n,r,0,t,1,a,0,e,s,1,0,0,0,0,1),this}compose(t,e,n){const s=this.elements,r=e._x,a=e._y,o=e._z,l=e._w,u=r+r,h=a+a,f=o+o,c=r*u,m=r*h,g=r*f,_=a*h,d=a*f,p=o*f,x=l*u,y=l*h,v=l*f,T=n.x,A=n.y,w=n.z;return s[0]=(1-(_+p))*T,s[1]=(m+v)*T,s[2]=(g-y)*T,s[3]=0,s[4]=(m-v)*A,s[5]=(1-(c+p))*A,s[6]=(d+x)*A,s[7]=0,s[8]=(g+y)*w,s[9]=(d-x)*w,s[10]=(1-(c+_))*w,s[11]=0,s[12]=t.x,s[13]=t.y,s[14]=t.z,s[15]=1,this}decompose(t,e,n){const s=this.elements;let r=Dn.set(s[0],s[1],s[2]).length();const a=Dn.set(s[4],s[5],s[6]).length(),o=Dn.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),t.x=s[12],t.y=s[13],t.z=s[14],de.copy(this);const u=1/r,h=1/a,f=1/o;return de.elements[0]*=u,de.elements[1]*=u,de.elements[2]*=u,de.elements[4]*=h,de.elements[5]*=h,de.elements[6]*=h,de.elements[8]*=f,de.elements[9]*=f,de.elements[10]*=f,e.setFromRotationMatrix(de),n.x=r,n.y=a,n.z=o,this}makePerspective(t,e,n,s,r,a,o=Fe){const l=this.elements,u=2*r/(e-t),h=2*r/(n-s),f=(e+t)/(e-t),c=(n+s)/(n-s);let m,g;if(o===Fe)m=-(a+r)/(a-r),g=-2*a*r/(a-r);else if(o===Y1)m=-a/(a-r),g=-a*r/(a-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+o);return l[0]=u,l[4]=0,l[8]=f,l[12]=0,l[1]=0,l[5]=h,l[9]=c,l[13]=0,l[2]=0,l[6]=0,l[10]=m,l[14]=g,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(t,e,n,s,r,a,o=Fe){const l=this.elements,u=1/(e-t),h=1/(n-s),f=1/(a-r),c=(e+t)*u,m=(n+s)*h;let g,_;if(o===Fe)g=(a+r)*f,_=-2*f;else if(o===Y1)g=r*f,_=-1*f;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+o);return l[0]=2*u,l[4]=0,l[8]=0,l[12]=-c,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-m,l[2]=0,l[6]=0,l[10]=_,l[14]=-g,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let s=0;s<16;s++)if(e[s]!==n[s])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Dn=new D,de=new U0,k5=new D(0,0,0),H5=new D(1,1,1),Ge=new D,t1=new D,qt=new D,Ga=new U0,Wa=new Je;class Se{constructor(t=0,e=0,n=0,s=Se.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=s}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,s=this._order){return this._x=t,this._y=e,this._z=n,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const s=t.elements,r=s[0],a=s[4],o=s[8],l=s[1],u=s[5],h=s[9],f=s[2],c=s[6],m=s[10];switch(e){case"XYZ":this._y=Math.asin(C0(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-h,m),this._z=Math.atan2(-a,r)):(this._x=Math.atan2(c,u),this._z=0);break;case"YXZ":this._x=Math.asin(-C0(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(o,m),this._z=Math.atan2(l,u)):(this._y=Math.atan2(-f,r),this._z=0);break;case"ZXY":this._x=Math.asin(C0(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-f,m),this._z=Math.atan2(-a,u)):(this._y=0,this._z=Math.atan2(l,r));break;case"ZYX":this._y=Math.asin(-C0(f,-1,1)),Math.abs(f)<.9999999?(this._x=Math.atan2(c,m),this._z=Math.atan2(l,r)):(this._x=0,this._z=Math.atan2(-a,u));break;case"YZX":this._z=Math.asin(C0(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,u),this._y=Math.atan2(-f,r)):(this._x=0,this._y=Math.atan2(o,m));break;case"XZY":this._z=Math.asin(-C0(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(c,u),this._y=Math.atan2(o,r)):(this._x=Math.atan2(-h,m),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,n===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return Ga.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Ga,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Wa.setFromEuler(this),this.setFromQuaternion(Wa,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Se.DEFAULT_ORDER="XYZ";class Lo{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let V5=0;const Xa=new D,In=new Je,Ae=new U0,e1=new D,wi=new D,G5=new D,W5=new Je,qa=new D(1,0,0),Ya=new D(0,1,0),$a=new D(0,0,1),ja={type:"added"},X5={type:"removed"},Ln={type:"childadded",child:null},vs={type:"childremoved",child:null};class Ct extends Sn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:V5++}),this.uuid=xi(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ct.DEFAULT_UP.clone();const t=new D,e=new Se,n=new Je,s=new D(1,1,1);function r(){n.setFromEuler(e,!1)}function a(){e.setFromQuaternion(n,void 0,!1)}e._onChange(r),n._onChange(a),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new U0},normalMatrix:{value:new P0}}),this.matrix=new U0,this.matrixWorld=new U0,this.matrixAutoUpdate=Ct.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Ct.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Lo,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return In.setFromAxisAngle(t,e),this.quaternion.multiply(In),this}rotateOnWorldAxis(t,e){return In.setFromAxisAngle(t,e),this.quaternion.premultiply(In),this}rotateX(t){return this.rotateOnAxis(qa,t)}rotateY(t){return this.rotateOnAxis(Ya,t)}rotateZ(t){return this.rotateOnAxis($a,t)}translateOnAxis(t,e){return Xa.copy(t).applyQuaternion(this.quaternion),this.position.add(Xa.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(qa,t)}translateY(t){return this.translateOnAxis(Ya,t)}translateZ(t){return this.translateOnAxis($a,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Ae.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?e1.copy(t):e1.set(t,e,n);const s=this.parent;this.updateWorldMatrix(!0,!1),wi.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Ae.lookAt(wi,e1,this.up):Ae.lookAt(e1,wi,this.up),this.quaternion.setFromRotationMatrix(Ae),s&&(Ae.extractRotation(s.matrixWorld),In.setFromRotationMatrix(Ae),this.quaternion.premultiply(In.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(ja),Ln.child=t,this.dispatchEvent(Ln),Ln.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let n=0;n<arguments.length;n++)this.remove(arguments[n]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(X5),vs.child=t,this.dispatchEvent(vs),vs.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Ae.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Ae.multiply(t.parent.matrixWorld)),t.applyMatrix4(Ae),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(ja),Ln.child=t,this.dispatchEvent(Ln),Ln.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,s=this.children.length;n<s;n++){const a=this.children[n].getObjectByProperty(t,e);if(a!==void 0)return a}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const s=this.children;for(let r=0,a=s.length;r<a;r++)s[r].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(wi,t,G5),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(wi,W5,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,s=e.length;n<s;n++)e[n].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let n=0,s=e.length;n<s;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,s=e.length;n<s;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(t===!0&&n!==null&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const s=this.children;for(let r=0,a=s.length;r<a;r++)s[r].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.visibility=this._visibility,s.active=this._active,s.bounds=this._bounds.map(o=>({boxInitialized:o.boxInitialized,boxMin:o.box.min.toArray(),boxMax:o.box.max.toArray(),sphereInitialized:o.sphereInitialized,sphereRadius:o.sphere.radius,sphereCenter:o.sphere.center.toArray()})),s.maxInstanceCount=this._maxInstanceCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.geometryCount=this._geometryCount,s.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(s.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(s.boundingSphere={center:s.boundingSphere.center.toArray(),radius:s.boundingSphere.radius}),this.boundingBox!==null&&(s.boundingBox={min:s.boundingBox.min.toArray(),max:s.boundingBox.max.toArray()}));function r(o,l){return o[l.uuid]===void 0&&(o[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(t.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const l=o.shapes;if(Array.isArray(l))for(let u=0,h=l.length;u<h;u++){const f=l[u];r(t.shapes,f)}else r(t.shapes,l)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(t.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let l=0,u=this.material.length;l<u;l++)o.push(r(t.materials,this.material[l]));s.material=o}else s.material=r(t.materials,this.material);if(this.children.length>0){s.children=[];for(let o=0;o<this.children.length;o++)s.children.push(this.children[o].toJSON(t).object)}if(this.animations.length>0){s.animations=[];for(let o=0;o<this.animations.length;o++){const l=this.animations[o];s.animations.push(r(t.animations,l))}}if(e){const o=a(t.geometries),l=a(t.materials),u=a(t.textures),h=a(t.images),f=a(t.shapes),c=a(t.skeletons),m=a(t.animations),g=a(t.nodes);o.length>0&&(n.geometries=o),l.length>0&&(n.materials=l),u.length>0&&(n.textures=u),h.length>0&&(n.images=h),f.length>0&&(n.shapes=f),c.length>0&&(n.skeletons=c),m.length>0&&(n.animations=m),g.length>0&&(n.nodes=g)}return n.object=s,n;function a(o){const l=[];for(const u in o){const h=o[u];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let n=0;n<t.children.length;n++){const s=t.children[n];this.add(s.clone())}return this}}Ct.DEFAULT_UP=new D(0,1,0);Ct.DEFAULT_MATRIX_AUTO_UPDATE=!0;Ct.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const pe=new D,Re=new D,xs=new D,Ce=new D,Fn=new D,Un=new D,Ka=new D,ys=new D,Ms=new D,bs=new D,Ss=new K0,Ts=new K0,Es=new K0;class bt{constructor(t=new D,e=new D,n=new D){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,s){s.subVectors(n,e),pe.subVectors(t,e),s.cross(pe);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(t,e,n,s,r){pe.subVectors(s,e),Re.subVectors(n,e),xs.subVectors(t,e);const a=pe.dot(pe),o=pe.dot(Re),l=pe.dot(xs),u=Re.dot(Re),h=Re.dot(xs),f=a*u-o*o;if(f===0)return r.set(0,0,0),null;const c=1/f,m=(u*l-o*h)*c,g=(a*h-o*l)*c;return r.set(1-m-g,g,m)}static containsPoint(t,e,n,s){return this.getBarycoord(t,e,n,s,Ce)===null?!1:Ce.x>=0&&Ce.y>=0&&Ce.x+Ce.y<=1}static getInterpolation(t,e,n,s,r,a,o,l){return this.getBarycoord(t,e,n,s,Ce)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(r,Ce.x),l.addScaledVector(a,Ce.y),l.addScaledVector(o,Ce.z),l)}static getInterpolatedAttribute(t,e,n,s,r,a){return Ss.setScalar(0),Ts.setScalar(0),Es.setScalar(0),Ss.fromBufferAttribute(t,e),Ts.fromBufferAttribute(t,n),Es.fromBufferAttribute(t,s),a.setScalar(0),a.addScaledVector(Ss,r.x),a.addScaledVector(Ts,r.y),a.addScaledVector(Es,r.z),a}static isFrontFacing(t,e,n,s){return pe.subVectors(n,e),Re.subVectors(t,e),pe.cross(Re).dot(s)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,s){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[s]),this}setFromAttributeAndIndices(t,e,n,s){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,s),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return pe.subVectors(this.c,this.b),Re.subVectors(this.a,this.b),pe.cross(Re).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return bt.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return bt.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,s,r){return bt.getInterpolation(t,this.a,this.b,this.c,e,n,s,r)}containsPoint(t){return bt.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return bt.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,s=this.b,r=this.c;let a,o;Fn.subVectors(s,n),Un.subVectors(r,n),ys.subVectors(t,n);const l=Fn.dot(ys),u=Un.dot(ys);if(l<=0&&u<=0)return e.copy(n);Ms.subVectors(t,s);const h=Fn.dot(Ms),f=Un.dot(Ms);if(h>=0&&f<=h)return e.copy(s);const c=l*f-h*u;if(c<=0&&l>=0&&h<=0)return a=l/(l-h),e.copy(n).addScaledVector(Fn,a);bs.subVectors(t,r);const m=Fn.dot(bs),g=Un.dot(bs);if(g>=0&&m<=g)return e.copy(r);const _=m*u-l*g;if(_<=0&&u>=0&&g<=0)return o=u/(u-g),e.copy(n).addScaledVector(Un,o);const d=h*g-m*f;if(d<=0&&f-h>=0&&m-g>=0)return Ka.subVectors(r,s),o=(f-h)/(f-h+(m-g)),e.copy(s).addScaledVector(Ka,o);const p=1/(d+_+c);return a=_*p,o=c*p,e.copy(n).addScaledVector(Fn,a).addScaledVector(Un,o)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const Fo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},We={h:0,s:0,l:0},n1={h:0,s:0,l:0};function ws(i,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?i+(t-i)*6*e:e<1/2?t:e<2/3?i+(t-i)*6*(2/3-e):i}class F0{constructor(t,e,n){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,n)}set(t,e,n){if(e===void 0&&n===void 0){const s=t;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(t,e,n);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=ne){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,q0.toWorkingColorSpace(this,e),this}setRGB(t,e,n,s=q0.workingColorSpace){return this.r=t,this.g=e,this.b=n,q0.toWorkingColorSpace(this,s),this}setHSL(t,e,n,s=q0.workingColorSpace){if(t=oa(t,1),e=C0(e,0,1),n=C0(n,0,1),e===0)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+e):n+e-n*e,a=2*n-r;this.r=ws(a,r,t+1/3),this.g=ws(a,r,t),this.b=ws(a,r,t-1/3)}return q0.toWorkingColorSpace(this,s),this}setStyle(t,e=ne){function n(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const a=s[1],o=s[2];switch(a){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,e);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,e);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return n(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(t)){const r=s[1],a=r.length;if(a===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,e);if(a===6)return this.setHex(parseInt(r,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=ne){const n=Fo[t.toLowerCase()];return n!==void 0?this.setHex(n,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Ne(t.r),this.g=Ne(t.g),this.b=Ne(t.b),this}copyLinearToSRGB(t){return this.r=ai(t.r),this.g=ai(t.g),this.b=ai(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=ne){return q0.fromWorkingColorSpace(wt.copy(this),t),Math.round(C0(wt.r*255,0,255))*65536+Math.round(C0(wt.g*255,0,255))*256+Math.round(C0(wt.b*255,0,255))}getHexString(t=ne){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=q0.workingColorSpace){q0.fromWorkingColorSpace(wt.copy(this),e);const n=wt.r,s=wt.g,r=wt.b,a=Math.max(n,s,r),o=Math.min(n,s,r);let l,u;const h=(o+a)/2;if(o===a)l=0,u=0;else{const f=a-o;switch(u=h<=.5?f/(a+o):f/(2-a-o),a){case n:l=(s-r)/f+(s<r?6:0);break;case s:l=(r-n)/f+2;break;case r:l=(n-s)/f+4;break}l/=6}return t.h=l,t.s=u,t.l=h,t}getRGB(t,e=q0.workingColorSpace){return q0.fromWorkingColorSpace(wt.copy(this),e),t.r=wt.r,t.g=wt.g,t.b=wt.b,t}getStyle(t=ne){q0.fromWorkingColorSpace(wt.copy(this),t);const e=wt.r,n=wt.g,s=wt.b;return t!==ne?`color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(n*255)},${Math.round(s*255)})`}offsetHSL(t,e,n){return this.getHSL(We),this.setHSL(We.h+t,We.s+e,We.l+n)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(We),t.getHSL(n1);const n=zi(We.h,n1.h,e),s=zi(We.s,n1.s,e),r=zi(We.l,n1.l,e);return this.setHSL(n,s,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,n=this.g,s=this.b,r=t.elements;return this.r=r[0]*e+r[3]*n+r[6]*s,this.g=r[1]*e+r[4]*n+r[7]*s,this.b=r[2]*e+r[5]*n+r[8]*s,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const wt=new F0;F0.NAMES=Fo;let q5=0;class Wi extends Sn{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:q5++}),this.uuid=xi(),this.name="",this.type="Material",this.blending=Ke,this.side=ve,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=rr,this.blendDst=ar,this.blendEquation=vn,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new F0(0,0,0),this.blendAlpha=0,this.depthFunc=oi,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Ua,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=wn,this.stencilZFail=wn,this.stencilZPass=wn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const n=t[e];if(n===void 0){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const s=this[e];if(s===void 0){console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(n):s&&s.isVector3&&n&&n.isVector3?s.copy(n):this[e]=n}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const n={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),this.roughness!==void 0&&(n.roughness=this.roughness),this.metalness!==void 0&&(n.metalness=this.metalness),this.sheen!==void 0&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(n.shininess=this.shininess),this.clearcoat!==void 0&&(n.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(n.dispersion=this.dispersion),this.iridescence!==void 0&&(n.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(n.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(n.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(n.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(n.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(n.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(n.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(n.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(n.combine=this.combine)),this.envMapRotation!==void 0&&(n.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(n.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(n.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(n.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(n.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(n.size=this.size),this.shadowSide!==null&&(n.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==Ke&&(n.blending=this.blending),this.side!==ve&&(n.side=this.side),this.vertexColors===!0&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.transparent===!0&&(n.transparent=!0),this.blendSrc!==rr&&(n.blendSrc=this.blendSrc),this.blendDst!==ar&&(n.blendDst=this.blendDst),this.blendEquation!==vn&&(n.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(n.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(n.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(n.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(n.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(n.blendAlpha=this.blendAlpha),this.depthFunc!==oi&&(n.depthFunc=this.depthFunc),this.depthTest===!1&&(n.depthTest=this.depthTest),this.depthWrite===!1&&(n.depthWrite=this.depthWrite),this.colorWrite===!1&&(n.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(n.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Ua&&(n.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(n.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(n.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==wn&&(n.stencilFail=this.stencilFail),this.stencilZFail!==wn&&(n.stencilZFail=this.stencilZFail),this.stencilZPass!==wn&&(n.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(n.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(n.rotation=this.rotation),this.polygonOffset===!0&&(n.polygonOffset=!0),this.polygonOffsetFactor!==0&&(n.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(n.linewidth=this.linewidth),this.dashSize!==void 0&&(n.dashSize=this.dashSize),this.gapSize!==void 0&&(n.gapSize=this.gapSize),this.scale!==void 0&&(n.scale=this.scale),this.dithering===!0&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),this.alphaHash===!0&&(n.alphaHash=!0),this.alphaToCoverage===!0&&(n.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(n.premultipliedAlpha=!0),this.forceSinglePass===!0&&(n.forceSinglePass=!0),this.wireframe===!0&&(n.wireframe=!0),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(n.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(n.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(n.flatShading=!0),this.visible===!1&&(n.visible=!1),this.toneMapped===!1&&(n.toneMapped=!1),this.fog===!1&&(n.fog=!1),Object.keys(this.userData).length>0&&(n.userData=this.userData);function s(r){const a=[];for(const o in r){const l=r[o];delete l.metadata,a.push(l)}return a}if(e){const r=s(t.textures),a=s(t.images);r.length>0&&(n.textures=r),a.length>0&&(n.images=a)}return n}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const s=e.length;n=new Array(s);for(let r=0;r!==s;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class ca extends Wi{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new F0(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Se,this.combine=yo,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const Ie=Y5();function Y5(){const i=new ArrayBuffer(4),t=new Float32Array(i),e=new Uint32Array(i),n=new Uint32Array(512),s=new Uint32Array(512);for(let l=0;l<256;++l){const u=l-127;u<-27?(n[l]=0,n[l|256]=32768,s[l]=24,s[l|256]=24):u<-14?(n[l]=1024>>-u-14,n[l|256]=1024>>-u-14|32768,s[l]=-u-1,s[l|256]=-u-1):u<=15?(n[l]=u+15<<10,n[l|256]=u+15<<10|32768,s[l]=13,s[l|256]=13):u<128?(n[l]=31744,n[l|256]=64512,s[l]=24,s[l|256]=24):(n[l]=31744,n[l|256]=64512,s[l]=13,s[l|256]=13)}const r=new Uint32Array(2048),a=new Uint32Array(64),o=new Uint32Array(64);for(let l=1;l<1024;++l){let u=l<<13,h=0;for(;!(u&8388608);)u<<=1,h-=8388608;u&=-8388609,h+=947912704,r[l]=u|h}for(let l=1024;l<2048;++l)r[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)a[l]=l<<23;a[31]=1199570944,a[32]=2147483648;for(let l=33;l<63;++l)a[l]=2147483648+(l-32<<23);a[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(o[l]=1024);return{floatView:t,uint32View:e,baseTable:n,shiftTable:s,mantissaTable:r,exponentTable:a,offsetTable:o}}function $5(i){Math.abs(i)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),i=C0(i,-65504,65504),Ie.floatView[0]=i;const t=Ie.uint32View[0],e=t>>23&511;return Ie.baseTable[e]+((t&8388607)>>Ie.shiftTable[e])}function j5(i){const t=i>>10;return Ie.uint32View[0]=Ie.mantissaTable[Ie.offsetTable[t]+(i&1023)]+Ie.exponentTable[t],Ie.floatView[0]}const Le={toHalfFloat:$5,fromHalfFloat:j5},pt=new D,i1=new f0;class ut{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=n,this.usage=Na,this.updateRanges=[],this.gpuType=nt,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[t+s]=e.array[n+s];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,n=this.count;e<n;e++)i1.fromBufferAttribute(this,e),i1.applyMatrix3(t),this.setXY(e,i1.x,i1.y);else if(this.itemSize===3)for(let e=0,n=this.count;e<n;e++)pt.fromBufferAttribute(this,e),pt.applyMatrix3(t),this.setXYZ(e,pt.x,pt.y,pt.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)pt.fromBufferAttribute(this,e),pt.applyMatrix4(t),this.setXYZ(e,pt.x,pt.y,pt.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)pt.fromBufferAttribute(this,e),pt.applyNormalMatrix(t),this.setXYZ(e,pt.x,pt.y,pt.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)pt.fromBufferAttribute(this,e),pt.transformDirection(t),this.setXYZ(e,pt.x,pt.y,pt.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let n=this.array[t*this.itemSize+e];return this.normalized&&(n=Kn(n,this.array)),n}setComponent(t,e,n){return this.normalized&&(n=Dt(n,this.array)),this.array[t*this.itemSize+e]=n,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Kn(e,this.array)),e}setX(t,e){return this.normalized&&(e=Dt(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Kn(e,this.array)),e}setY(t,e){return this.normalized&&(e=Dt(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Kn(e,this.array)),e}setZ(t,e){return this.normalized&&(e=Dt(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Kn(e,this.array)),e}setW(t,e){return this.normalized&&(e=Dt(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=Dt(e,this.array),n=Dt(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,s){return t*=this.itemSize,this.normalized&&(e=Dt(e,this.array),n=Dt(n,this.array),s=Dt(s,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=s,this}setXYZW(t,e,n,s,r){return t*=this.itemSize,this.normalized&&(e=Dt(e,this.array),n=Dt(n,this.array),s=Dt(s,this.array),r=Dt(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=s,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Na&&(t.usage=this.usage),t}}class Uo extends ut{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class No extends ut{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class yt extends ut{constructor(t,e,n){super(new Float32Array(t),e,n)}}let K5=0;const ee=new U0,As=new Ct,Nn=new D,Yt=new Bt,Ai=new Bt,xt=new D;class St extends Sn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:K5++}),this.uuid=xi(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Do(t)?No:Uo)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(n!==void 0){const r=new P0().getNormalMatrix(t);n.applyNormalMatrix(r),n.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(t),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return ee.makeRotationFromQuaternion(t),this.applyMatrix4(ee),this}rotateX(t){return ee.makeRotationX(t),this.applyMatrix4(ee),this}rotateY(t){return ee.makeRotationY(t),this.applyMatrix4(ee),this}rotateZ(t){return ee.makeRotationZ(t),this.applyMatrix4(ee),this}translate(t,e,n){return ee.makeTranslation(t,e,n),this.applyMatrix4(ee),this}scale(t,e,n){return ee.makeScale(t,e,n),this.applyMatrix4(ee),this}lookAt(t){return As.lookAt(t),As.updateMatrix(),this.applyMatrix4(As.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Nn).negate(),this.translate(Nn.x,Nn.y,Nn.z),this}setFromPoints(t){const e=this.getAttribute("position");if(e===void 0){const n=[];for(let s=0,r=t.length;s<r;s++){const a=t[s];n.push(a.x,a.y,a.z||0)}this.setAttribute("position",new yt(n,3))}else{const n=Math.min(t.length,e.count);for(let s=0;s<n;s++){const r=t[s];e.setXYZ(s,r.x,r.y,r.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Bt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new D(-1/0,-1/0,-1/0),new D(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let n=0,s=e.length;n<s;n++){const r=e[n];Yt.setFromBufferAttribute(r),this.morphTargetsRelative?(xt.addVectors(this.boundingBox.min,Yt.min),this.boundingBox.expandByPoint(xt),xt.addVectors(this.boundingBox.max,Yt.max),this.boundingBox.expandByPoint(xt)):(this.boundingBox.expandByPoint(Yt.min),this.boundingBox.expandByPoint(Yt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new es);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new D,1/0);return}if(t){const n=this.boundingSphere.center;if(Yt.setFromBufferAttribute(t),e)for(let r=0,a=e.length;r<a;r++){const o=e[r];Ai.setFromBufferAttribute(o),this.morphTargetsRelative?(xt.addVectors(Yt.min,Ai.min),Yt.expandByPoint(xt),xt.addVectors(Yt.max,Ai.max),Yt.expandByPoint(xt)):(Yt.expandByPoint(Ai.min),Yt.expandByPoint(Ai.max))}Yt.getCenter(n);let s=0;for(let r=0,a=t.count;r<a;r++)xt.fromBufferAttribute(t,r),s=Math.max(s,n.distanceToSquared(xt));if(e)for(let r=0,a=e.length;r<a;r++){const o=e[r],l=this.morphTargetsRelative;for(let u=0,h=o.count;u<h;u++)xt.fromBufferAttribute(o,u),l&&(Nn.fromBufferAttribute(t,u),xt.add(Nn)),s=Math.max(s,n.distanceToSquared(xt))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=e.position,s=e.normal,r=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ut(new Float32Array(4*n.count),4));const a=this.getAttribute("tangent"),o=[],l=[];for(let P=0;P<n.count;P++)o[P]=new D,l[P]=new D;const u=new D,h=new D,f=new D,c=new f0,m=new f0,g=new f0,_=new D,d=new D;function p(P,b,M){u.fromBufferAttribute(n,P),h.fromBufferAttribute(n,b),f.fromBufferAttribute(n,M),c.fromBufferAttribute(r,P),m.fromBufferAttribute(r,b),g.fromBufferAttribute(r,M),h.sub(u),f.sub(u),m.sub(c),g.sub(c);const C=1/(m.x*g.y-g.x*m.y);isFinite(C)&&(_.copy(h).multiplyScalar(g.y).addScaledVector(f,-m.y).multiplyScalar(C),d.copy(f).multiplyScalar(m.x).addScaledVector(h,-g.x).multiplyScalar(C),o[P].add(_),o[b].add(_),o[M].add(_),l[P].add(d),l[b].add(d),l[M].add(d))}let x=this.groups;x.length===0&&(x=[{start:0,count:t.count}]);for(let P=0,b=x.length;P<b;++P){const M=x[P],C=M.start,F=M.count;for(let L=C,B=C+F;L<B;L+=3)p(t.getX(L+0),t.getX(L+1),t.getX(L+2))}const y=new D,v=new D,T=new D,A=new D;function w(P){T.fromBufferAttribute(s,P),A.copy(T);const b=o[P];y.copy(b),y.sub(T.multiplyScalar(T.dot(b))).normalize(),v.crossVectors(A,b);const C=v.dot(l[P])<0?-1:1;a.setXYZW(P,y.x,y.y,y.z,C)}for(let P=0,b=x.length;P<b;++P){const M=x[P],C=M.start,F=M.count;for(let L=C,B=C+F;L<B;L+=3)w(t.getX(L+0)),w(t.getX(L+1)),w(t.getX(L+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let n=this.getAttribute("normal");if(n===void 0)n=new ut(new Float32Array(e.count*3),3),this.setAttribute("normal",n);else for(let c=0,m=n.count;c<m;c++)n.setXYZ(c,0,0,0);const s=new D,r=new D,a=new D,o=new D,l=new D,u=new D,h=new D,f=new D;if(t)for(let c=0,m=t.count;c<m;c+=3){const g=t.getX(c+0),_=t.getX(c+1),d=t.getX(c+2);s.fromBufferAttribute(e,g),r.fromBufferAttribute(e,_),a.fromBufferAttribute(e,d),h.subVectors(a,r),f.subVectors(s,r),h.cross(f),o.fromBufferAttribute(n,g),l.fromBufferAttribute(n,_),u.fromBufferAttribute(n,d),o.add(h),l.add(h),u.add(h),n.setXYZ(g,o.x,o.y,o.z),n.setXYZ(_,l.x,l.y,l.z),n.setXYZ(d,u.x,u.y,u.z)}else for(let c=0,m=e.count;c<m;c+=3)s.fromBufferAttribute(e,c+0),r.fromBufferAttribute(e,c+1),a.fromBufferAttribute(e,c+2),h.subVectors(a,r),f.subVectors(s,r),h.cross(f),n.setXYZ(c+0,h.x,h.y,h.z),n.setXYZ(c+1,h.x,h.y,h.z),n.setXYZ(c+2,h.x,h.y,h.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)xt.fromBufferAttribute(t,e),xt.normalize(),t.setXYZ(e,xt.x,xt.y,xt.z)}toNonIndexed(){function t(o,l){const u=o.array,h=o.itemSize,f=o.normalized,c=new u.constructor(l.length*h);let m=0,g=0;for(let _=0,d=l.length;_<d;_++){o.isInterleavedBufferAttribute?m=l[_]*o.data.stride+o.offset:m=l[_]*h;for(let p=0;p<h;p++)c[g++]=u[m++]}return new ut(c,h,f)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new St,n=this.index.array,s=this.attributes;for(const o in s){const l=s[o],u=t(l,n);e.setAttribute(o,u)}const r=this.morphAttributes;for(const o in r){const l=[],u=r[o];for(let h=0,f=u.length;h<f;h++){const c=u[h],m=t(c,n);l.push(m)}e.morphAttributes[o]=l}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let o=0,l=a.length;o<l;o++){const u=a[o];e.addGroup(u.start,u.count,u.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const u in l)l[u]!==void 0&&(t[u]=l[u]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const l in n){const u=n[l];t.data.attributes[l]=u.toJSON(t.data)}const s={};let r=!1;for(const l in this.morphAttributes){const u=this.morphAttributes[l],h=[];for(let f=0,c=u.length;f<c;f++){const m=u[f];h.push(m.toJSON(t.data))}h.length>0&&(s[l]=h,r=!0)}r&&(t.data.morphAttributes=s,t.data.morphTargetsRelative=this.morphTargetsRelative);const a=this.groups;a.length>0&&(t.data.groups=JSON.parse(JSON.stringify(a)));const o=this.boundingSphere;return o!==null&&(t.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;n!==null&&this.setIndex(n.clone(e));const s=t.attributes;for(const u in s){const h=s[u];this.setAttribute(u,h.clone(e))}const r=t.morphAttributes;for(const u in r){const h=[],f=r[u];for(let c=0,m=f.length;c<m;c++)h.push(f[c].clone(e));this.morphAttributes[u]=h}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let u=0,h=a.length;u<h;u++){const f=a[u];this.addGroup(f.start,f.count,f.materialIndex)}const o=t.boundingBox;o!==null&&(this.boundingBox=o.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Za=new U0,rn=new Io,s1=new es,Ja=new D,r1=new D,a1=new D,o1=new D,Rs=new D,l1=new D,Qa=new D,c1=new D;class At extends Ct{constructor(t=new St,e=new ca){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t,e){return super.copy(t,e),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const e=this.geometry.morphAttributes,n=Object.keys(e);if(n.length>0){const s=e[n[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,a=s.length;r<a;r++){const o=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}getVertexPosition(t,e){const n=this.geometry,s=n.attributes.position,r=n.morphAttributes.position,a=n.morphTargetsRelative;e.fromBufferAttribute(s,t);const o=this.morphTargetInfluences;if(r&&o){l1.set(0,0,0);for(let l=0,u=r.length;l<u;l++){const h=o[l],f=r[l];h!==0&&(Rs.fromBufferAttribute(f,t),a?l1.addScaledVector(Rs,h):l1.addScaledVector(Rs.sub(e),h))}e.add(l1)}return e}raycast(t,e){const n=this.geometry,s=this.material,r=this.matrixWorld;s!==void 0&&(n.boundingSphere===null&&n.computeBoundingSphere(),s1.copy(n.boundingSphere),s1.applyMatrix4(r),rn.copy(t.ray).recast(t.near),!(s1.containsPoint(rn.origin)===!1&&(rn.intersectSphere(s1,Ja)===null||rn.origin.distanceToSquared(Ja)>(t.far-t.near)**2))&&(Za.copy(r).invert(),rn.copy(t.ray).applyMatrix4(Za),!(n.boundingBox!==null&&rn.intersectsBox(n.boundingBox)===!1)&&this._computeIntersections(t,e,rn)))}_computeIntersections(t,e,n){let s;const r=this.geometry,a=this.material,o=r.index,l=r.attributes.position,u=r.attributes.uv,h=r.attributes.uv1,f=r.attributes.normal,c=r.groups,m=r.drawRange;if(o!==null)if(Array.isArray(a))for(let g=0,_=c.length;g<_;g++){const d=c[g],p=a[d.materialIndex],x=Math.max(d.start,m.start),y=Math.min(o.count,Math.min(d.start+d.count,m.start+m.count));for(let v=x,T=y;v<T;v+=3){const A=o.getX(v),w=o.getX(v+1),P=o.getX(v+2);s=u1(this,p,t,n,u,h,f,A,w,P),s&&(s.faceIndex=Math.floor(v/3),s.face.materialIndex=d.materialIndex,e.push(s))}}else{const g=Math.max(0,m.start),_=Math.min(o.count,m.start+m.count);for(let d=g,p=_;d<p;d+=3){const x=o.getX(d),y=o.getX(d+1),v=o.getX(d+2);s=u1(this,a,t,n,u,h,f,x,y,v),s&&(s.faceIndex=Math.floor(d/3),e.push(s))}}else if(l!==void 0)if(Array.isArray(a))for(let g=0,_=c.length;g<_;g++){const d=c[g],p=a[d.materialIndex],x=Math.max(d.start,m.start),y=Math.min(l.count,Math.min(d.start+d.count,m.start+m.count));for(let v=x,T=y;v<T;v+=3){const A=v,w=v+1,P=v+2;s=u1(this,p,t,n,u,h,f,A,w,P),s&&(s.faceIndex=Math.floor(v/3),s.face.materialIndex=d.materialIndex,e.push(s))}}else{const g=Math.max(0,m.start),_=Math.min(l.count,m.start+m.count);for(let d=g,p=_;d<p;d+=3){const x=d,y=d+1,v=d+2;s=u1(this,a,t,n,u,h,f,x,y,v),s&&(s.faceIndex=Math.floor(d/3),e.push(s))}}}}function Z5(i,t,e,n,s,r,a,o){let l;if(t.side===Rt?l=n.intersectTriangle(a,r,s,!0,o):l=n.intersectTriangle(s,r,a,t.side===ve,o),l===null)return null;c1.copy(o),c1.applyMatrix4(i.matrixWorld);const u=e.ray.origin.distanceTo(c1);return u<e.near||u>e.far?null:{distance:u,point:c1.clone(),object:i}}function u1(i,t,e,n,s,r,a,o,l,u){i.getVertexPosition(o,r1),i.getVertexPosition(l,a1),i.getVertexPosition(u,o1);const h=Z5(i,t,e,n,r1,a1,o1,Qa);if(h){const f=new D;bt.getBarycoord(Qa,r1,a1,o1,f),s&&(h.uv=bt.getInterpolatedAttribute(s,o,l,u,f,new f0)),r&&(h.uv1=bt.getInterpolatedAttribute(r,o,l,u,f,new f0)),a&&(h.normal=bt.getInterpolatedAttribute(a,o,l,u,f,new D),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const c={a:o,b:l,c:u,normal:new D,materialIndex:0};bt.getNormal(r1,a1,o1,c.normal),h.face=c,h.barycoord=f}return h}class yi extends St{constructor(t=1,e=1,n=1,s=1,r=1,a=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:s,heightSegments:r,depthSegments:a};const o=this;s=Math.floor(s),r=Math.floor(r),a=Math.floor(a);const l=[],u=[],h=[],f=[];let c=0,m=0;g("z","y","x",-1,-1,n,e,t,a,r,0),g("z","y","x",1,-1,n,e,-t,a,r,1),g("x","z","y",1,1,t,n,e,s,a,2),g("x","z","y",1,-1,t,n,-e,s,a,3),g("x","y","z",1,-1,t,e,n,s,r,4),g("x","y","z",-1,-1,t,e,-n,s,r,5),this.setIndex(l),this.setAttribute("position",new yt(u,3)),this.setAttribute("normal",new yt(h,3)),this.setAttribute("uv",new yt(f,2));function g(_,d,p,x,y,v,T,A,w,P,b){const M=v/w,C=T/P,F=v/2,L=T/2,B=A/2,G=w+1,H=P+1;let q=0,W=0;const t0=new D;for(let c0=0;c0<H;c0++){const _0=c0*C-L;for(let N0=0;N0<G;N0++){const tt=N0*M-F;t0[_]=tt*x,t0[d]=_0*y,t0[p]=B,u.push(t0.x,t0.y,t0.z),t0[_]=0,t0[d]=0,t0[p]=A>0?1:-1,h.push(t0.x,t0.y,t0.z),f.push(N0/w),f.push(1-c0/P),q+=1}}for(let c0=0;c0<P;c0++)for(let _0=0;_0<w;_0++){const N0=c+_0+G*c0,tt=c+_0+G*(c0+1),$=c+(_0+1)+G*(c0+1),e0=c+(_0+1)+G*c0;l.push(N0,tt,e0),l.push(tt,$,e0),W+=6}o.addGroup(m,W,b),m+=W,c+=q}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new yi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function _i(i){const t={};for(const e in i){t[e]={};for(const n in i[e]){const s=i[e][n];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[e][n]=null):t[e][n]=s.clone():Array.isArray(s)?t[e][n]=s.slice():t[e][n]=s}}return t}function It(i){const t={};for(let e=0;e<i.length;e++){const n=_i(i[e]);for(const s in n)t[s]=n[s]}return t}function J5(i){const t=[];for(let e=0;e<i.length;e++)t.push(i[e].clone());return t}function Oo(i){const t=i.getRenderTarget();return t===null?i.outputColorSpace:t.isXRRenderTarget===!0?t.texture.colorSpace:q0.workingColorSpace}const Q5={clone:_i,merge:It};var t4=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,e4=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class ce extends Wi{constructor(t){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=t4,this.fragmentShader=e4,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&this.setValues(t)}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=_i(t.uniforms),this.uniformsGroups=J5(t.uniformsGroups),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.fog=t.fog,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const s in this.uniforms){const a=this.uniforms[s].value;a&&a.isTexture?e.uniforms[s]={type:"t",value:a.toJSON(t).uuid}:a&&a.isColor?e.uniforms[s]={type:"c",value:a.getHex()}:a&&a.isVector2?e.uniforms[s]={type:"v2",value:a.toArray()}:a&&a.isVector3?e.uniforms[s]={type:"v3",value:a.toArray()}:a&&a.isVector4?e.uniforms[s]={type:"v4",value:a.toArray()}:a&&a.isMatrix3?e.uniforms[s]={type:"m3",value:a.toArray()}:a&&a.isMatrix4?e.uniforms[s]={type:"m4",value:a.toArray()}:e.uniforms[s]={value:a}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader,e.lights=this.lights,e.clipping=this.clipping;const n={};for(const s in this.extensions)this.extensions[s]===!0&&(n[s]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}class Bo extends Ct{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new U0,this.projectionMatrix=new U0,this.projectionMatrixInverse=new U0,this.coordinateSystem=Fe}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}const Xe=new D,t2=new f0,e2=new f0;class Lt extends Bo{constructor(t=50,e=1,n=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=s,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=gi*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Bi*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return gi*2*Math.atan(Math.tan(Bi*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){Xe.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(Xe.x,Xe.y).multiplyScalar(-t/Xe.z),Xe.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(Xe.x,Xe.y).multiplyScalar(-t/Xe.z)}getViewSize(t,e){return this.getViewBounds(t,t2,e2),e.subVectors(e2,t2)}setViewOffset(t,e,n,s,r,a){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Bi*.5*this.fov)/this.zoom,n=2*e,s=this.aspect*n,r=-.5*s;const a=this.view;if(this.view!==null&&this.view.enabled){const l=a.fullWidth,u=a.fullHeight;r+=a.offsetX*s/l,e-=a.offsetY*n/u,s*=a.width/l,n*=a.height/u}const o=this.filmOffset;o!==0&&(r+=t*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}const On=-90,Bn=1;class n4 extends Ct{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new Lt(On,Bn,t,e);s.layers=this.layers,this.add(s);const r=new Lt(On,Bn,t,e);r.layers=this.layers,this.add(r);const a=new Lt(On,Bn,t,e);a.layers=this.layers,this.add(a);const o=new Lt(On,Bn,t,e);o.layers=this.layers,this.add(o);const l=new Lt(On,Bn,t,e);l.layers=this.layers,this.add(l);const u=new Lt(On,Bn,t,e);u.layers=this.layers,this.add(u)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,s,r,a,o,l]=e;for(const u of e)this.remove(u);if(t===Fe)n.up.set(0,1,0),n.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),a.up.set(0,0,1),a.lookAt(0,-1,0),o.up.set(0,1,0),o.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(t===Y1)n.up.set(0,-1,0),n.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),a.up.set(0,0,-1),a.lookAt(0,-1,0),o.up.set(0,-1,0),o.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);for(const u of e)this.add(u),u.updateMatrixWorld()}update(t,e){this.parent===null&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:s}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[r,a,o,l,u,h]=this.children,f=t.getRenderTarget(),c=t.getActiveCubeFace(),m=t.getActiveMipmapLevel(),g=t.xr.enabled;t.xr.enabled=!1;const _=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,s),t.render(e,r),t.setRenderTarget(n,1,s),t.render(e,a),t.setRenderTarget(n,2,s),t.render(e,o),t.setRenderTarget(n,3,s),t.render(e,l),t.setRenderTarget(n,4,s),t.render(e,u),n.texture.generateMipmaps=_,t.setRenderTarget(n,5,s),t.render(e,h),t.setRenderTarget(f,c,m),t.xr.enabled=g,n.texture.needsPMREMUpdate=!0}}class zo extends Ot{constructor(t,e,n,s,r,a,o,l,u,h){t=t!==void 0?t:[],e=e!==void 0?e:li,super(t,e,n,s,r,a,o,l,u,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class i4 extends Zt{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const n={width:t,height:t,depth:1},s=[n,n,n,n,n,n];this.texture=new zo(s,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:ft}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new yi(5,5,5),r=new ce({name:"CubemapFromEquirect",uniforms:_i(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:Rt,blending:Kt});r.uniforms.tEquirect.value=e;const a=new At(s,r),o=e.minFilter;return e.minFilter===yn&&(e.minFilter=ft),new n4(1,10,this).update(t,a),e.minFilter=o,a.geometry.dispose(),a.material.dispose(),this}clear(t,e,n,s){const r=t.getRenderTarget();for(let a=0;a<6;a++)t.setRenderTarget(this,a),t.clear(e,n,s);t.setRenderTarget(r)}}class ko extends Ct{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Se,this.environmentIntensity=1,this.environmentRotation=new Se,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),this.backgroundBlurriness=t.backgroundBlurriness,this.backgroundIntensity=t.backgroundIntensity,this.backgroundRotation.copy(t.backgroundRotation),this.environmentIntensity=t.environmentIntensity,this.environmentRotation.copy(t.environmentRotation),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(e.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(e.object.backgroundIntensity=this.backgroundIntensity),e.object.backgroundRotation=this.backgroundRotation.toArray(),this.environmentIntensity!==1&&(e.object.environmentIntensity=this.environmentIntensity),e.object.environmentRotation=this.environmentRotation.toArray(),e}}class oe extends Ot{constructor(t=null,e=1,n=1,s,r,a,o,l,u=B0,h=B0,f,c){super(null,a,o,l,u,h,s,r,f,c),this.isDataTexture=!0,this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const Cs=new D,s4=new D,r4=new P0;class ye{constructor(t=new D(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,s){return this.normal.set(t,e,n),this.constant=s,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const s=Cs.subVectors(n,e).cross(s4.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(s,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const n=t.delta(Cs),s=this.normal.dot(n);if(s===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:e.copy(t.start).addScaledVector(n,r)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||r4.getNormalMatrix(t),s=this.coplanarPoint(Cs).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-s.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}const an=new es,h1=new D;class ua{constructor(t=new ye,e=new ye,n=new ye,s=new ye,r=new ye,a=new ye){this.planes=[t,e,n,s,r,a]}set(t,e,n,s,r,a){const o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(s),o[4].copy(r),o[5].copy(a),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t,e=Fe){const n=this.planes,s=t.elements,r=s[0],a=s[1],o=s[2],l=s[3],u=s[4],h=s[5],f=s[6],c=s[7],m=s[8],g=s[9],_=s[10],d=s[11],p=s[12],x=s[13],y=s[14],v=s[15];if(n[0].setComponents(l-r,c-u,d-m,v-p).normalize(),n[1].setComponents(l+r,c+u,d+m,v+p).normalize(),n[2].setComponents(l+a,c+h,d+g,v+x).normalize(),n[3].setComponents(l-a,c-h,d-g,v-x).normalize(),n[4].setComponents(l-o,c-f,d-_,v-y).normalize(),e===Fe)n[5].setComponents(l+o,c+f,d+_,v+y).normalize();else if(e===Y1)n[5].setComponents(o,f,_,y).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);return this}intersectsObject(t){if(t.boundingSphere!==void 0)t.boundingSphere===null&&t.computeBoundingSphere(),an.copy(t.boundingSphere).applyMatrix4(t.matrixWorld);else{const e=t.geometry;e.boundingSphere===null&&e.computeBoundingSphere(),an.copy(e.boundingSphere).applyMatrix4(t.matrixWorld)}return this.intersectsSphere(an)}intersectsSprite(t){return an.center.set(0,0,0),an.radius=.7071067811865476,an.applyMatrix4(t.matrixWorld),this.intersectsSphere(an)}intersectsSphere(t){const e=this.planes,n=t.center,s=-t.radius;for(let r=0;r<6;r++)if(e[r].distanceToPoint(n)<s)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const s=e[n];if(h1.x=s.normal.x>0?t.max.x:t.min.x,h1.y=s.normal.y>0?t.max.y:t.min.y,h1.z=s.normal.z>0?t.max.z:t.min.z,s.distanceToPoint(h1)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}class ti extends Ct{constructor(){super(),this.isGroup=!0,this.type="Group"}}class Ho extends Ot{constructor(t,e,n,s,r,a,o,l,u,h=ri){if(h!==ri&&h!==fi)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");n===void 0&&h===ri&&(n=ae),n===void 0&&h===fi&&(n=hi),super(null,s,r,a,o,l,h,n,u),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=o!==void 0?o:B0,this.minFilter=l!==void 0?l:B0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class a4{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,s=this.getPoint(0),r=0;e.push(0);for(let a=1;a<=t;a++)n=this.getPoint(a/t),r+=n.distanceTo(s),e.push(r),s=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let s=0;const r=n.length;let a;e?a=e:a=t*n[r-1];let o=0,l=r-1,u;for(;o<=l;)if(s=Math.floor(o+(l-o)/2),u=n[s]-a,u<0)o=s+1;else if(u>0)l=s-1;else{l=s;break}if(s=l,n[s]===a)return s/(r-1);const h=n[s],c=n[s+1]-h,m=(a-h)/c;return(s+m)/(r-1)}getTangent(t,e){let s=t-1e-4,r=t+1e-4;s<0&&(s=0),r>1&&(r=1);const a=this.getPoint(s),o=this.getPoint(r),l=e||(a.isVector2?new f0:new D);return l.copy(o).sub(a).normalize(),l}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new D,s=[],r=[],a=[],o=new D,l=new U0;for(let m=0;m<=t;m++){const g=m/t;s[m]=this.getTangentAt(g,new D)}r[0]=new D,a[0]=new D;let u=Number.MAX_VALUE;const h=Math.abs(s[0].x),f=Math.abs(s[0].y),c=Math.abs(s[0].z);h<=u&&(u=h,n.set(1,0,0)),f<=u&&(u=f,n.set(0,1,0)),c<=u&&n.set(0,0,1),o.crossVectors(s[0],n).normalize(),r[0].crossVectors(s[0],o),a[0].crossVectors(s[0],r[0]);for(let m=1;m<=t;m++){if(r[m]=r[m-1].clone(),a[m]=a[m-1].clone(),o.crossVectors(s[m-1],s[m]),o.length()>Number.EPSILON){o.normalize();const g=Math.acos(C0(s[m-1].dot(s[m]),-1,1));r[m].applyMatrix4(l.makeRotationAxis(o,g))}a[m].crossVectors(s[m],r[m])}if(e===!0){let m=Math.acos(C0(r[0].dot(r[t]),-1,1));m/=t,s[0].dot(o.crossVectors(r[0],r[t]))>0&&(m=-m);for(let g=1;g<=t;g++)r[g].applyMatrix4(l.makeRotationAxis(s[g],m*g)),a[g].crossVectors(s[g],r[g])}return{tangents:s,normals:r,binormals:a}}clone(){return new this.constructor().copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}function ha(){let i=0,t=0,e=0,n=0;function s(r,a,o,l){i=r,t=o,e=-3*r+3*a-2*o-l,n=2*r-2*a+o+l}return{initCatmullRom:function(r,a,o,l,u){s(a,o,u*(o-r),u*(l-a))},initNonuniformCatmullRom:function(r,a,o,l,u,h,f){let c=(a-r)/u-(o-r)/(u+h)+(o-a)/h,m=(o-a)/h-(l-a)/(h+f)+(l-o)/f;c*=h,m*=h,s(a,o,c,m)},calc:function(r){const a=r*r,o=a*r;return i+t*r+e*a+n*o}}}const f1=new D,Ps=new ha,Ds=new ha,Is=new ha;class Vr extends a4{constructor(t=[],e=!1,n="centripetal",s=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=s}getPoint(t,e=new D){const n=e,s=this.points,r=s.length,a=(r-(this.closed?0:1))*t;let o=Math.floor(a),l=a-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/r)+1)*r:l===0&&o===r-1&&(o=r-2,l=1);let u,h;this.closed||o>0?u=s[(o-1)%r]:(f1.subVectors(s[0],s[1]).add(s[0]),u=f1);const f=s[o%r],c=s[(o+1)%r];if(this.closed||o+2<r?h=s[(o+2)%r]:(f1.subVectors(s[r-1],s[r-2]).add(s[r-1]),h=f1),this.curveType==="centripetal"||this.curveType==="chordal"){const m=this.curveType==="chordal"?.5:.25;let g=Math.pow(u.distanceToSquared(f),m),_=Math.pow(f.distanceToSquared(c),m),d=Math.pow(c.distanceToSquared(h),m);_<1e-4&&(_=1),g<1e-4&&(g=_),d<1e-4&&(d=_),Ps.initNonuniformCatmullRom(u.x,f.x,c.x,h.x,g,_,d),Ds.initNonuniformCatmullRom(u.y,f.y,c.y,h.y,g,_,d),Is.initNonuniformCatmullRom(u.z,f.z,c.z,h.z,g,_,d)}else this.curveType==="catmullrom"&&(Ps.initCatmullRom(u.x,f.x,c.x,h.x,this.tension),Ds.initCatmullRom(u.y,f.y,c.y,h.y,this.tension),Is.initCatmullRom(u.z,f.z,c.z,h.z,this.tension));return n.set(Ps.calc(l),Ds.calc(l),Is.calc(l)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const s=t.points[e];this.points.push(s.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const s=this.points[e];t.points.push(s.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const s=t.points[e];this.points.push(new D().fromArray(s))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}class ns extends St{constructor(t=1,e=1,n=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:s};const r=t/2,a=e/2,o=Math.floor(n),l=Math.floor(s),u=o+1,h=l+1,f=t/o,c=e/l,m=[],g=[],_=[],d=[];for(let p=0;p<h;p++){const x=p*c-a;for(let y=0;y<u;y++){const v=y*f-r;g.push(v,-x,0),_.push(0,0,1),d.push(y/o),d.push(1-p/l)}}for(let p=0;p<l;p++)for(let x=0;x<o;x++){const y=x+u*p,v=x+u*(p+1),T=x+1+u*(p+1),A=x+1+u*p;m.push(y,v,A),m.push(v,T,A)}this.setIndex(m),this.setAttribute("position",new yt(g,3)),this.setAttribute("normal",new yt(_,3)),this.setAttribute("uv",new yt(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new ns(t.width,t.height,t.widthSegments,t.heightSegments)}}class fa extends St{constructor(t=1,e=32,n=16,s=0,r=Math.PI*2,a=0,o=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:s,phiLength:r,thetaStart:a,thetaLength:o},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const l=Math.min(a+o,Math.PI);let u=0;const h=[],f=new D,c=new D,m=[],g=[],_=[],d=[];for(let p=0;p<=n;p++){const x=[],y=p/n;let v=0;p===0&&a===0?v=.5/e:p===n&&l===Math.PI&&(v=-.5/e);for(let T=0;T<=e;T++){const A=T/e;f.x=-t*Math.cos(s+A*r)*Math.sin(a+y*o),f.y=t*Math.cos(a+y*o),f.z=t*Math.sin(s+A*r)*Math.sin(a+y*o),g.push(f.x,f.y,f.z),c.copy(f).normalize(),_.push(c.x,c.y,c.z),d.push(A+v,1-y),x.push(u++)}h.push(x)}for(let p=0;p<n;p++)for(let x=0;x<e;x++){const y=h[p][x+1],v=h[p][x],T=h[p+1][x],A=h[p+1][x+1];(p!==0||a>0)&&m.push(y,v,A),(p!==n-1||l<Math.PI)&&m.push(v,T,A)}this.setIndex(m),this.setAttribute("position",new yt(g,3)),this.setAttribute("normal",new yt(_,3)),this.setAttribute("uv",new yt(d,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}static fromJSON(t){return new fa(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class o4 extends Wi{constructor(t){super(),this.isMeshStandardMaterial=!0,this.type="MeshStandardMaterial",this.defines={STANDARD:""},this.color=new F0(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new F0(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Co,this.normalScale=new f0(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Se,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.envMapIntensity=t.envMapIntensity,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this.fog=t.fog,this}}class Vo extends o4{constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new f0(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return C0(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new F0(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new F0(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new F0(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=t.anisotropy,this.anisotropyRotation=t.anisotropyRotation,this.anisotropyMap=t.anisotropyMap,this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.dispersion=t.dispersion,this.ior=t.ior,this.iridescence=t.iridescence,this.iridescenceMap=t.iridescenceMap,this.iridescenceIOR=t.iridescenceIOR,this.iridescenceThicknessRange=[...t.iridescenceThicknessRange],this.iridescenceThicknessMap=t.iridescenceThicknessMap,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}class l4 extends Wi{constructor(t){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=e5,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}class c4 extends Wi{constructor(t){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(t){return super.copy(t),this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}class u4 extends Ct{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new F0(t),this.intensity=e}dispose(){}copy(t,e){return super.copy(t,e),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),this.target!==void 0&&(e.object.target=this.target.uuid),e}}const Ls=new U0,n2=new D,i2=new D;class h4{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new f0(512,512),this.map=null,this.mapPass=null,this.matrix=new U0,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ua,this._frameExtents=new f0(1,1),this._viewportCount=1,this._viewports=[new K0(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;n2.setFromMatrixPosition(t.matrixWorld),e.position.copy(n2),i2.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(i2),e.updateMatrixWorld(),Ls.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ls),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(Ls)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.intensity=t.intensity,this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.intensity!==1&&(t.intensity=this.intensity),this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class f4 extends h4{constructor(){super(new Lt(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,n=gi*2*t.angle*this.focus,s=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;(n!==e.fov||s!==e.aspect||r!==e.far)&&(e.fov=n,e.aspect=s,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}class d4 extends u4{constructor(t,e,n=0,s=Math.PI/3,r=0,a=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Ct.DEFAULT_UP),this.updateMatrix(),this.target=new Ct,this.distance=n,this.angle=s,this.penumbra=r,this.decay=a,this.map=null,this.shadow=new f4}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t,e){return super.copy(t,e),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}class Go extends Bo{constructor(t=-1,e=1,n=1,s=-1,r=.1,a=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=s,this.near=r,this.far=a,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,n,s,r,a){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=s,this.view.width=r,this.view.height=a,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=n-t,a=n+t,o=s+e,l=s-e;if(this.view!==null&&this.view.enabled){const u=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=u*this.view.offsetX,a=r+u*this.view.width,o-=h*this.view.offsetY,l=o-h*this.view.height}this.projectionMatrix.makeOrthographic(r,a,o,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}class p4 extends Lt{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class m4{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=s2(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=s2();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function s2(){return performance.now()}class Gr{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){return this.phi=C0(this.phi,1e-6,Math.PI-1e-6),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(C0(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const r2=new D,d1=new D;class Oe{constructor(t=new D,e=new D){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){r2.subVectors(t,this.start),d1.subVectors(this.end,this.start);const n=d1.dot(d1);let r=d1.dot(r2)/n;return e&&(r=C0(r,0,1)),r}closestPointToPoint(t,e,n){const s=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(s).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}class g4 extends Sn{constructor(t,e=null){super(),this.object=t,this.domElement=e,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}function a2(i,t,e,n){const s=_4(n);switch(e){case To:return i*t;case wo:return i*t;case Ao:return i*t*2;case di:return i*t/s.components*s.byteLength;case J1:return i*t/s.components*s.byteLength;case Q1:return i*t*2/s.components*s.byteLength;case Gi:return i*t*2/s.components*s.byteLength;case Eo:return i*t*3/s.components*s.byteLength;case Z0:return i*t*4/s.components*s.byteLength;case pi:return i*t*4/s.components*s.byteLength;case B1:case z1:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*8;case k1:case H1:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case _r:case xr:return Math.max(i,16)*Math.max(t,8)/4;case gr:case vr:return Math.max(i,8)*Math.max(t,8)/2;case yr:case Mr:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*8;case br:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case Sr:return Math.floor((i+3)/4)*Math.floor((t+3)/4)*16;case Tr:return Math.floor((i+4)/5)*Math.floor((t+3)/4)*16;case Er:return Math.floor((i+4)/5)*Math.floor((t+4)/5)*16;case wr:return Math.floor((i+5)/6)*Math.floor((t+4)/5)*16;case Ar:return Math.floor((i+5)/6)*Math.floor((t+5)/6)*16;case Rr:return Math.floor((i+7)/8)*Math.floor((t+4)/5)*16;case Cr:return Math.floor((i+7)/8)*Math.floor((t+5)/6)*16;case Pr:return Math.floor((i+7)/8)*Math.floor((t+7)/8)*16;case Dr:return Math.floor((i+9)/10)*Math.floor((t+4)/5)*16;case Ir:return Math.floor((i+9)/10)*Math.floor((t+5)/6)*16;case Lr:return Math.floor((i+9)/10)*Math.floor((t+7)/8)*16;case Fr:return Math.floor((i+9)/10)*Math.floor((t+9)/10)*16;case Ur:return Math.floor((i+11)/12)*Math.floor((t+9)/10)*16;case Nr:return Math.floor((i+11)/12)*Math.floor((t+11)/12)*16;case V1:case Or:case Br:return Math.ceil(i/4)*Math.ceil(t/4)*16;case Ro:case zr:return Math.ceil(i/4)*Math.ceil(t/4)*8;case kr:case Hr:return Math.ceil(i/4)*Math.ceil(t/4)*16}throw new Error(`Unable to determine texture byte length for ${e} format.`)}function _4(i){switch(i){case le:case X1:return{byteLength:1,components:1};case ui:case sa:case Ft:return{byteLength:2,components:1};case ra:case aa:return{byteLength:2,components:4};case ae:case si:case nt:return{byteLength:4,components:1};case So:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${i}.`)}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:K1}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=K1);/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */function Wo(){let i=null,t=!1,e=null,n=null;function s(r,a){e(r,a),n=i.requestAnimationFrame(s)}return{start:function(){t!==!0&&e!==null&&(n=i.requestAnimationFrame(s),t=!0)},stop:function(){i.cancelAnimationFrame(n),t=!1},setAnimationLoop:function(r){e=r},setContext:function(r){i=r}}}function v4(i){const t=new WeakMap;function e(o,l){const u=o.array,h=o.usage,f=u.byteLength,c=i.createBuffer();i.bindBuffer(l,c),i.bufferData(l,u,h),o.onUploadCallback();let m;if(u instanceof Float32Array)m=i.FLOAT;else if(u instanceof Uint16Array)o.isFloat16BufferAttribute?m=i.HALF_FLOAT:m=i.UNSIGNED_SHORT;else if(u instanceof Int16Array)m=i.SHORT;else if(u instanceof Uint32Array)m=i.UNSIGNED_INT;else if(u instanceof Int32Array)m=i.INT;else if(u instanceof Int8Array)m=i.BYTE;else if(u instanceof Uint8Array)m=i.UNSIGNED_BYTE;else if(u instanceof Uint8ClampedArray)m=i.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+u);return{buffer:c,type:m,bytesPerElement:u.BYTES_PER_ELEMENT,version:o.version,size:f}}function n(o,l,u){const h=l.array,f=l.updateRanges;if(i.bindBuffer(u,o),f.length===0)i.bufferSubData(u,0,h);else{f.sort((m,g)=>m.start-g.start);let c=0;for(let m=1;m<f.length;m++){const g=f[c],_=f[m];_.start<=g.start+g.count+1?g.count=Math.max(g.count,_.start+_.count-g.start):(++c,f[c]=_)}f.length=c+1;for(let m=0,g=f.length;m<g;m++){const _=f[m];i.bufferSubData(u,_.start*h.BYTES_PER_ELEMENT,h,_.start,_.count)}l.clearUpdateRanges()}l.onUploadCallback()}function s(o){return o.isInterleavedBufferAttribute&&(o=o.data),t.get(o)}function r(o){o.isInterleavedBufferAttribute&&(o=o.data);const l=t.get(o);l&&(i.deleteBuffer(l.buffer),t.delete(o))}function a(o,l){if(o.isInterleavedBufferAttribute&&(o=o.data),o.isGLBufferAttribute){const h=t.get(o);(!h||h.version<o.version)&&t.set(o,{buffer:o.buffer,type:o.type,bytesPerElement:o.elementSize,version:o.version});return}const u=t.get(o);if(u===void 0)t.set(o,e(o,l));else if(u.version<o.version){if(u.size!==o.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");n(u.buffer,o,l),u.version=o.version}}return{get:s,remove:r,update:a}}var x4=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,y4=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,M4=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,b4=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,S4=`#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`,T4=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,E4=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,w4=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,A4=`#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`,R4=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`,C4=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,P4=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,D4=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,I4=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,L4=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,F4=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`,U4=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,N4=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,O4=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,B4=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,z4=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,k4=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`,H4=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`,V4=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,G4=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,W4=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,X4=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,q4=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,Y4=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,$4=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,j4="gl_FragColor = linearToOutputTexel( gl_FragColor );",K4=`vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`,Z4=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,J4=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Q4=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,t6=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,e6=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,n6=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,i6=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,s6=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,r6=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,a6=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,o6=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,l6=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,c6=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,u6=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,h6=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,f6=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,d6=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,p6=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,m6=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,g6=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,_6=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,v6=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,x6=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,y6=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,M6=`#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,b6=`#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,S6=`#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,T6=`#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`,E6=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,w6=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,A6=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,R6=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,C6=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,P6=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,D6=`#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`,I6=`#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,L6=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,F6=`#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`,U6=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`,N6=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,O6=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,B6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,z6=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,k6=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,H6=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,V6=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,G6=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,W6=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,X6=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,q6=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,Y6=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,$6=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,j6=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,K6=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,Z6=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,J6=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,Q6=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,t7=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`,e7=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,n7=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,i7=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,s7=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,r7=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,a7=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,o7=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,l7=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,c7=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,u7=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,h7=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,f7=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,d7=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,p7=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,m7=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,g7=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,_7=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const v7=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,x7=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,y7=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,M7=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,b7=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,S7=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,T7=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,E7=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`,w7=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,A7=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,R7=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,C7=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,P7=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,D7=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,I7=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,L7=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,F7=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,U7=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,N7=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,O7=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,B7=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,z7=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,k7=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,H7=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,V7=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,G7=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,W7=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,X7=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,q7=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,Y7=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,$7=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,j7=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,K7=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,Z7=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,L0={alphahash_fragment:x4,alphahash_pars_fragment:y4,alphamap_fragment:M4,alphamap_pars_fragment:b4,alphatest_fragment:S4,alphatest_pars_fragment:T4,aomap_fragment:E4,aomap_pars_fragment:w4,batching_pars_vertex:A4,batching_vertex:R4,begin_vertex:C4,beginnormal_vertex:P4,bsdfs:D4,iridescence_fragment:I4,bumpmap_pars_fragment:L4,clipping_planes_fragment:F4,clipping_planes_pars_fragment:U4,clipping_planes_pars_vertex:N4,clipping_planes_vertex:O4,color_fragment:B4,color_pars_fragment:z4,color_pars_vertex:k4,color_vertex:H4,common:V4,cube_uv_reflection_fragment:G4,defaultnormal_vertex:W4,displacementmap_pars_vertex:X4,displacementmap_vertex:q4,emissivemap_fragment:Y4,emissivemap_pars_fragment:$4,colorspace_fragment:j4,colorspace_pars_fragment:K4,envmap_fragment:Z4,envmap_common_pars_fragment:J4,envmap_pars_fragment:Q4,envmap_pars_vertex:t6,envmap_physical_pars_fragment:h6,envmap_vertex:e6,fog_vertex:n6,fog_pars_vertex:i6,fog_fragment:s6,fog_pars_fragment:r6,gradientmap_pars_fragment:a6,lightmap_pars_fragment:o6,lights_lambert_fragment:l6,lights_lambert_pars_fragment:c6,lights_pars_begin:u6,lights_toon_fragment:f6,lights_toon_pars_fragment:d6,lights_phong_fragment:p6,lights_phong_pars_fragment:m6,lights_physical_fragment:g6,lights_physical_pars_fragment:_6,lights_fragment_begin:v6,lights_fragment_maps:x6,lights_fragment_end:y6,logdepthbuf_fragment:M6,logdepthbuf_pars_fragment:b6,logdepthbuf_pars_vertex:S6,logdepthbuf_vertex:T6,map_fragment:E6,map_pars_fragment:w6,map_particle_fragment:A6,map_particle_pars_fragment:R6,metalnessmap_fragment:C6,metalnessmap_pars_fragment:P6,morphinstance_vertex:D6,morphcolor_vertex:I6,morphnormal_vertex:L6,morphtarget_pars_vertex:F6,morphtarget_vertex:U6,normal_fragment_begin:N6,normal_fragment_maps:O6,normal_pars_fragment:B6,normal_pars_vertex:z6,normal_vertex:k6,normalmap_pars_fragment:H6,clearcoat_normal_fragment_begin:V6,clearcoat_normal_fragment_maps:G6,clearcoat_pars_fragment:W6,iridescence_pars_fragment:X6,opaque_fragment:q6,packing:Y6,premultiplied_alpha_fragment:$6,project_vertex:j6,dithering_fragment:K6,dithering_pars_fragment:Z6,roughnessmap_fragment:J6,roughnessmap_pars_fragment:Q6,shadowmap_pars_fragment:t7,shadowmap_pars_vertex:e7,shadowmap_vertex:n7,shadowmask_pars_fragment:i7,skinbase_vertex:s7,skinning_pars_vertex:r7,skinning_vertex:a7,skinnormal_vertex:o7,specularmap_fragment:l7,specularmap_pars_fragment:c7,tonemapping_fragment:u7,tonemapping_pars_fragment:h7,transmission_fragment:f7,transmission_pars_fragment:d7,uv_pars_fragment:p7,uv_pars_vertex:m7,uv_vertex:g7,worldpos_vertex:_7,background_vert:v7,background_frag:x7,backgroundCube_vert:y7,backgroundCube_frag:M7,cube_vert:b7,cube_frag:S7,depth_vert:T7,depth_frag:E7,distanceRGBA_vert:w7,distanceRGBA_frag:A7,equirect_vert:R7,equirect_frag:C7,linedashed_vert:P7,linedashed_frag:D7,meshbasic_vert:I7,meshbasic_frag:L7,meshlambert_vert:F7,meshlambert_frag:U7,meshmatcap_vert:N7,meshmatcap_frag:O7,meshnormal_vert:B7,meshnormal_frag:z7,meshphong_vert:k7,meshphong_frag:H7,meshphysical_vert:V7,meshphysical_frag:G7,meshtoon_vert:W7,meshtoon_frag:X7,points_vert:q7,points_frag:Y7,shadow_vert:$7,shadow_frag:j7,sprite_vert:K7,sprite_frag:Z7},n0={common:{diffuse:{value:new F0(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new P0},alphaMap:{value:null},alphaMapTransform:{value:new P0},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new P0}},envmap:{envMap:{value:null},envMapRotation:{value:new P0},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new P0}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new P0}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new P0},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new P0},normalScale:{value:new f0(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new P0},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new P0}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new P0}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new P0}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new F0(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new F0(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new P0},alphaTest:{value:0},uvTransform:{value:new P0}},sprite:{diffuse:{value:new F0(16777215)},opacity:{value:1},center:{value:new f0(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new P0},alphaMap:{value:null},alphaMapTransform:{value:new P0},alphaTest:{value:0}}},Me={basic:{uniforms:It([n0.common,n0.specularmap,n0.envmap,n0.aomap,n0.lightmap,n0.fog]),vertexShader:L0.meshbasic_vert,fragmentShader:L0.meshbasic_frag},lambert:{uniforms:It([n0.common,n0.specularmap,n0.envmap,n0.aomap,n0.lightmap,n0.emissivemap,n0.bumpmap,n0.normalmap,n0.displacementmap,n0.fog,n0.lights,{emissive:{value:new F0(0)}}]),vertexShader:L0.meshlambert_vert,fragmentShader:L0.meshlambert_frag},phong:{uniforms:It([n0.common,n0.specularmap,n0.envmap,n0.aomap,n0.lightmap,n0.emissivemap,n0.bumpmap,n0.normalmap,n0.displacementmap,n0.fog,n0.lights,{emissive:{value:new F0(0)},specular:{value:new F0(1118481)},shininess:{value:30}}]),vertexShader:L0.meshphong_vert,fragmentShader:L0.meshphong_frag},standard:{uniforms:It([n0.common,n0.envmap,n0.aomap,n0.lightmap,n0.emissivemap,n0.bumpmap,n0.normalmap,n0.displacementmap,n0.roughnessmap,n0.metalnessmap,n0.fog,n0.lights,{emissive:{value:new F0(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:L0.meshphysical_vert,fragmentShader:L0.meshphysical_frag},toon:{uniforms:It([n0.common,n0.aomap,n0.lightmap,n0.emissivemap,n0.bumpmap,n0.normalmap,n0.displacementmap,n0.gradientmap,n0.fog,n0.lights,{emissive:{value:new F0(0)}}]),vertexShader:L0.meshtoon_vert,fragmentShader:L0.meshtoon_frag},matcap:{uniforms:It([n0.common,n0.bumpmap,n0.normalmap,n0.displacementmap,n0.fog,{matcap:{value:null}}]),vertexShader:L0.meshmatcap_vert,fragmentShader:L0.meshmatcap_frag},points:{uniforms:It([n0.points,n0.fog]),vertexShader:L0.points_vert,fragmentShader:L0.points_frag},dashed:{uniforms:It([n0.common,n0.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:L0.linedashed_vert,fragmentShader:L0.linedashed_frag},depth:{uniforms:It([n0.common,n0.displacementmap]),vertexShader:L0.depth_vert,fragmentShader:L0.depth_frag},normal:{uniforms:It([n0.common,n0.bumpmap,n0.normalmap,n0.displacementmap,{opacity:{value:1}}]),vertexShader:L0.meshnormal_vert,fragmentShader:L0.meshnormal_frag},sprite:{uniforms:It([n0.sprite,n0.fog]),vertexShader:L0.sprite_vert,fragmentShader:L0.sprite_frag},background:{uniforms:{uvTransform:{value:new P0},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:L0.background_vert,fragmentShader:L0.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new P0}},vertexShader:L0.backgroundCube_vert,fragmentShader:L0.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:L0.cube_vert,fragmentShader:L0.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:L0.equirect_vert,fragmentShader:L0.equirect_frag},distanceRGBA:{uniforms:It([n0.common,n0.displacementmap,{referencePosition:{value:new D},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:L0.distanceRGBA_vert,fragmentShader:L0.distanceRGBA_frag},shadow:{uniforms:It([n0.lights,n0.fog,{color:{value:new F0(0)},opacity:{value:1}}]),vertexShader:L0.shadow_vert,fragmentShader:L0.shadow_frag}};Me.physical={uniforms:It([Me.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new P0},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new P0},clearcoatNormalScale:{value:new f0(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new P0},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new P0},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new P0},sheen:{value:0},sheenColor:{value:new F0(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new P0},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new P0},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new P0},transmissionSamplerSize:{value:new f0},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new P0},attenuationDistance:{value:0},attenuationColor:{value:new F0(0)},specularColor:{value:new F0(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new P0},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new P0},anisotropyVector:{value:new f0},anisotropyMap:{value:null},anisotropyMapTransform:{value:new P0}}]),vertexShader:L0.meshphysical_vert,fragmentShader:L0.meshphysical_frag};const p1={r:0,b:0,g:0},on=new Se,J7=new U0;function Q7(i,t,e,n,s,r,a){const o=new F0(0);let l=r===!0?0:1,u,h,f=null,c=0,m=null;function g(y){let v=y.isScene===!0?y.background:null;return v&&v.isTexture&&(v=(y.backgroundBlurriness>0?e:t).get(v)),v}function _(y){let v=!1;const T=g(y);T===null?p(o,l):T&&T.isColor&&(p(T,1),v=!0);const A=i.xr.getEnvironmentBlendMode();A==="additive"?n.buffers.color.setClear(0,0,0,1,a):A==="alpha-blend"&&n.buffers.color.setClear(0,0,0,0,a),(i.autoClear||v)&&(n.buffers.depth.setTest(!0),n.buffers.depth.setMask(!0),n.buffers.color.setMask(!0),i.clear(i.autoClearColor,i.autoClearDepth,i.autoClearStencil))}function d(y,v){const T=g(v);T&&(T.isCubeTexture||T.mapping===Z1)?(h===void 0&&(h=new At(new yi(1,1,1),new ce({name:"BackgroundCubeMaterial",uniforms:_i(Me.backgroundCube.uniforms),vertexShader:Me.backgroundCube.vertexShader,fragmentShader:Me.backgroundCube.fragmentShader,side:Rt,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(A,w,P){this.matrixWorld.copyPosition(P.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(h)),on.copy(v.backgroundRotation),on.x*=-1,on.y*=-1,on.z*=-1,T.isCubeTexture&&T.isRenderTargetTexture===!1&&(on.y*=-1,on.z*=-1),h.material.uniforms.envMap.value=T,h.material.uniforms.flipEnvMap.value=T.isCubeTexture&&T.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=v.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,h.material.uniforms.backgroundRotation.value.setFromMatrix4(J7.makeRotationFromEuler(on)),h.material.toneMapped=q0.getTransfer(T.colorSpace)!==J0,(f!==T||c!==T.version||m!==i.toneMapping)&&(h.material.needsUpdate=!0,f=T,c=T.version,m=i.toneMapping),h.layers.enableAll(),y.unshift(h,h.geometry,h.material,0,0,null)):T&&T.isTexture&&(u===void 0&&(u=new At(new ns(2,2),new ce({name:"BackgroundMaterial",uniforms:_i(Me.background.uniforms),vertexShader:Me.background.vertexShader,fragmentShader:Me.background.fragmentShader,side:ve,depthTest:!1,depthWrite:!1,fog:!1})),u.geometry.deleteAttribute("normal"),Object.defineProperty(u.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(u)),u.material.uniforms.t2D.value=T,u.material.uniforms.backgroundIntensity.value=v.backgroundIntensity,u.material.toneMapped=q0.getTransfer(T.colorSpace)!==J0,T.matrixAutoUpdate===!0&&T.updateMatrix(),u.material.uniforms.uvTransform.value.copy(T.matrix),(f!==T||c!==T.version||m!==i.toneMapping)&&(u.material.needsUpdate=!0,f=T,c=T.version,m=i.toneMapping),u.layers.enableAll(),y.unshift(u,u.geometry,u.material,0,0,null))}function p(y,v){y.getRGB(p1,Oo(i)),n.buffers.color.setClear(p1.r,p1.g,p1.b,v,a)}function x(){h!==void 0&&(h.geometry.dispose(),h.material.dispose()),u!==void 0&&(u.geometry.dispose(),u.material.dispose())}return{getClearColor:function(){return o},setClearColor:function(y,v=1){o.set(y),l=v,p(o,l)},getClearAlpha:function(){return l},setClearAlpha:function(y){l=y,p(o,l)},render:_,addToRenderList:d,dispose:x}}function t8(i,t){const e=i.getParameter(i.MAX_VERTEX_ATTRIBS),n={},s=c(null);let r=s,a=!1;function o(M,C,F,L,B){let G=!1;const H=f(L,F,C);r!==H&&(r=H,u(r.object)),G=m(M,L,F,B),G&&g(M,L,F,B),B!==null&&t.update(B,i.ELEMENT_ARRAY_BUFFER),(G||a)&&(a=!1,v(M,C,F,L),B!==null&&i.bindBuffer(i.ELEMENT_ARRAY_BUFFER,t.get(B).buffer))}function l(){return i.createVertexArray()}function u(M){return i.bindVertexArray(M)}function h(M){return i.deleteVertexArray(M)}function f(M,C,F){const L=F.wireframe===!0;let B=n[M.id];B===void 0&&(B={},n[M.id]=B);let G=B[C.id];G===void 0&&(G={},B[C.id]=G);let H=G[L];return H===void 0&&(H=c(l()),G[L]=H),H}function c(M){const C=[],F=[],L=[];for(let B=0;B<e;B++)C[B]=0,F[B]=0,L[B]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:C,enabledAttributes:F,attributeDivisors:L,object:M,attributes:{},index:null}}function m(M,C,F,L){const B=r.attributes,G=C.attributes;let H=0;const q=F.getAttributes();for(const W in q)if(q[W].location>=0){const c0=B[W];let _0=G[W];if(_0===void 0&&(W==="instanceMatrix"&&M.instanceMatrix&&(_0=M.instanceMatrix),W==="instanceColor"&&M.instanceColor&&(_0=M.instanceColor)),c0===void 0||c0.attribute!==_0||_0&&c0.data!==_0.data)return!0;H++}return r.attributesNum!==H||r.index!==L}function g(M,C,F,L){const B={},G=C.attributes;let H=0;const q=F.getAttributes();for(const W in q)if(q[W].location>=0){let c0=G[W];c0===void 0&&(W==="instanceMatrix"&&M.instanceMatrix&&(c0=M.instanceMatrix),W==="instanceColor"&&M.instanceColor&&(c0=M.instanceColor));const _0={};_0.attribute=c0,c0&&c0.data&&(_0.data=c0.data),B[W]=_0,H++}r.attributes=B,r.attributesNum=H,r.index=L}function _(){const M=r.newAttributes;for(let C=0,F=M.length;C<F;C++)M[C]=0}function d(M){p(M,0)}function p(M,C){const F=r.newAttributes,L=r.enabledAttributes,B=r.attributeDivisors;F[M]=1,L[M]===0&&(i.enableVertexAttribArray(M),L[M]=1),B[M]!==C&&(i.vertexAttribDivisor(M,C),B[M]=C)}function x(){const M=r.newAttributes,C=r.enabledAttributes;for(let F=0,L=C.length;F<L;F++)C[F]!==M[F]&&(i.disableVertexAttribArray(F),C[F]=0)}function y(M,C,F,L,B,G,H){H===!0?i.vertexAttribIPointer(M,C,F,B,G):i.vertexAttribPointer(M,C,F,L,B,G)}function v(M,C,F,L){_();const B=L.attributes,G=F.getAttributes(),H=C.defaultAttributeValues;for(const q in G){const W=G[q];if(W.location>=0){let t0=B[q];if(t0===void 0&&(q==="instanceMatrix"&&M.instanceMatrix&&(t0=M.instanceMatrix),q==="instanceColor"&&M.instanceColor&&(t0=M.instanceColor)),t0!==void 0){const c0=t0.normalized,_0=t0.itemSize,N0=t.get(t0);if(N0===void 0)continue;const tt=N0.buffer,$=N0.type,e0=N0.bytesPerElement,g0=$===i.INT||$===i.UNSIGNED_INT||t0.gpuType===si;if(t0.isInterleavedBufferAttribute){const r0=t0.data,T0=r0.stride,A0=t0.offset;if(r0.isInstancedInterleavedBuffer){for(let O0=0;O0<W.locationSize;O0++)p(W.location+O0,r0.meshPerAttribute);M.isInstancedMesh!==!0&&L._maxInstanceCount===void 0&&(L._maxInstanceCount=r0.meshPerAttribute*r0.count)}else for(let O0=0;O0<W.locationSize;O0++)d(W.location+O0);i.bindBuffer(i.ARRAY_BUFFER,tt);for(let O0=0;O0<W.locationSize;O0++)y(W.location+O0,_0/W.locationSize,$,c0,T0*e0,(A0+_0/W.locationSize*O0)*e0,g0)}else{if(t0.isInstancedBufferAttribute){for(let r0=0;r0<W.locationSize;r0++)p(W.location+r0,t0.meshPerAttribute);M.isInstancedMesh!==!0&&L._maxInstanceCount===void 0&&(L._maxInstanceCount=t0.meshPerAttribute*t0.count)}else for(let r0=0;r0<W.locationSize;r0++)d(W.location+r0);i.bindBuffer(i.ARRAY_BUFFER,tt);for(let r0=0;r0<W.locationSize;r0++)y(W.location+r0,_0/W.locationSize,$,c0,_0*e0,_0/W.locationSize*r0*e0,g0)}}else if(H!==void 0){const c0=H[q];if(c0!==void 0)switch(c0.length){case 2:i.vertexAttrib2fv(W.location,c0);break;case 3:i.vertexAttrib3fv(W.location,c0);break;case 4:i.vertexAttrib4fv(W.location,c0);break;default:i.vertexAttrib1fv(W.location,c0)}}}}x()}function T(){P();for(const M in n){const C=n[M];for(const F in C){const L=C[F];for(const B in L)h(L[B].object),delete L[B];delete C[F]}delete n[M]}}function A(M){if(n[M.id]===void 0)return;const C=n[M.id];for(const F in C){const L=C[F];for(const B in L)h(L[B].object),delete L[B];delete C[F]}delete n[M.id]}function w(M){for(const C in n){const F=n[C];if(F[M.id]===void 0)continue;const L=F[M.id];for(const B in L)h(L[B].object),delete L[B];delete F[M.id]}}function P(){b(),a=!0,r!==s&&(r=s,u(r.object))}function b(){s.geometry=null,s.program=null,s.wireframe=!1}return{setup:o,reset:P,resetDefaultState:b,dispose:T,releaseStatesOfGeometry:A,releaseStatesOfProgram:w,initAttributes:_,enableAttribute:d,disableUnusedAttributes:x}}function e8(i,t,e){let n;function s(u){n=u}function r(u,h){i.drawArrays(n,u,h),e.update(h,n,1)}function a(u,h,f){f!==0&&(i.drawArraysInstanced(n,u,h,f),e.update(h,n,f))}function o(u,h,f){if(f===0)return;t.get("WEBGL_multi_draw").multiDrawArraysWEBGL(n,u,0,h,0,f);let m=0;for(let g=0;g<f;g++)m+=h[g];e.update(m,n,1)}function l(u,h,f,c){if(f===0)return;const m=t.get("WEBGL_multi_draw");if(m===null)for(let g=0;g<u.length;g++)a(u[g],h[g],c[g]);else{m.multiDrawArraysInstancedWEBGL(n,u,0,h,0,c,0,f);let g=0;for(let _=0;_<f;_++)g+=h[_]*c[_];e.update(g,n,1)}}this.setMode=s,this.render=r,this.renderInstances=a,this.renderMultiDraw=o,this.renderMultiDrawInstances=l}function n8(i,t,e,n){let s;function r(){if(s!==void 0)return s;if(t.has("EXT_texture_filter_anisotropic")===!0){const w=t.get("EXT_texture_filter_anisotropic");s=i.getParameter(w.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s}function a(w){return!(w!==Z0&&n.convert(w)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_FORMAT))}function o(w){const P=w===Ft&&(t.has("EXT_color_buffer_half_float")||t.has("EXT_color_buffer_float"));return!(w!==le&&n.convert(w)!==i.getParameter(i.IMPLEMENTATION_COLOR_READ_TYPE)&&w!==nt&&!P)}function l(w){if(w==="highp"){if(i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.HIGH_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.HIGH_FLOAT).precision>0)return"highp";w="mediump"}return w==="mediump"&&i.getShaderPrecisionFormat(i.VERTEX_SHADER,i.MEDIUM_FLOAT).precision>0&&i.getShaderPrecisionFormat(i.FRAGMENT_SHADER,i.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let u=e.precision!==void 0?e.precision:"highp";const h=l(u);h!==u&&(console.warn("THREE.WebGLRenderer:",u,"not supported, using",h,"instead."),u=h);const f=e.logarithmicDepthBuffer===!0,c=e.reverseDepthBuffer===!0&&t.has("EXT_clip_control"),m=i.getParameter(i.MAX_TEXTURE_IMAGE_UNITS),g=i.getParameter(i.MAX_VERTEX_TEXTURE_IMAGE_UNITS),_=i.getParameter(i.MAX_TEXTURE_SIZE),d=i.getParameter(i.MAX_CUBE_MAP_TEXTURE_SIZE),p=i.getParameter(i.MAX_VERTEX_ATTRIBS),x=i.getParameter(i.MAX_VERTEX_UNIFORM_VECTORS),y=i.getParameter(i.MAX_VARYING_VECTORS),v=i.getParameter(i.MAX_FRAGMENT_UNIFORM_VECTORS),T=g>0,A=i.getParameter(i.MAX_SAMPLES);return{isWebGL2:!0,getMaxAnisotropy:r,getMaxPrecision:l,textureFormatReadable:a,textureTypeReadable:o,precision:u,logarithmicDepthBuffer:f,reverseDepthBuffer:c,maxTextures:m,maxVertexTextures:g,maxTextureSize:_,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:x,maxVaryings:y,maxFragmentUniforms:v,vertexTextures:T,maxSamples:A}}function i8(i){const t=this;let e=null,n=0,s=!1,r=!1;const a=new ye,o=new P0,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(f,c){const m=f.length!==0||c||n!==0||s;return s=c,n=f.length,m},this.beginShadows=function(){r=!0,h(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(f,c){e=h(f,c,0)},this.setState=function(f,c,m){const g=f.clippingPlanes,_=f.clipIntersection,d=f.clipShadows,p=i.get(f);if(!s||g===null||g.length===0||r&&!d)r?h(null):u();else{const x=r?0:n,y=x*4;let v=p.clippingState||null;l.value=v,v=h(g,c,y,m);for(let T=0;T!==y;++T)v[T]=e[T];p.clippingState=v,this.numIntersection=_?this.numPlanes:0,this.numPlanes+=x}};function u(){l.value!==e&&(l.value=e,l.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function h(f,c,m,g){const _=f!==null?f.length:0;let d=null;if(_!==0){if(d=l.value,g!==!0||d===null){const p=m+_*4,x=c.matrixWorldInverse;o.getNormalMatrix(x),(d===null||d.length<p)&&(d=new Float32Array(p));for(let y=0,v=m;y!==_;++y,v+=4)a.copy(f[y]).applyMatrix4(x,o),a.normal.toArray(d,v),d[v+3]=a.constant}l.value=d,l.needsUpdate=!0}return t.numPlanes=_,t.numIntersection=0,d}}function s8(i){let t=new WeakMap;function e(a,o){return o===Hi?a.mapping=li:o===pr&&(a.mapping=ci),a}function n(a){if(a&&a.isTexture){const o=a.mapping;if(o===Hi||o===pr)if(t.has(a)){const l=t.get(a).texture;return e(l,a.mapping)}else{const l=a.image;if(l&&l.height>0){const u=new i4(l.height);return u.fromEquirectangularTexture(i,a),t.set(a,u),a.addEventListener("dispose",s),e(u.texture,a.mapping)}else return null}}return a}function s(a){const o=a.target;o.removeEventListener("dispose",s);const l=t.get(o);l!==void 0&&(t.delete(o),l.dispose())}function r(){t=new WeakMap}return{get:n,dispose:r}}const ei=4,o2=[.125,.215,.35,.446,.526,.582],xn=20,Fs=new Go,l2=new F0;let Us=null,Ns=0,Os=0,Bs=!1;const _n=(1+Math.sqrt(5))/2,zn=1/_n,c2=[new D(-_n,zn,0),new D(_n,zn,0),new D(-zn,0,_n),new D(zn,0,_n),new D(0,_n,-zn),new D(0,_n,zn),new D(-1,1,-1),new D(1,1,-1),new D(-1,1,1),new D(1,1,1)];class u2{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,s=100){Us=this._renderer.getRenderTarget(),Ns=this._renderer.getActiveCubeFace(),Os=this._renderer.getActiveMipmapLevel(),Bs=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,s,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=d2(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=f2(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Us,Ns,Os),this._renderer.xr.enabled=Bs,t.scissorTest=!1,m1(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===li||t.mapping===ci?this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Us=this._renderer.getRenderTarget(),Ns=this._renderer.getActiveCubeFace(),Os=this._renderer.getActiveMipmapLevel(),Bs=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:ft,minFilter:ft,generateMipmaps:!1,type:Ft,format:Z0,colorSpace:mi,depthBuffer:!1},s=h2(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=h2(t,e,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=r8(r)),this._blurMaterial=a8(r,t,e)}return s}_compileMaterial(t){const e=new At(this._lodPlanes[0],t);this._renderer.compile(e,Fs)}_sceneToCubeUV(t,e,n,s){const o=new Lt(90,1,e,n),l=[1,-1,1,1,1,1],u=[1,1,1,-1,-1,-1],h=this._renderer,f=h.autoClear,c=h.toneMapping;h.getClearColor(l2),h.toneMapping=Ue,h.autoClear=!1;const m=new ca({name:"PMREM.Background",side:Rt,depthWrite:!1,depthTest:!1}),g=new At(new yi,m);let _=!1;const d=t.background;d?d.isColor&&(m.color.copy(d),t.background=null,_=!0):(m.color.copy(l2),_=!0);for(let p=0;p<6;p++){const x=p%3;x===0?(o.up.set(0,l[p],0),o.lookAt(u[p],0,0)):x===1?(o.up.set(0,0,l[p]),o.lookAt(0,u[p],0)):(o.up.set(0,l[p],0),o.lookAt(0,0,u[p]));const y=this._cubeSize;m1(s,x*y,p>2?y:0,y,y),h.setRenderTarget(s),_&&h.render(g,o),h.render(t,o)}g.geometry.dispose(),g.material.dispose(),h.toneMapping=c,h.autoClear=f,t.background=d}_textureToCubeUV(t,e){const n=this._renderer,s=t.mapping===li||t.mapping===ci;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=d2()),this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=f2());const r=s?this._cubemapMaterial:this._equirectMaterial,a=new At(this._lodPlanes[0],r),o=r.uniforms;o.envMap.value=t;const l=this._cubeSize;m1(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(a,Fs)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const s=this._lodPlanes.length;for(let r=1;r<s;r++){const a=Math.sqrt(this._sigmas[r]*this._sigmas[r]-this._sigmas[r-1]*this._sigmas[r-1]),o=c2[(s-r-1)%c2.length];this._blur(t,r-1,r,a,o)}e.autoClear=n}_blur(t,e,n,s,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,s,"latitudinal",r),this._halfBlur(a,t,n,n,s,"longitudinal",r)}_halfBlur(t,e,n,s,r,a,o){const l=this._renderer,u=this._blurMaterial;a!=="latitudinal"&&a!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,f=new At(this._lodPlanes[s],u),c=u.uniforms,m=this._sizeLods[n]-1,g=isFinite(r)?Math.PI/(2*m):2*Math.PI/(2*xn-1),_=r/g,d=isFinite(r)?1+Math.floor(h*_):xn;d>xn&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${d} samples when the maximum is set to ${xn}`);const p=[];let x=0;for(let w=0;w<xn;++w){const P=w/_,b=Math.exp(-P*P/2);p.push(b),w===0?x+=b:w<d&&(x+=2*b)}for(let w=0;w<p.length;w++)p[w]=p[w]/x;c.envMap.value=t.texture,c.samples.value=d,c.weights.value=p,c.latitudinal.value=a==="latitudinal",o&&(c.poleAxis.value=o);const{_lodMax:y}=this;c.dTheta.value=g,c.mipInt.value=y-n;const v=this._sizeLods[s],T=3*v*(s>y-ei?s-y+ei:0),A=4*(this._cubeSize-v);m1(e,T,A,3*v,2*v),l.setRenderTarget(e),l.render(f,Fs)}}function r8(i){const t=[],e=[],n=[];let s=i;const r=i-ei+1+o2.length;for(let a=0;a<r;a++){const o=Math.pow(2,s);e.push(o);let l=1/o;a>i-ei?l=o2[a-i+ei-1]:a===0&&(l=0),n.push(l);const u=1/(o-2),h=-u,f=1+u,c=[h,h,f,h,f,f,h,h,f,f,h,f],m=6,g=6,_=3,d=2,p=1,x=new Float32Array(_*g*m),y=new Float32Array(d*g*m),v=new Float32Array(p*g*m);for(let A=0;A<m;A++){const w=A%3*2/3-1,P=A>2?0:-1,b=[w,P,0,w+2/3,P,0,w+2/3,P+1,0,w,P,0,w+2/3,P+1,0,w,P+1,0];x.set(b,_*g*A),y.set(c,d*g*A);const M=[A,A,A,A,A,A];v.set(M,p*g*A)}const T=new St;T.setAttribute("position",new ut(x,_)),T.setAttribute("uv",new ut(y,d)),T.setAttribute("faceIndex",new ut(v,p)),t.push(T),s>ei&&s--}return{lodPlanes:t,sizeLods:e,sigmas:n}}function h2(i,t,e){const n=new Zt(i,t,e);return n.texture.mapping=Z1,n.texture.name="PMREM.cubeUv",n.scissorTest=!0,n}function m1(i,t,e,n,s){i.viewport.set(t,e,n,s),i.scissor.set(t,e,n,s)}function a8(i,t,e){const n=new Float32Array(xn),s=new D(0,1,0);return new ce({name:"SphericalGaussianBlur",defines:{n:xn,CUBEUV_TEXEL_WIDTH:1/t,CUBEUV_TEXEL_HEIGHT:1/e,CUBEUV_MAX_MIP:`${i}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:n},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:da(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:Kt,depthTest:!1,depthWrite:!1})}function f2(){return new ce({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:da(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:Kt,depthTest:!1,depthWrite:!1})}function d2(){return new ce({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:da(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:Kt,depthTest:!1,depthWrite:!1})}function da(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function o8(i){let t=new WeakMap,e=null;function n(o){if(o&&o.isTexture){const l=o.mapping,u=l===Hi||l===pr,h=l===li||l===ci;if(u||h){let f=t.get(o);const c=f!==void 0?f.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==c)return e===null&&(e=new u2(i)),f=u?e.fromEquirectangular(o,f):e.fromCubemap(o,f),f.texture.pmremVersion=o.pmremVersion,t.set(o,f),f.texture;if(f!==void 0)return f.texture;{const m=o.image;return u&&m&&m.height>0||h&&m&&s(m)?(e===null&&(e=new u2(i)),f=u?e.fromEquirectangular(o):e.fromCubemap(o),f.texture.pmremVersion=o.pmremVersion,t.set(o,f),o.addEventListener("dispose",r),f.texture):null}}}return o}function s(o){let l=0;const u=6;for(let h=0;h<u;h++)o[h]!==void 0&&l++;return l===u}function r(o){const l=o.target;l.removeEventListener("dispose",r);const u=t.get(l);u!==void 0&&(t.delete(l),u.dispose())}function a(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:n,dispose:a}}function l8(i){const t={};function e(n){if(t[n]!==void 0)return t[n];let s;switch(n){case"WEBGL_depth_texture":s=i.getExtension("WEBGL_depth_texture")||i.getExtension("MOZ_WEBGL_depth_texture")||i.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=i.getExtension("EXT_texture_filter_anisotropic")||i.getExtension("MOZ_EXT_texture_filter_anisotropic")||i.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=i.getExtension("WEBGL_compressed_texture_s3tc")||i.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=i.getExtension("WEBGL_compressed_texture_pvrtc")||i.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=i.getExtension(n)}return t[n]=s,s}return{has:function(n){return e(n)!==null},init:function(){e("EXT_color_buffer_float"),e("WEBGL_clip_cull_distance"),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float"),e("WEBGL_multisampled_render_to_texture"),e("WEBGL_render_shared_exponent")},get:function(n){const s=e(n);return s===null&&Zn("THREE.WebGLRenderer: "+n+" extension not supported."),s}}}function c8(i,t,e,n){const s={},r=new WeakMap;function a(f){const c=f.target;c.index!==null&&t.remove(c.index);for(const g in c.attributes)t.remove(c.attributes[g]);c.removeEventListener("dispose",a),delete s[c.id];const m=r.get(c);m&&(t.remove(m),r.delete(c)),n.releaseStatesOfGeometry(c),c.isInstancedBufferGeometry===!0&&delete c._maxInstanceCount,e.memory.geometries--}function o(f,c){return s[c.id]===!0||(c.addEventListener("dispose",a),s[c.id]=!0,e.memory.geometries++),c}function l(f){const c=f.attributes;for(const m in c)t.update(c[m],i.ARRAY_BUFFER)}function u(f){const c=[],m=f.index,g=f.attributes.position;let _=0;if(m!==null){const x=m.array;_=m.version;for(let y=0,v=x.length;y<v;y+=3){const T=x[y+0],A=x[y+1],w=x[y+2];c.push(T,A,A,w,w,T)}}else if(g!==void 0){const x=g.array;_=g.version;for(let y=0,v=x.length/3-1;y<v;y+=3){const T=y+0,A=y+1,w=y+2;c.push(T,A,A,w,w,T)}}else return;const d=new(Do(c)?No:Uo)(c,1);d.version=_;const p=r.get(f);p&&t.remove(p),r.set(f,d)}function h(f){const c=r.get(f);if(c){const m=f.index;m!==null&&c.version<m.version&&u(f)}else u(f);return r.get(f)}return{get:o,update:l,getWireframeAttribute:h}}function u8(i,t,e){let n;function s(c){n=c}let r,a;function o(c){r=c.type,a=c.bytesPerElement}function l(c,m){i.drawElements(n,m,r,c*a),e.update(m,n,1)}function u(c,m,g){g!==0&&(i.drawElementsInstanced(n,m,r,c*a,g),e.update(m,n,g))}function h(c,m,g){if(g===0)return;t.get("WEBGL_multi_draw").multiDrawElementsWEBGL(n,m,0,r,c,0,g);let d=0;for(let p=0;p<g;p++)d+=m[p];e.update(d,n,1)}function f(c,m,g,_){if(g===0)return;const d=t.get("WEBGL_multi_draw");if(d===null)for(let p=0;p<c.length;p++)u(c[p]/a,m[p],_[p]);else{d.multiDrawElementsInstancedWEBGL(n,m,0,r,c,0,_,0,g);let p=0;for(let x=0;x<g;x++)p+=m[x]*_[x];e.update(p,n,1)}}this.setMode=s,this.setIndex=o,this.render=l,this.renderInstances=u,this.renderMultiDraw=h,this.renderMultiDrawInstances=f}function h8(i){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function n(r,a,o){switch(e.calls++,a){case i.TRIANGLES:e.triangles+=o*(r/3);break;case i.LINES:e.lines+=o*(r/2);break;case i.LINE_STRIP:e.lines+=o*(r-1);break;case i.LINE_LOOP:e.lines+=o*r;break;case i.POINTS:e.points+=o*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",a);break}}function s(){e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:s,update:n}}function f8(i,t,e){const n=new WeakMap,s=new K0;function r(a,o,l){const u=a.morphTargetInfluences,h=o.morphAttributes.position||o.morphAttributes.normal||o.morphAttributes.color,f=h!==void 0?h.length:0;let c=n.get(o);if(c===void 0||c.count!==f){let M=function(){P.dispose(),n.delete(o),o.removeEventListener("dispose",M)};var m=M;c!==void 0&&c.texture.dispose();const g=o.morphAttributes.position!==void 0,_=o.morphAttributes.normal!==void 0,d=o.morphAttributes.color!==void 0,p=o.morphAttributes.position||[],x=o.morphAttributes.normal||[],y=o.morphAttributes.color||[];let v=0;g===!0&&(v=1),_===!0&&(v=2),d===!0&&(v=3);let T=o.attributes.position.count*v,A=1;T>t.maxTextureSize&&(A=Math.ceil(T/t.maxTextureSize),T=t.maxTextureSize);const w=new Float32Array(T*A*4*f),P=new ts(w,T,A,f);P.type=nt,P.needsUpdate=!0;const b=v*4;for(let C=0;C<f;C++){const F=p[C],L=x[C],B=y[C],G=T*A*4*C;for(let H=0;H<F.count;H++){const q=H*b;g===!0&&(s.fromBufferAttribute(F,H),w[G+q+0]=s.x,w[G+q+1]=s.y,w[G+q+2]=s.z,w[G+q+3]=0),_===!0&&(s.fromBufferAttribute(L,H),w[G+q+4]=s.x,w[G+q+5]=s.y,w[G+q+6]=s.z,w[G+q+7]=0),d===!0&&(s.fromBufferAttribute(B,H),w[G+q+8]=s.x,w[G+q+9]=s.y,w[G+q+10]=s.z,w[G+q+11]=B.itemSize===4?s.w:1)}}c={count:f,texture:P,size:new f0(T,A)},n.set(o,c),o.addEventListener("dispose",M)}if(a.isInstancedMesh===!0&&a.morphTexture!==null)l.getUniforms().setValue(i,"morphTexture",a.morphTexture,e);else{let g=0;for(let d=0;d<u.length;d++)g+=u[d];const _=o.morphTargetsRelative?1:1-g;l.getUniforms().setValue(i,"morphTargetBaseInfluence",_),l.getUniforms().setValue(i,"morphTargetInfluences",u)}l.getUniforms().setValue(i,"morphTargetsTexture",c.texture,e),l.getUniforms().setValue(i,"morphTargetsTextureSize",c.size)}return{update:r}}function d8(i,t,e,n){let s=new WeakMap;function r(l){const u=n.render.frame,h=l.geometry,f=t.get(l,h);if(s.get(f)!==u&&(t.update(f),s.set(f,u)),l.isInstancedMesh&&(l.hasEventListener("dispose",o)===!1&&l.addEventListener("dispose",o),s.get(l)!==u&&(e.update(l.instanceMatrix,i.ARRAY_BUFFER),l.instanceColor!==null&&e.update(l.instanceColor,i.ARRAY_BUFFER),s.set(l,u))),l.isSkinnedMesh){const c=l.skeleton;s.get(c)!==u&&(c.update(),s.set(c,u))}return f}function a(){s=new WeakMap}function o(l){const u=l.target;u.removeEventListener("dispose",o),e.remove(u.instanceMatrix),u.instanceColor!==null&&e.remove(u.instanceColor)}return{update:r,dispose:a}}const Xo=new Ot,p2=new Ho(1,1),qo=new ts,Yo=new B5,$o=new zo,m2=[],g2=[],_2=new Float32Array(16),v2=new Float32Array(9),x2=new Float32Array(4);function Mi(i,t,e){const n=i[0];if(n<=0||n>0)return i;const s=t*e;let r=m2[s];if(r===void 0&&(r=new Float32Array(s),m2[s]=r),t!==0){n.toArray(r,0);for(let a=1,o=0;a!==t;++a)o+=e,i[a].toArray(r,o)}return r}function _t(i,t){if(i.length!==t.length)return!1;for(let e=0,n=i.length;e<n;e++)if(i[e]!==t[e])return!1;return!0}function vt(i,t){for(let e=0,n=t.length;e<n;e++)i[e]=t[e]}function is(i,t){let e=g2[t];e===void 0&&(e=new Int32Array(t),g2[t]=e);for(let n=0;n!==t;++n)e[n]=i.allocateTextureUnit();return e}function p8(i,t){const e=this.cache;e[0]!==t&&(i.uniform1f(this.addr,t),e[0]=t)}function m8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(_t(e,t))return;i.uniform2fv(this.addr,t),vt(e,t)}}function g8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(i.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(_t(e,t))return;i.uniform3fv(this.addr,t),vt(e,t)}}function _8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(_t(e,t))return;i.uniform4fv(this.addr,t),vt(e,t)}}function v8(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(_t(e,t))return;i.uniformMatrix2fv(this.addr,!1,t),vt(e,t)}else{if(_t(e,n))return;x2.set(n),i.uniformMatrix2fv(this.addr,!1,x2),vt(e,n)}}function x8(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(_t(e,t))return;i.uniformMatrix3fv(this.addr,!1,t),vt(e,t)}else{if(_t(e,n))return;v2.set(n),i.uniformMatrix3fv(this.addr,!1,v2),vt(e,n)}}function y8(i,t){const e=this.cache,n=t.elements;if(n===void 0){if(_t(e,t))return;i.uniformMatrix4fv(this.addr,!1,t),vt(e,t)}else{if(_t(e,n))return;_2.set(n),i.uniformMatrix4fv(this.addr,!1,_2),vt(e,n)}}function M8(i,t){const e=this.cache;e[0]!==t&&(i.uniform1i(this.addr,t),e[0]=t)}function b8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2i(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(_t(e,t))return;i.uniform2iv(this.addr,t),vt(e,t)}}function S8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3i(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(_t(e,t))return;i.uniform3iv(this.addr,t),vt(e,t)}}function T8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4i(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(_t(e,t))return;i.uniform4iv(this.addr,t),vt(e,t)}}function E8(i,t){const e=this.cache;e[0]!==t&&(i.uniform1ui(this.addr,t),e[0]=t)}function w8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(i.uniform2ui(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(_t(e,t))return;i.uniform2uiv(this.addr,t),vt(e,t)}}function A8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(i.uniform3ui(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else{if(_t(e,t))return;i.uniform3uiv(this.addr,t),vt(e,t)}}function R8(i,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(i.uniform4ui(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(_t(e,t))return;i.uniform4uiv(this.addr,t),vt(e,t)}}function C8(i,t,e){const n=this.cache,s=e.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s);let r;this.type===i.SAMPLER_2D_SHADOW?(p2.compareFunction=Po,r=p2):r=Xo,e.setTexture2D(t||r,s)}function P8(i,t,e){const n=this.cache,s=e.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),e.setTexture3D(t||Yo,s)}function D8(i,t,e){const n=this.cache,s=e.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),e.setTextureCube(t||$o,s)}function I8(i,t,e){const n=this.cache,s=e.allocateTextureUnit();n[0]!==s&&(i.uniform1i(this.addr,s),n[0]=s),e.setTexture2DArray(t||qo,s)}function L8(i){switch(i){case 5126:return p8;case 35664:return m8;case 35665:return g8;case 35666:return _8;case 35674:return v8;case 35675:return x8;case 35676:return y8;case 5124:case 35670:return M8;case 35667:case 35671:return b8;case 35668:case 35672:return S8;case 35669:case 35673:return T8;case 5125:return E8;case 36294:return w8;case 36295:return A8;case 36296:return R8;case 35678:case 36198:case 36298:case 36306:case 35682:return C8;case 35679:case 36299:case 36307:return P8;case 35680:case 36300:case 36308:case 36293:return D8;case 36289:case 36303:case 36311:case 36292:return I8}}function F8(i,t){i.uniform1fv(this.addr,t)}function U8(i,t){const e=Mi(t,this.size,2);i.uniform2fv(this.addr,e)}function N8(i,t){const e=Mi(t,this.size,3);i.uniform3fv(this.addr,e)}function O8(i,t){const e=Mi(t,this.size,4);i.uniform4fv(this.addr,e)}function B8(i,t){const e=Mi(t,this.size,4);i.uniformMatrix2fv(this.addr,!1,e)}function z8(i,t){const e=Mi(t,this.size,9);i.uniformMatrix3fv(this.addr,!1,e)}function k8(i,t){const e=Mi(t,this.size,16);i.uniformMatrix4fv(this.addr,!1,e)}function H8(i,t){i.uniform1iv(this.addr,t)}function V8(i,t){i.uniform2iv(this.addr,t)}function G8(i,t){i.uniform3iv(this.addr,t)}function W8(i,t){i.uniform4iv(this.addr,t)}function X8(i,t){i.uniform1uiv(this.addr,t)}function q8(i,t){i.uniform2uiv(this.addr,t)}function Y8(i,t){i.uniform3uiv(this.addr,t)}function $8(i,t){i.uniform4uiv(this.addr,t)}function j8(i,t,e){const n=this.cache,s=t.length,r=is(e,s);_t(n,r)||(i.uniform1iv(this.addr,r),vt(n,r));for(let a=0;a!==s;++a)e.setTexture2D(t[a]||Xo,r[a])}function K8(i,t,e){const n=this.cache,s=t.length,r=is(e,s);_t(n,r)||(i.uniform1iv(this.addr,r),vt(n,r));for(let a=0;a!==s;++a)e.setTexture3D(t[a]||Yo,r[a])}function Z8(i,t,e){const n=this.cache,s=t.length,r=is(e,s);_t(n,r)||(i.uniform1iv(this.addr,r),vt(n,r));for(let a=0;a!==s;++a)e.setTextureCube(t[a]||$o,r[a])}function J8(i,t,e){const n=this.cache,s=t.length,r=is(e,s);_t(n,r)||(i.uniform1iv(this.addr,r),vt(n,r));for(let a=0;a!==s;++a)e.setTexture2DArray(t[a]||qo,r[a])}function Q8(i){switch(i){case 5126:return F8;case 35664:return U8;case 35665:return N8;case 35666:return O8;case 35674:return B8;case 35675:return z8;case 35676:return k8;case 5124:case 35670:return H8;case 35667:case 35671:return V8;case 35668:case 35672:return G8;case 35669:case 35673:return W8;case 5125:return X8;case 36294:return q8;case 36295:return Y8;case 36296:return $8;case 35678:case 36198:case 36298:case 36306:case 35682:return j8;case 35679:case 36299:case 36307:return K8;case 35680:case 36300:case 36308:case 36293:return Z8;case 36289:case 36303:case 36311:case 36292:return J8}}class t9{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=L8(e.type)}}class e9{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=Q8(e.type)}}class n9{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const s=this.seq;for(let r=0,a=s.length;r!==a;++r){const o=s[r];o.setValue(t,e[o.id],n)}}}const zs=/(\w+)(\])?(\[|\.)?/g;function y2(i,t){i.seq.push(t),i.map[t.id]=t}function i9(i,t,e){const n=i.name,s=n.length;for(zs.lastIndex=0;;){const r=zs.exec(n),a=zs.lastIndex;let o=r[1];const l=r[2]==="]",u=r[3];if(l&&(o=o|0),u===void 0||u==="["&&a+2===s){y2(e,u===void 0?new t9(o,i,t):new e9(o,i,t));break}else{let f=e.map[o];f===void 0&&(f=new n9(o),y2(e,f)),e=f}}}class G1{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let s=0;s<n;++s){const r=t.getActiveUniform(e,s),a=t.getUniformLocation(e,r.name);i9(r,a,this)}}setValue(t,e,n,s){const r=this.map[e];r!==void 0&&r.setValue(t,n,s)}setOptional(t,e,n){const s=e[n];s!==void 0&&this.setValue(t,n,s)}static upload(t,e,n,s){for(let r=0,a=e.length;r!==a;++r){const o=e[r],l=n[o.id];l.needsUpdate!==!1&&o.setValue(t,l.value,s)}}static seqWithValue(t,e){const n=[];for(let s=0,r=t.length;s!==r;++s){const a=t[s];a.id in e&&n.push(a)}return n}}function M2(i,t,e){const n=i.createShader(t);return i.shaderSource(n,e),i.compileShader(n),n}const s9=37297;let r9=0;function a9(i,t){const e=i.split(`
`),n=[],s=Math.max(t-6,0),r=Math.min(t+6,e.length);for(let a=s;a<r;a++){const o=a+1;n.push(`${o===t?">":" "} ${o}: ${e[a]}`)}return n.join(`
`)}const b2=new P0;function o9(i){q0._getMatrix(b2,q0.workingColorSpace,i);const t=`mat3( ${b2.elements.map(e=>e.toFixed(4))} )`;switch(q0.getTransfer(i)){case q1:return[t,"LinearTransferOETF"];case J0:return[t,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",i),[t,"LinearTransferOETF"]}}function S2(i,t,e){const n=i.getShaderParameter(t,i.COMPILE_STATUS),s=i.getShaderInfoLog(t).trim();if(n&&s==="")return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const a=parseInt(r[1]);return e.toUpperCase()+`

`+s+`

`+a9(i.getShaderSource(t),a)}else return s}function l9(i,t){const e=o9(t);return[`vec4 ${i}( vec4 value ) {`,`	return ${e[1]}( vec4( value.rgb * ${e[0]}, value.a ) );`,"}"].join(`
`)}function c9(i,t){let e;switch(t){case Y3:e="Linear";break;case $3:e="Reinhard";break;case j3:e="Cineon";break;case Mo:e="ACESFilmic";break;case Z3:e="AgX";break;case J3:e="Neutral";break;case K3:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+i+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}const g1=new D;function u9(){q0.getLuminanceCoefficients(g1);const i=g1.x.toFixed(4),t=g1.y.toFixed(4),e=g1.z.toFixed(4);return["float luminance( const in vec3 rgb ) {",`	const vec3 weights = vec3( ${i}, ${t}, ${e} );`,"	return dot( weights, rgb );","}"].join(`
`)}function h9(i){return[i.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",i.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Ui).join(`
`)}function f9(i){const t=[];for(const e in i){const n=i[e];n!==!1&&t.push("#define "+e+" "+n)}return t.join(`
`)}function d9(i,t){const e={},n=i.getProgramParameter(t,i.ACTIVE_ATTRIBUTES);for(let s=0;s<n;s++){const r=i.getActiveAttrib(t,s),a=r.name;let o=1;r.type===i.FLOAT_MAT2&&(o=2),r.type===i.FLOAT_MAT3&&(o=3),r.type===i.FLOAT_MAT4&&(o=4),e[a]={type:r.type,location:i.getAttribLocation(t,a),locationSize:o}}return e}function Ui(i){return i!==""}function T2(i,t){const e=t.numSpotLightShadows+t.numSpotLightMaps-t.numSpotLightShadowsWithMaps;return i.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,t.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,e).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,t.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function E2(i,t){return i.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const p9=/^[ \t]*#include +<([\w\d./]+)>/gm;function Wr(i){return i.replace(p9,g9)}const m9=new Map;function g9(i,t){let e=L0[t];if(e===void 0){const n=m9.get(t);if(n!==void 0)e=L0[n],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',t,n);else throw new Error("Can not resolve #include <"+t+">")}return Wr(e)}const _9=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function w2(i){return i.replace(_9,v9)}function v9(i,t,e,n){let s="";for(let r=parseInt(t);r<parseInt(e);r++)s+=n.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function A2(i){let t=`precision ${i.precision} float;
	precision ${i.precision} int;
	precision ${i.precision} sampler2D;
	precision ${i.precision} samplerCube;
	precision ${i.precision} sampler3D;
	precision ${i.precision} sampler2DArray;
	precision ${i.precision} sampler2DShadow;
	precision ${i.precision} samplerCubeShadow;
	precision ${i.precision} sampler2DArrayShadow;
	precision ${i.precision} isampler2D;
	precision ${i.precision} isampler3D;
	precision ${i.precision} isamplerCube;
	precision ${i.precision} isampler2DArray;
	precision ${i.precision} usampler2D;
	precision ${i.precision} usampler3D;
	precision ${i.precision} usamplerCube;
	precision ${i.precision} usampler2DArray;
	`;return i.precision==="highp"?t+=`
#define HIGH_PRECISION`:i.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:i.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function x9(i){let t="SHADOWMAP_TYPE_BASIC";return i.shadowMapType===xo?t="SHADOWMAP_TYPE_PCF":i.shadowMapType===w3?t="SHADOWMAP_TYPE_PCF_SOFT":i.shadowMapType===Pe&&(t="SHADOWMAP_TYPE_VSM"),t}function y9(i){let t="ENVMAP_TYPE_CUBE";if(i.envMap)switch(i.envMapMode){case li:case ci:t="ENVMAP_TYPE_CUBE";break;case Z1:t="ENVMAP_TYPE_CUBE_UV";break}return t}function M9(i){let t="ENVMAP_MODE_REFLECTION";if(i.envMap)switch(i.envMapMode){case ci:t="ENVMAP_MODE_REFRACTION";break}return t}function b9(i){let t="ENVMAP_BLENDING_NONE";if(i.envMap)switch(i.combine){case yo:t="ENVMAP_BLENDING_MULTIPLY";break;case X3:t="ENVMAP_BLENDING_MIX";break;case q3:t="ENVMAP_BLENDING_ADD";break}return t}function S9(i){const t=i.envMapCubeUVHeight;if(t===null)return null;const e=Math.log2(t)-2,n=1/t;return{texelWidth:1/(3*Math.max(Math.pow(2,e),7*16)),texelHeight:n,maxMip:e}}function T9(i,t,e,n){const s=i.getContext(),r=e.defines;let a=e.vertexShader,o=e.fragmentShader;const l=x9(e),u=y9(e),h=M9(e),f=b9(e),c=S9(e),m=h9(e),g=f9(r),_=s.createProgram();let d,p,x=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(d=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(Ui).join(`
`),d.length>0&&(d+=`
`),p=["#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g].filter(Ui).join(`
`),p.length>0&&(p+=`
`)):(d=[A2(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",e.batching?"#define USE_BATCHING":"",e.batchingColor?"#define USE_BATCHING_COLOR":"",e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.instancingMorph?"#define USE_INSTANCING_MORPH":"",e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.displacementMap?"#define USE_DISPLACEMENTMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.mapUv?"#define MAP_UV "+e.mapUv:"",e.alphaMapUv?"#define ALPHAMAP_UV "+e.alphaMapUv:"",e.lightMapUv?"#define LIGHTMAP_UV "+e.lightMapUv:"",e.aoMapUv?"#define AOMAP_UV "+e.aoMapUv:"",e.emissiveMapUv?"#define EMISSIVEMAP_UV "+e.emissiveMapUv:"",e.bumpMapUv?"#define BUMPMAP_UV "+e.bumpMapUv:"",e.normalMapUv?"#define NORMALMAP_UV "+e.normalMapUv:"",e.displacementMapUv?"#define DISPLACEMENTMAP_UV "+e.displacementMapUv:"",e.metalnessMapUv?"#define METALNESSMAP_UV "+e.metalnessMapUv:"",e.roughnessMapUv?"#define ROUGHNESSMAP_UV "+e.roughnessMapUv:"",e.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+e.anisotropyMapUv:"",e.clearcoatMapUv?"#define CLEARCOATMAP_UV "+e.clearcoatMapUv:"",e.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+e.clearcoatNormalMapUv:"",e.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+e.clearcoatRoughnessMapUv:"",e.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+e.iridescenceMapUv:"",e.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+e.iridescenceThicknessMapUv:"",e.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+e.sheenColorMapUv:"",e.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+e.sheenRoughnessMapUv:"",e.specularMapUv?"#define SPECULARMAP_UV "+e.specularMapUv:"",e.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+e.specularColorMapUv:"",e.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+e.specularIntensityMapUv:"",e.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+e.transmissionMapUv:"",e.thicknessMapUv?"#define THICKNESSMAP_UV "+e.thicknessMapUv:"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphColors?"#define USE_MORPHCOLORS":"",e.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+e.morphTextureStride:"",e.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","	uniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(Ui).join(`
`),p=[A2(e),"#define SHADER_TYPE "+e.shaderType,"#define SHADER_NAME "+e.shaderName,g,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+u:"",e.envMap?"#define "+h:"",e.envMap?"#define "+f:"",c?"#define CUBEUV_TEXEL_WIDTH "+c.texelWidth:"",c?"#define CUBEUV_TEXEL_HEIGHT "+c.texelHeight:"",c?"#define CUBEUV_MAX_MIP "+c.maxMip+".0":"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",e.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.anisotropy?"#define USE_ANISOTROPY":"",e.anisotropyMap?"#define USE_ANISOTROPYMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.dispersion?"#define USE_DISPERSION":"",e.iridescence?"#define USE_IRIDESCENCE":"",e.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",e.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",e.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.alphaHash?"#define USE_ALPHAHASH":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents&&e.flatShading===!1?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor||e.batchingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUv1s?"#define USE_UV1":"",e.vertexUv2s?"#define USE_UV2":"",e.vertexUv3s?"#define USE_UV3":"",e.pointsUvs?"#define USE_POINTS_UV":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.numLightProbes>0?"#define USE_LIGHT_PROBES":"",e.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",e.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==Ue?"#define TONE_MAPPING":"",e.toneMapping!==Ue?L0.tonemapping_pars_fragment:"",e.toneMapping!==Ue?c9("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.opaque?"#define OPAQUE":"",L0.colorspace_pars_fragment,l9("linearToOutputTexel",e.outputColorSpace),u9(),e.useDepthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(Ui).join(`
`)),a=Wr(a),a=T2(a,e),a=E2(a,e),o=Wr(o),o=T2(o,e),o=E2(o,e),a=w2(a),o=w2(o),e.isRawShaderMaterial!==!0&&(x=`#version 300 es
`,d=[m,"#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+d,p=["#define varying in",e.glslVersion===Oa?"":"layout(location = 0) out highp vec4 pc_fragColor;",e.glslVersion===Oa?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+p);const y=x+d+a,v=x+p+o,T=M2(s,s.VERTEX_SHADER,y),A=M2(s,s.FRAGMENT_SHADER,v);s.attachShader(_,T),s.attachShader(_,A),e.index0AttributeName!==void 0?s.bindAttribLocation(_,0,e.index0AttributeName):e.morphTargets===!0&&s.bindAttribLocation(_,0,"position"),s.linkProgram(_);function w(C){if(i.debug.checkShaderErrors){const F=s.getProgramInfoLog(_).trim(),L=s.getShaderInfoLog(T).trim(),B=s.getShaderInfoLog(A).trim();let G=!0,H=!0;if(s.getProgramParameter(_,s.LINK_STATUS)===!1)if(G=!1,typeof i.debug.onShaderError=="function")i.debug.onShaderError(s,_,T,A);else{const q=S2(s,T,"vertex"),W=S2(s,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(_,s.VALIDATE_STATUS)+`

Material Name: `+C.name+`
Material Type: `+C.type+`

Program Info Log: `+F+`
`+q+`
`+W)}else F!==""?console.warn("THREE.WebGLProgram: Program Info Log:",F):(L===""||B==="")&&(H=!1);H&&(C.diagnostics={runnable:G,programLog:F,vertexShader:{log:L,prefix:d},fragmentShader:{log:B,prefix:p}})}s.deleteShader(T),s.deleteShader(A),P=new G1(s,_),b=d9(s,_)}let P;this.getUniforms=function(){return P===void 0&&w(this),P};let b;this.getAttributes=function(){return b===void 0&&w(this),b};let M=e.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return M===!1&&(M=s.getProgramParameter(_,s9)),M},this.destroy=function(){n.releaseStatesOfProgram(this),s.deleteProgram(_),this.program=void 0},this.type=e.shaderType,this.name=e.shaderName,this.id=r9++,this.cacheKey=t,this.usedTimes=1,this.program=_,this.vertexShader=T,this.fragmentShader=A,this}let E9=0;class w9{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,s=this._getShaderStage(e),r=this._getShaderStage(n),a=this._getShaderCacheForMaterial(t);return a.has(s)===!1&&(a.add(s),s.usedTimes++),a.has(r)===!1&&(a.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const n of e)n.usedTimes--,n.usedTimes===0&&this.shaderCache.delete(n.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return n===void 0&&(n=new Set,e.set(t,n)),n}_getShaderStage(t){const e=this.shaderCache;let n=e.get(t);return n===void 0&&(n=new A9(t),e.set(t,n)),n}}class A9{constructor(t){this.id=E9++,this.code=t,this.usedTimes=0}}function R9(i,t,e,n,s,r,a){const o=new Lo,l=new w9,u=new Set,h=[],f=s.logarithmicDepthBuffer,c=s.vertexTextures;let m=s.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(b){return u.add(b),b===0?"uv":`uv${b}`}function d(b,M,C,F,L){const B=F.fog,G=L.geometry,H=b.isMeshStandardMaterial?F.environment:null,q=(b.isMeshStandardMaterial?e:t).get(b.envMap||H),W=q&&q.mapping===Z1?q.image.height:null,t0=g[b.type];b.precision!==null&&(m=s.getMaxPrecision(b.precision),m!==b.precision&&console.warn("THREE.WebGLProgram.getParameters:",b.precision,"not supported, using",m,"instead."));const c0=G.morphAttributes.position||G.morphAttributes.normal||G.morphAttributes.color,_0=c0!==void 0?c0.length:0;let N0=0;G.morphAttributes.position!==void 0&&(N0=1),G.morphAttributes.normal!==void 0&&(N0=2),G.morphAttributes.color!==void 0&&(N0=3);let tt,$,e0,g0;if(t0){const j0=Me[t0];tt=j0.vertexShader,$=j0.fragmentShader}else tt=b.vertexShader,$=b.fragmentShader,l.update(b),e0=l.getVertexShaderID(b),g0=l.getFragmentShaderID(b);const r0=i.getRenderTarget(),T0=i.state.buffers.depth.getReversed(),A0=L.isInstancedMesh===!0,O0=L.isBatchedMesh===!0,at=!!b.map,V0=!!b.matcap,ht=!!q,I=!!b.aoMap,Jt=!!b.lightMap,z0=!!b.bumpMap,k0=!!b.normalMap,y0=!!b.displacementMap,it=!!b.emissiveMap,x0=!!b.metalnessMap,R=!!b.roughnessMap,S=b.anisotropy>0,z=b.clearcoat>0,j=b.dispersion>0,Z=b.iridescence>0,Y=b.sheen>0,v0=b.transmission>0,a0=S&&!!b.anisotropyMap,h0=z&&!!b.clearcoatMap,G0=z&&!!b.clearcoatNormalMap,Q=z&&!!b.clearcoatRoughnessMap,d0=Z&&!!b.iridescenceMap,S0=Z&&!!b.iridescenceThicknessMap,E0=Y&&!!b.sheenColorMap,p0=Y&&!!b.sheenRoughnessMap,H0=!!b.specularMap,I0=!!b.specularColorMap,et=!!b.specularIntensityMap,U=v0&&!!b.transmissionMap,i0=v0&&!!b.thicknessMap,X=!!b.gradientMap,K=!!b.alphaMap,l0=b.alphaTest>0,o0=!!b.alphaHash,D0=!!b.extensions;let ot=Ue;b.toneMapped&&(r0===null||r0.isXRRenderTarget===!0)&&(ot=i.toneMapping);const Tt={shaderID:t0,shaderType:b.type,shaderName:b.name,vertexShader:tt,fragmentShader:$,defines:b.defines,customVertexShaderID:e0,customFragmentShaderID:g0,isRawShaderMaterial:b.isRawShaderMaterial===!0,glslVersion:b.glslVersion,precision:m,batching:O0,batchingColor:O0&&L._colorsTexture!==null,instancing:A0,instancingColor:A0&&L.instanceColor!==null,instancingMorph:A0&&L.morphTexture!==null,supportsVertexTextures:c,outputColorSpace:r0===null?i.outputColorSpace:r0.isXRRenderTarget===!0?r0.texture.colorSpace:mi,alphaToCoverage:!!b.alphaToCoverage,map:at,matcap:V0,envMap:ht,envMapMode:ht&&q.mapping,envMapCubeUVHeight:W,aoMap:I,lightMap:Jt,bumpMap:z0,normalMap:k0,displacementMap:c&&y0,emissiveMap:it,normalMapObjectSpace:k0&&b.normalMapType===i5,normalMapTangentSpace:k0&&b.normalMapType===Co,metalnessMap:x0,roughnessMap:R,anisotropy:S,anisotropyMap:a0,clearcoat:z,clearcoatMap:h0,clearcoatNormalMap:G0,clearcoatRoughnessMap:Q,dispersion:j,iridescence:Z,iridescenceMap:d0,iridescenceThicknessMap:S0,sheen:Y,sheenColorMap:E0,sheenRoughnessMap:p0,specularMap:H0,specularColorMap:I0,specularIntensityMap:et,transmission:v0,transmissionMap:U,thicknessMap:i0,gradientMap:X,opaque:b.transparent===!1&&b.blending===Ke&&b.alphaToCoverage===!1,alphaMap:K,alphaTest:l0,alphaHash:o0,combine:b.combine,mapUv:at&&_(b.map.channel),aoMapUv:I&&_(b.aoMap.channel),lightMapUv:Jt&&_(b.lightMap.channel),bumpMapUv:z0&&_(b.bumpMap.channel),normalMapUv:k0&&_(b.normalMap.channel),displacementMapUv:y0&&_(b.displacementMap.channel),emissiveMapUv:it&&_(b.emissiveMap.channel),metalnessMapUv:x0&&_(b.metalnessMap.channel),roughnessMapUv:R&&_(b.roughnessMap.channel),anisotropyMapUv:a0&&_(b.anisotropyMap.channel),clearcoatMapUv:h0&&_(b.clearcoatMap.channel),clearcoatNormalMapUv:G0&&_(b.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Q&&_(b.clearcoatRoughnessMap.channel),iridescenceMapUv:d0&&_(b.iridescenceMap.channel),iridescenceThicknessMapUv:S0&&_(b.iridescenceThicknessMap.channel),sheenColorMapUv:E0&&_(b.sheenColorMap.channel),sheenRoughnessMapUv:p0&&_(b.sheenRoughnessMap.channel),specularMapUv:H0&&_(b.specularMap.channel),specularColorMapUv:I0&&_(b.specularColorMap.channel),specularIntensityMapUv:et&&_(b.specularIntensityMap.channel),transmissionMapUv:U&&_(b.transmissionMap.channel),thicknessMapUv:i0&&_(b.thicknessMap.channel),alphaMapUv:K&&_(b.alphaMap.channel),vertexTangents:!!G.attributes.tangent&&(k0||S),vertexColors:b.vertexColors,vertexAlphas:b.vertexColors===!0&&!!G.attributes.color&&G.attributes.color.itemSize===4,pointsUvs:L.isPoints===!0&&!!G.attributes.uv&&(at||K),fog:!!B,useFog:b.fog===!0,fogExp2:!!B&&B.isFogExp2,flatShading:b.flatShading===!0,sizeAttenuation:b.sizeAttenuation===!0,logarithmicDepthBuffer:f,reverseDepthBuffer:T0,skinning:L.isSkinnedMesh===!0,morphTargets:G.morphAttributes.position!==void 0,morphNormals:G.morphAttributes.normal!==void 0,morphColors:G.morphAttributes.color!==void 0,morphTargetsCount:_0,morphTextureStride:N0,numDirLights:M.directional.length,numPointLights:M.point.length,numSpotLights:M.spot.length,numSpotLightMaps:M.spotLightMap.length,numRectAreaLights:M.rectArea.length,numHemiLights:M.hemi.length,numDirLightShadows:M.directionalShadowMap.length,numPointLightShadows:M.pointShadowMap.length,numSpotLightShadows:M.spotShadowMap.length,numSpotLightShadowsWithMaps:M.numSpotLightShadowsWithMaps,numLightProbes:M.numLightProbes,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:b.dithering,shadowMapEnabled:i.shadowMap.enabled&&C.length>0,shadowMapType:i.shadowMap.type,toneMapping:ot,decodeVideoTexture:at&&b.map.isVideoTexture===!0&&q0.getTransfer(b.map.colorSpace)===J0,decodeVideoTextureEmissive:it&&b.emissiveMap.isVideoTexture===!0&&q0.getTransfer(b.emissiveMap.colorSpace)===J0,premultipliedAlpha:b.premultipliedAlpha,doubleSided:b.side===ie,flipSided:b.side===Rt,useDepthPacking:b.depthPacking>=0,depthPacking:b.depthPacking||0,index0AttributeName:b.index0AttributeName,extensionClipCullDistance:D0&&b.extensions.clipCullDistance===!0&&n.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(D0&&b.extensions.multiDraw===!0||O0)&&n.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:n.has("KHR_parallel_shader_compile"),customProgramCacheKey:b.customProgramCacheKey()};return Tt.vertexUv1s=u.has(1),Tt.vertexUv2s=u.has(2),Tt.vertexUv3s=u.has(3),u.clear(),Tt}function p(b){const M=[];if(b.shaderID?M.push(b.shaderID):(M.push(b.customVertexShaderID),M.push(b.customFragmentShaderID)),b.defines!==void 0)for(const C in b.defines)M.push(C),M.push(b.defines[C]);return b.isRawShaderMaterial===!1&&(x(M,b),y(M,b),M.push(i.outputColorSpace)),M.push(b.customProgramCacheKey),M.join()}function x(b,M){b.push(M.precision),b.push(M.outputColorSpace),b.push(M.envMapMode),b.push(M.envMapCubeUVHeight),b.push(M.mapUv),b.push(M.alphaMapUv),b.push(M.lightMapUv),b.push(M.aoMapUv),b.push(M.bumpMapUv),b.push(M.normalMapUv),b.push(M.displacementMapUv),b.push(M.emissiveMapUv),b.push(M.metalnessMapUv),b.push(M.roughnessMapUv),b.push(M.anisotropyMapUv),b.push(M.clearcoatMapUv),b.push(M.clearcoatNormalMapUv),b.push(M.clearcoatRoughnessMapUv),b.push(M.iridescenceMapUv),b.push(M.iridescenceThicknessMapUv),b.push(M.sheenColorMapUv),b.push(M.sheenRoughnessMapUv),b.push(M.specularMapUv),b.push(M.specularColorMapUv),b.push(M.specularIntensityMapUv),b.push(M.transmissionMapUv),b.push(M.thicknessMapUv),b.push(M.combine),b.push(M.fogExp2),b.push(M.sizeAttenuation),b.push(M.morphTargetsCount),b.push(M.morphAttributeCount),b.push(M.numDirLights),b.push(M.numPointLights),b.push(M.numSpotLights),b.push(M.numSpotLightMaps),b.push(M.numHemiLights),b.push(M.numRectAreaLights),b.push(M.numDirLightShadows),b.push(M.numPointLightShadows),b.push(M.numSpotLightShadows),b.push(M.numSpotLightShadowsWithMaps),b.push(M.numLightProbes),b.push(M.shadowMapType),b.push(M.toneMapping),b.push(M.numClippingPlanes),b.push(M.numClipIntersection),b.push(M.depthPacking)}function y(b,M){o.disableAll(),M.supportsVertexTextures&&o.enable(0),M.instancing&&o.enable(1),M.instancingColor&&o.enable(2),M.instancingMorph&&o.enable(3),M.matcap&&o.enable(4),M.envMap&&o.enable(5),M.normalMapObjectSpace&&o.enable(6),M.normalMapTangentSpace&&o.enable(7),M.clearcoat&&o.enable(8),M.iridescence&&o.enable(9),M.alphaTest&&o.enable(10),M.vertexColors&&o.enable(11),M.vertexAlphas&&o.enable(12),M.vertexUv1s&&o.enable(13),M.vertexUv2s&&o.enable(14),M.vertexUv3s&&o.enable(15),M.vertexTangents&&o.enable(16),M.anisotropy&&o.enable(17),M.alphaHash&&o.enable(18),M.batching&&o.enable(19),M.dispersion&&o.enable(20),M.batchingColor&&o.enable(21),b.push(o.mask),o.disableAll(),M.fog&&o.enable(0),M.useFog&&o.enable(1),M.flatShading&&o.enable(2),M.logarithmicDepthBuffer&&o.enable(3),M.reverseDepthBuffer&&o.enable(4),M.skinning&&o.enable(5),M.morphTargets&&o.enable(6),M.morphNormals&&o.enable(7),M.morphColors&&o.enable(8),M.premultipliedAlpha&&o.enable(9),M.shadowMapEnabled&&o.enable(10),M.doubleSided&&o.enable(11),M.flipSided&&o.enable(12),M.useDepthPacking&&o.enable(13),M.dithering&&o.enable(14),M.transmission&&o.enable(15),M.sheen&&o.enable(16),M.opaque&&o.enable(17),M.pointsUvs&&o.enable(18),M.decodeVideoTexture&&o.enable(19),M.decodeVideoTextureEmissive&&o.enable(20),M.alphaToCoverage&&o.enable(21),b.push(o.mask)}function v(b){const M=g[b.type];let C;if(M){const F=Me[M];C=Q5.clone(F.uniforms)}else C=b.uniforms;return C}function T(b,M){let C;for(let F=0,L=h.length;F<L;F++){const B=h[F];if(B.cacheKey===M){C=B,++C.usedTimes;break}}return C===void 0&&(C=new T9(i,M,b,r),h.push(C)),C}function A(b){if(--b.usedTimes===0){const M=h.indexOf(b);h[M]=h[h.length-1],h.pop(),b.destroy()}}function w(b){l.remove(b)}function P(){l.dispose()}return{getParameters:d,getProgramCacheKey:p,getUniforms:v,acquireProgram:T,releaseProgram:A,releaseShaderCache:w,programs:h,dispose:P}}function C9(){let i=new WeakMap;function t(a){return i.has(a)}function e(a){let o=i.get(a);return o===void 0&&(o={},i.set(a,o)),o}function n(a){i.delete(a)}function s(a,o,l){i.get(a)[o]=l}function r(){i=new WeakMap}return{has:t,get:e,remove:n,update:s,dispose:r}}function P9(i,t){return i.groupOrder!==t.groupOrder?i.groupOrder-t.groupOrder:i.renderOrder!==t.renderOrder?i.renderOrder-t.renderOrder:i.material.id!==t.material.id?i.material.id-t.material.id:i.z!==t.z?i.z-t.z:i.id-t.id}function R2(i,t){return i.groupOrder!==t.groupOrder?i.groupOrder-t.groupOrder:i.renderOrder!==t.renderOrder?i.renderOrder-t.renderOrder:i.z!==t.z?t.z-i.z:i.id-t.id}function C2(){const i=[];let t=0;const e=[],n=[],s=[];function r(){t=0,e.length=0,n.length=0,s.length=0}function a(f,c,m,g,_,d){let p=i[t];return p===void 0?(p={id:f.id,object:f,geometry:c,material:m,groupOrder:g,renderOrder:f.renderOrder,z:_,group:d},i[t]=p):(p.id=f.id,p.object=f,p.geometry=c,p.material=m,p.groupOrder=g,p.renderOrder=f.renderOrder,p.z=_,p.group=d),t++,p}function o(f,c,m,g,_,d){const p=a(f,c,m,g,_,d);m.transmission>0?n.push(p):m.transparent===!0?s.push(p):e.push(p)}function l(f,c,m,g,_,d){const p=a(f,c,m,g,_,d);m.transmission>0?n.unshift(p):m.transparent===!0?s.unshift(p):e.unshift(p)}function u(f,c){e.length>1&&e.sort(f||P9),n.length>1&&n.sort(c||R2),s.length>1&&s.sort(c||R2)}function h(){for(let f=t,c=i.length;f<c;f++){const m=i[f];if(m.id===null)break;m.id=null,m.object=null,m.geometry=null,m.material=null,m.group=null}}return{opaque:e,transmissive:n,transparent:s,init:r,push:o,unshift:l,finish:h,sort:u}}function D9(){let i=new WeakMap;function t(n,s){const r=i.get(n);let a;return r===void 0?(a=new C2,i.set(n,[a])):s>=r.length?(a=new C2,r.push(a)):a=r[s],a}function e(){i=new WeakMap}return{get:t,dispose:e}}function I9(){const i={};return{get:function(t){if(i[t.id]!==void 0)return i[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new D,color:new F0};break;case"SpotLight":e={position:new D,direction:new D,color:new F0,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new D,color:new F0,distance:0,decay:0};break;case"HemisphereLight":e={direction:new D,skyColor:new F0,groundColor:new F0};break;case"RectAreaLight":e={color:new F0,position:new D,halfWidth:new D,halfHeight:new D};break}return i[t.id]=e,e}}}function L9(){const i={};return{get:function(t){if(i[t.id]!==void 0)return i[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new f0};break;case"SpotLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new f0};break;case"PointLight":e={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new f0,shadowCameraNear:1,shadowCameraFar:1e3};break}return i[t.id]=e,e}}}let F9=0;function U9(i,t){return(t.castShadow?2:0)-(i.castShadow?2:0)+(t.map?1:0)-(i.map?1:0)}function N9(i){const t=new I9,e=L9(),n={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let u=0;u<9;u++)n.probe.push(new D);const s=new D,r=new U0,a=new U0;function o(u){let h=0,f=0,c=0;for(let b=0;b<9;b++)n.probe[b].set(0,0,0);let m=0,g=0,_=0,d=0,p=0,x=0,y=0,v=0,T=0,A=0,w=0;u.sort(U9);for(let b=0,M=u.length;b<M;b++){const C=u[b],F=C.color,L=C.intensity,B=C.distance,G=C.shadow&&C.shadow.map?C.shadow.map.texture:null;if(C.isAmbientLight)h+=F.r*L,f+=F.g*L,c+=F.b*L;else if(C.isLightProbe){for(let H=0;H<9;H++)n.probe[H].addScaledVector(C.sh.coefficients[H],L);w++}else if(C.isDirectionalLight){const H=t.get(C);if(H.color.copy(C.color).multiplyScalar(C.intensity),C.castShadow){const q=C.shadow,W=e.get(C);W.shadowIntensity=q.intensity,W.shadowBias=q.bias,W.shadowNormalBias=q.normalBias,W.shadowRadius=q.radius,W.shadowMapSize=q.mapSize,n.directionalShadow[m]=W,n.directionalShadowMap[m]=G,n.directionalShadowMatrix[m]=C.shadow.matrix,x++}n.directional[m]=H,m++}else if(C.isSpotLight){const H=t.get(C);H.position.setFromMatrixPosition(C.matrixWorld),H.color.copy(F).multiplyScalar(L),H.distance=B,H.coneCos=Math.cos(C.angle),H.penumbraCos=Math.cos(C.angle*(1-C.penumbra)),H.decay=C.decay,n.spot[_]=H;const q=C.shadow;if(C.map&&(n.spotLightMap[T]=C.map,T++,q.updateMatrices(C),C.castShadow&&A++),n.spotLightMatrix[_]=q.matrix,C.castShadow){const W=e.get(C);W.shadowIntensity=q.intensity,W.shadowBias=q.bias,W.shadowNormalBias=q.normalBias,W.shadowRadius=q.radius,W.shadowMapSize=q.mapSize,n.spotShadow[_]=W,n.spotShadowMap[_]=G,v++}_++}else if(C.isRectAreaLight){const H=t.get(C);H.color.copy(F).multiplyScalar(L),H.halfWidth.set(C.width*.5,0,0),H.halfHeight.set(0,C.height*.5,0),n.rectArea[d]=H,d++}else if(C.isPointLight){const H=t.get(C);if(H.color.copy(C.color).multiplyScalar(C.intensity),H.distance=C.distance,H.decay=C.decay,C.castShadow){const q=C.shadow,W=e.get(C);W.shadowIntensity=q.intensity,W.shadowBias=q.bias,W.shadowNormalBias=q.normalBias,W.shadowRadius=q.radius,W.shadowMapSize=q.mapSize,W.shadowCameraNear=q.camera.near,W.shadowCameraFar=q.camera.far,n.pointShadow[g]=W,n.pointShadowMap[g]=G,n.pointShadowMatrix[g]=C.shadow.matrix,y++}n.point[g]=H,g++}else if(C.isHemisphereLight){const H=t.get(C);H.skyColor.copy(C.color).multiplyScalar(L),H.groundColor.copy(C.groundColor).multiplyScalar(L),n.hemi[p]=H,p++}}d>0&&(i.has("OES_texture_float_linear")===!0?(n.rectAreaLTC1=n0.LTC_FLOAT_1,n.rectAreaLTC2=n0.LTC_FLOAT_2):(n.rectAreaLTC1=n0.LTC_HALF_1,n.rectAreaLTC2=n0.LTC_HALF_2)),n.ambient[0]=h,n.ambient[1]=f,n.ambient[2]=c;const P=n.hash;(P.directionalLength!==m||P.pointLength!==g||P.spotLength!==_||P.rectAreaLength!==d||P.hemiLength!==p||P.numDirectionalShadows!==x||P.numPointShadows!==y||P.numSpotShadows!==v||P.numSpotMaps!==T||P.numLightProbes!==w)&&(n.directional.length=m,n.spot.length=_,n.rectArea.length=d,n.point.length=g,n.hemi.length=p,n.directionalShadow.length=x,n.directionalShadowMap.length=x,n.pointShadow.length=y,n.pointShadowMap.length=y,n.spotShadow.length=v,n.spotShadowMap.length=v,n.directionalShadowMatrix.length=x,n.pointShadowMatrix.length=y,n.spotLightMatrix.length=v+T-A,n.spotLightMap.length=T,n.numSpotLightShadowsWithMaps=A,n.numLightProbes=w,P.directionalLength=m,P.pointLength=g,P.spotLength=_,P.rectAreaLength=d,P.hemiLength=p,P.numDirectionalShadows=x,P.numPointShadows=y,P.numSpotShadows=v,P.numSpotMaps=T,P.numLightProbes=w,n.version=F9++)}function l(u,h){let f=0,c=0,m=0,g=0,_=0;const d=h.matrixWorldInverse;for(let p=0,x=u.length;p<x;p++){const y=u[p];if(y.isDirectionalLight){const v=n.directional[f];v.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),v.direction.sub(s),v.direction.transformDirection(d),f++}else if(y.isSpotLight){const v=n.spot[m];v.position.setFromMatrixPosition(y.matrixWorld),v.position.applyMatrix4(d),v.direction.setFromMatrixPosition(y.matrixWorld),s.setFromMatrixPosition(y.target.matrixWorld),v.direction.sub(s),v.direction.transformDirection(d),m++}else if(y.isRectAreaLight){const v=n.rectArea[g];v.position.setFromMatrixPosition(y.matrixWorld),v.position.applyMatrix4(d),a.identity(),r.copy(y.matrixWorld),r.premultiply(d),a.extractRotation(r),v.halfWidth.set(y.width*.5,0,0),v.halfHeight.set(0,y.height*.5,0),v.halfWidth.applyMatrix4(a),v.halfHeight.applyMatrix4(a),g++}else if(y.isPointLight){const v=n.point[c];v.position.setFromMatrixPosition(y.matrixWorld),v.position.applyMatrix4(d),c++}else if(y.isHemisphereLight){const v=n.hemi[_];v.direction.setFromMatrixPosition(y.matrixWorld),v.direction.transformDirection(d),_++}}}return{setup:o,setupView:l,state:n}}function P2(i){const t=new N9(i),e=[],n=[];function s(h){u.camera=h,e.length=0,n.length=0}function r(h){e.push(h)}function a(h){n.push(h)}function o(){t.setup(e)}function l(h){t.setupView(e,h)}const u={lightsArray:e,shadowsArray:n,camera:null,lights:t,transmissionRenderTarget:{}};return{init:s,state:u,setupLights:o,setupLightsView:l,pushLight:r,pushShadow:a}}function O9(i){let t=new WeakMap;function e(s,r=0){const a=t.get(s);let o;return a===void 0?(o=new P2(i),t.set(s,[o])):r>=a.length?(o=new P2(i),a.push(o)):o=a[r],o}function n(){t=new WeakMap}return{get:e,dispose:n}}const B9=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,z9=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function k9(i,t,e){let n=new ua;const s=new f0,r=new f0,a=new K0,o=new l4({depthPacking:n5}),l=new c4,u={},h=e.maxTextureSize,f={[ve]:Rt,[Rt]:ve,[ie]:ie},c=new ce({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new f0},radius:{value:4}},vertexShader:B9,fragmentShader:z9}),m=c.clone();m.defines.HORIZONTAL_PASS=1;const g=new St;g.setAttribute("position",new ut(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const _=new At(g,c),d=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=xo;let p=this.type;this.render=function(A,w,P){if(d.enabled===!1||d.autoUpdate===!1&&d.needsUpdate===!1||A.length===0)return;const b=i.getRenderTarget(),M=i.getActiveCubeFace(),C=i.getActiveMipmapLevel(),F=i.state;F.setBlending(Kt),F.buffers.color.setClear(1,1,1,1),F.buffers.depth.setTest(!0),F.setScissorTest(!1);const L=p!==Pe&&this.type===Pe,B=p===Pe&&this.type!==Pe;for(let G=0,H=A.length;G<H;G++){const q=A[G],W=q.shadow;if(W===void 0){console.warn("THREE.WebGLShadowMap:",q,"has no shadow.");continue}if(W.autoUpdate===!1&&W.needsUpdate===!1)continue;s.copy(W.mapSize);const t0=W.getFrameExtents();if(s.multiply(t0),r.copy(W.mapSize),(s.x>h||s.y>h)&&(s.x>h&&(r.x=Math.floor(h/t0.x),s.x=r.x*t0.x,W.mapSize.x=r.x),s.y>h&&(r.y=Math.floor(h/t0.y),s.y=r.y*t0.y,W.mapSize.y=r.y)),W.map===null||L===!0||B===!0){const _0=this.type!==Pe?{minFilter:B0,magFilter:B0}:{};W.map!==null&&W.map.dispose(),W.map=new Zt(s.x,s.y,_0),W.map.texture.name=q.name+".shadowMap",W.camera.updateProjectionMatrix()}i.setRenderTarget(W.map),i.clear();const c0=W.getViewportCount();for(let _0=0;_0<c0;_0++){const N0=W.getViewport(_0);a.set(r.x*N0.x,r.y*N0.y,r.x*N0.z,r.y*N0.w),F.viewport(a),W.updateMatrices(q,_0),n=W.getFrustum(),v(w,P,W.camera,q,this.type)}W.isPointLightShadow!==!0&&this.type===Pe&&x(W,P),W.needsUpdate=!1}p=this.type,d.needsUpdate=!1,i.setRenderTarget(b,M,C)};function x(A,w){const P=t.update(_);c.defines.VSM_SAMPLES!==A.blurSamples&&(c.defines.VSM_SAMPLES=A.blurSamples,m.defines.VSM_SAMPLES=A.blurSamples,c.needsUpdate=!0,m.needsUpdate=!0),A.mapPass===null&&(A.mapPass=new Zt(s.x,s.y)),c.uniforms.shadow_pass.value=A.map.texture,c.uniforms.resolution.value=A.mapSize,c.uniforms.radius.value=A.radius,i.setRenderTarget(A.mapPass),i.clear(),i.renderBufferDirect(w,null,P,c,_,null),m.uniforms.shadow_pass.value=A.mapPass.texture,m.uniforms.resolution.value=A.mapSize,m.uniforms.radius.value=A.radius,i.setRenderTarget(A.map),i.clear(),i.renderBufferDirect(w,null,P,m,_,null)}function y(A,w,P,b){let M=null;const C=P.isPointLight===!0?A.customDistanceMaterial:A.customDepthMaterial;if(C!==void 0)M=C;else if(M=P.isPointLight===!0?l:o,i.localClippingEnabled&&w.clipShadows===!0&&Array.isArray(w.clippingPlanes)&&w.clippingPlanes.length!==0||w.displacementMap&&w.displacementScale!==0||w.alphaMap&&w.alphaTest>0||w.map&&w.alphaTest>0){const F=M.uuid,L=w.uuid;let B=u[F];B===void 0&&(B={},u[F]=B);let G=B[L];G===void 0&&(G=M.clone(),B[L]=G,w.addEventListener("dispose",T)),M=G}if(M.visible=w.visible,M.wireframe=w.wireframe,b===Pe?M.side=w.shadowSide!==null?w.shadowSide:w.side:M.side=w.shadowSide!==null?w.shadowSide:f[w.side],M.alphaMap=w.alphaMap,M.alphaTest=w.alphaTest,M.map=w.map,M.clipShadows=w.clipShadows,M.clippingPlanes=w.clippingPlanes,M.clipIntersection=w.clipIntersection,M.displacementMap=w.displacementMap,M.displacementScale=w.displacementScale,M.displacementBias=w.displacementBias,M.wireframeLinewidth=w.wireframeLinewidth,M.linewidth=w.linewidth,P.isPointLight===!0&&M.isMeshDistanceMaterial===!0){const F=i.properties.get(M);F.light=P}return M}function v(A,w,P,b,M){if(A.visible===!1)return;if(A.layers.test(w.layers)&&(A.isMesh||A.isLine||A.isPoints)&&(A.castShadow||A.receiveShadow&&M===Pe)&&(!A.frustumCulled||n.intersectsObject(A))){A.modelViewMatrix.multiplyMatrices(P.matrixWorldInverse,A.matrixWorld);const L=t.update(A),B=A.material;if(Array.isArray(B)){const G=L.groups;for(let H=0,q=G.length;H<q;H++){const W=G[H],t0=B[W.materialIndex];if(t0&&t0.visible){const c0=y(A,t0,b,M);A.onBeforeShadow(i,A,w,P,L,c0,W),i.renderBufferDirect(P,null,L,c0,A,W),A.onAfterShadow(i,A,w,P,L,c0,W)}}}else if(B.visible){const G=y(A,B,b,M);A.onBeforeShadow(i,A,w,P,L,G,null),i.renderBufferDirect(P,null,L,G,A,null),A.onAfterShadow(i,A,w,P,L,G,null)}}const F=A.children;for(let L=0,B=F.length;L<B;L++)v(F[L],w,P,b,M)}function T(A){A.target.removeEventListener("dispose",T);for(const P in u){const b=u[P],M=A.target.uuid;M in b&&(b[M].dispose(),delete b[M])}}}const H9={[or]:lr,[cr]:fr,[ur]:dr,[oi]:hr,[lr]:or,[fr]:cr,[dr]:ur,[hr]:oi};function V9(i,t){function e(){let U=!1;const i0=new K0;let X=null;const K=new K0(0,0,0,0);return{setMask:function(l0){X!==l0&&!U&&(i.colorMask(l0,l0,l0,l0),X=l0)},setLocked:function(l0){U=l0},setClear:function(l0,o0,D0,ot,Tt){Tt===!0&&(l0*=ot,o0*=ot,D0*=ot),i0.set(l0,o0,D0,ot),K.equals(i0)===!1&&(i.clearColor(l0,o0,D0,ot),K.copy(i0))},reset:function(){U=!1,X=null,K.set(-1,0,0,0)}}}function n(){let U=!1,i0=!1,X=null,K=null,l0=null;return{setReversed:function(o0){if(i0!==o0){const D0=t.get("EXT_clip_control");i0?D0.clipControlEXT(D0.LOWER_LEFT_EXT,D0.ZERO_TO_ONE_EXT):D0.clipControlEXT(D0.LOWER_LEFT_EXT,D0.NEGATIVE_ONE_TO_ONE_EXT);const ot=l0;l0=null,this.setClear(ot)}i0=o0},getReversed:function(){return i0},setTest:function(o0){o0?r0(i.DEPTH_TEST):T0(i.DEPTH_TEST)},setMask:function(o0){X!==o0&&!U&&(i.depthMask(o0),X=o0)},setFunc:function(o0){if(i0&&(o0=H9[o0]),K!==o0){switch(o0){case or:i.depthFunc(i.NEVER);break;case lr:i.depthFunc(i.ALWAYS);break;case cr:i.depthFunc(i.LESS);break;case oi:i.depthFunc(i.LEQUAL);break;case ur:i.depthFunc(i.EQUAL);break;case hr:i.depthFunc(i.GEQUAL);break;case fr:i.depthFunc(i.GREATER);break;case dr:i.depthFunc(i.NOTEQUAL);break;default:i.depthFunc(i.LEQUAL)}K=o0}},setLocked:function(o0){U=o0},setClear:function(o0){l0!==o0&&(i0&&(o0=1-o0),i.clearDepth(o0),l0=o0)},reset:function(){U=!1,X=null,K=null,l0=null,i0=!1}}}function s(){let U=!1,i0=null,X=null,K=null,l0=null,o0=null,D0=null,ot=null,Tt=null;return{setTest:function(j0){U||(j0?r0(i.STENCIL_TEST):T0(i.STENCIL_TEST))},setMask:function(j0){i0!==j0&&!U&&(i.stencilMask(j0),i0=j0)},setFunc:function(j0,ue,Te){(X!==j0||K!==ue||l0!==Te)&&(i.stencilFunc(j0,ue,Te),X=j0,K=ue,l0=Te)},setOp:function(j0,ue,Te){(o0!==j0||D0!==ue||ot!==Te)&&(i.stencilOp(j0,ue,Te),o0=j0,D0=ue,ot=Te)},setLocked:function(j0){U=j0},setClear:function(j0){Tt!==j0&&(i.clearStencil(j0),Tt=j0)},reset:function(){U=!1,i0=null,X=null,K=null,l0=null,o0=null,D0=null,ot=null,Tt=null}}}const r=new e,a=new n,o=new s,l=new WeakMap,u=new WeakMap;let h={},f={},c=new WeakMap,m=[],g=null,_=!1,d=null,p=null,x=null,y=null,v=null,T=null,A=null,w=new F0(0,0,0),P=0,b=!1,M=null,C=null,F=null,L=null,B=null;const G=i.getParameter(i.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let H=!1,q=0;const W=i.getParameter(i.VERSION);W.indexOf("WebGL")!==-1?(q=parseFloat(/^WebGL (\d)/.exec(W)[1]),H=q>=1):W.indexOf("OpenGL ES")!==-1&&(q=parseFloat(/^OpenGL ES (\d)/.exec(W)[1]),H=q>=2);let t0=null,c0={};const _0=i.getParameter(i.SCISSOR_BOX),N0=i.getParameter(i.VIEWPORT),tt=new K0().fromArray(_0),$=new K0().fromArray(N0);function e0(U,i0,X,K){const l0=new Uint8Array(4),o0=i.createTexture();i.bindTexture(U,o0),i.texParameteri(U,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(U,i.TEXTURE_MAG_FILTER,i.NEAREST);for(let D0=0;D0<X;D0++)U===i.TEXTURE_3D||U===i.TEXTURE_2D_ARRAY?i.texImage3D(i0,0,i.RGBA,1,1,K,0,i.RGBA,i.UNSIGNED_BYTE,l0):i.texImage2D(i0+D0,0,i.RGBA,1,1,0,i.RGBA,i.UNSIGNED_BYTE,l0);return o0}const g0={};g0[i.TEXTURE_2D]=e0(i.TEXTURE_2D,i.TEXTURE_2D,1),g0[i.TEXTURE_CUBE_MAP]=e0(i.TEXTURE_CUBE_MAP,i.TEXTURE_CUBE_MAP_POSITIVE_X,6),g0[i.TEXTURE_2D_ARRAY]=e0(i.TEXTURE_2D_ARRAY,i.TEXTURE_2D_ARRAY,1,1),g0[i.TEXTURE_3D]=e0(i.TEXTURE_3D,i.TEXTURE_3D,1,1),r.setClear(0,0,0,1),a.setClear(1),o.setClear(0),r0(i.DEPTH_TEST),a.setFunc(oi),z0(!1),k0(Ia),r0(i.CULL_FACE),I(Kt);function r0(U){h[U]!==!0&&(i.enable(U),h[U]=!0)}function T0(U){h[U]!==!1&&(i.disable(U),h[U]=!1)}function A0(U,i0){return f[U]!==i0?(i.bindFramebuffer(U,i0),f[U]=i0,U===i.DRAW_FRAMEBUFFER&&(f[i.FRAMEBUFFER]=i0),U===i.FRAMEBUFFER&&(f[i.DRAW_FRAMEBUFFER]=i0),!0):!1}function O0(U,i0){let X=m,K=!1;if(U){X=c.get(i0),X===void 0&&(X=[],c.set(i0,X));const l0=U.textures;if(X.length!==l0.length||X[0]!==i.COLOR_ATTACHMENT0){for(let o0=0,D0=l0.length;o0<D0;o0++)X[o0]=i.COLOR_ATTACHMENT0+o0;X.length=l0.length,K=!0}}else X[0]!==i.BACK&&(X[0]=i.BACK,K=!0);K&&i.drawBuffers(X)}function at(U){return g!==U?(i.useProgram(U),g=U,!0):!1}const V0={[vn]:i.FUNC_ADD,[R3]:i.FUNC_SUBTRACT,[C3]:i.FUNC_REVERSE_SUBTRACT};V0[P3]=i.MIN,V0[D3]=i.MAX;const ht={[I3]:i.ZERO,[L3]:i.ONE,[F3]:i.SRC_COLOR,[rr]:i.SRC_ALPHA,[k3]:i.SRC_ALPHA_SATURATE,[B3]:i.DST_COLOR,[N3]:i.DST_ALPHA,[U3]:i.ONE_MINUS_SRC_COLOR,[ar]:i.ONE_MINUS_SRC_ALPHA,[z3]:i.ONE_MINUS_DST_COLOR,[O3]:i.ONE_MINUS_DST_ALPHA,[H3]:i.CONSTANT_COLOR,[V3]:i.ONE_MINUS_CONSTANT_COLOR,[G3]:i.CONSTANT_ALPHA,[W3]:i.ONE_MINUS_CONSTANT_ALPHA};function I(U,i0,X,K,l0,o0,D0,ot,Tt,j0){if(U===Kt){_===!0&&(T0(i.BLEND),_=!1);return}if(_===!1&&(r0(i.BLEND),_=!0),U!==A3){if(U!==d||j0!==b){if((p!==vn||v!==vn)&&(i.blendEquation(i.FUNC_ADD),p=vn,v=vn),j0)switch(U){case Ke:i.blendFuncSeparate(i.ONE,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case sr:i.blendFunc(i.ONE,i.ONE);break;case La:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Fa:i.blendFuncSeparate(i.ZERO,i.SRC_COLOR,i.ZERO,i.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}else switch(U){case Ke:i.blendFuncSeparate(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA,i.ONE,i.ONE_MINUS_SRC_ALPHA);break;case sr:i.blendFunc(i.SRC_ALPHA,i.ONE);break;case La:i.blendFuncSeparate(i.ZERO,i.ONE_MINUS_SRC_COLOR,i.ZERO,i.ONE);break;case Fa:i.blendFunc(i.ZERO,i.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}x=null,y=null,T=null,A=null,w.set(0,0,0),P=0,d=U,b=j0}return}l0=l0||i0,o0=o0||X,D0=D0||K,(i0!==p||l0!==v)&&(i.blendEquationSeparate(V0[i0],V0[l0]),p=i0,v=l0),(X!==x||K!==y||o0!==T||D0!==A)&&(i.blendFuncSeparate(ht[X],ht[K],ht[o0],ht[D0]),x=X,y=K,T=o0,A=D0),(ot.equals(w)===!1||Tt!==P)&&(i.blendColor(ot.r,ot.g,ot.b,Tt),w.copy(ot),P=Tt),d=U,b=!1}function Jt(U,i0){U.side===ie?T0(i.CULL_FACE):r0(i.CULL_FACE);let X=U.side===Rt;i0&&(X=!X),z0(X),U.blending===Ke&&U.transparent===!1?I(Kt):I(U.blending,U.blendEquation,U.blendSrc,U.blendDst,U.blendEquationAlpha,U.blendSrcAlpha,U.blendDstAlpha,U.blendColor,U.blendAlpha,U.premultipliedAlpha),a.setFunc(U.depthFunc),a.setTest(U.depthTest),a.setMask(U.depthWrite),r.setMask(U.colorWrite);const K=U.stencilWrite;o.setTest(K),K&&(o.setMask(U.stencilWriteMask),o.setFunc(U.stencilFunc,U.stencilRef,U.stencilFuncMask),o.setOp(U.stencilFail,U.stencilZFail,U.stencilZPass)),it(U.polygonOffset,U.polygonOffsetFactor,U.polygonOffsetUnits),U.alphaToCoverage===!0?r0(i.SAMPLE_ALPHA_TO_COVERAGE):T0(i.SAMPLE_ALPHA_TO_COVERAGE)}function z0(U){M!==U&&(U?i.frontFace(i.CW):i.frontFace(i.CCW),M=U)}function k0(U){U!==T3?(r0(i.CULL_FACE),U!==C&&(U===Ia?i.cullFace(i.BACK):U===E3?i.cullFace(i.FRONT):i.cullFace(i.FRONT_AND_BACK))):T0(i.CULL_FACE),C=U}function y0(U){U!==F&&(H&&i.lineWidth(U),F=U)}function it(U,i0,X){U?(r0(i.POLYGON_OFFSET_FILL),(L!==i0||B!==X)&&(i.polygonOffset(i0,X),L=i0,B=X)):T0(i.POLYGON_OFFSET_FILL)}function x0(U){U?r0(i.SCISSOR_TEST):T0(i.SCISSOR_TEST)}function R(U){U===void 0&&(U=i.TEXTURE0+G-1),t0!==U&&(i.activeTexture(U),t0=U)}function S(U,i0,X){X===void 0&&(t0===null?X=i.TEXTURE0+G-1:X=t0);let K=c0[X];K===void 0&&(K={type:void 0,texture:void 0},c0[X]=K),(K.type!==U||K.texture!==i0)&&(t0!==X&&(i.activeTexture(X),t0=X),i.bindTexture(U,i0||g0[U]),K.type=U,K.texture=i0)}function z(){const U=c0[t0];U!==void 0&&U.type!==void 0&&(i.bindTexture(U.type,null),U.type=void 0,U.texture=void 0)}function j(){try{i.compressedTexImage2D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Z(){try{i.compressedTexImage3D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Y(){try{i.texSubImage2D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function v0(){try{i.texSubImage3D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function a0(){try{i.compressedTexSubImage2D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function h0(){try{i.compressedTexSubImage3D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function G0(){try{i.texStorage2D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function Q(){try{i.texStorage3D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function d0(){try{i.texImage2D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function S0(){try{i.texImage3D.apply(i,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function E0(U){tt.equals(U)===!1&&(i.scissor(U.x,U.y,U.z,U.w),tt.copy(U))}function p0(U){$.equals(U)===!1&&(i.viewport(U.x,U.y,U.z,U.w),$.copy(U))}function H0(U,i0){let X=u.get(i0);X===void 0&&(X=new WeakMap,u.set(i0,X));let K=X.get(U);K===void 0&&(K=i.getUniformBlockIndex(i0,U.name),X.set(U,K))}function I0(U,i0){const K=u.get(i0).get(U);l.get(i0)!==K&&(i.uniformBlockBinding(i0,K,U.__bindingPointIndex),l.set(i0,K))}function et(){i.disable(i.BLEND),i.disable(i.CULL_FACE),i.disable(i.DEPTH_TEST),i.disable(i.POLYGON_OFFSET_FILL),i.disable(i.SCISSOR_TEST),i.disable(i.STENCIL_TEST),i.disable(i.SAMPLE_ALPHA_TO_COVERAGE),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ZERO),i.blendFuncSeparate(i.ONE,i.ZERO,i.ONE,i.ZERO),i.blendColor(0,0,0,0),i.colorMask(!0,!0,!0,!0),i.clearColor(0,0,0,0),i.depthMask(!0),i.depthFunc(i.LESS),a.setReversed(!1),i.clearDepth(1),i.stencilMask(4294967295),i.stencilFunc(i.ALWAYS,0,4294967295),i.stencilOp(i.KEEP,i.KEEP,i.KEEP),i.clearStencil(0),i.cullFace(i.BACK),i.frontFace(i.CCW),i.polygonOffset(0,0),i.activeTexture(i.TEXTURE0),i.bindFramebuffer(i.FRAMEBUFFER,null),i.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),i.bindFramebuffer(i.READ_FRAMEBUFFER,null),i.useProgram(null),i.lineWidth(1),i.scissor(0,0,i.canvas.width,i.canvas.height),i.viewport(0,0,i.canvas.width,i.canvas.height),h={},t0=null,c0={},f={},c=new WeakMap,m=[],g=null,_=!1,d=null,p=null,x=null,y=null,v=null,T=null,A=null,w=new F0(0,0,0),P=0,b=!1,M=null,C=null,F=null,L=null,B=null,tt.set(0,0,i.canvas.width,i.canvas.height),$.set(0,0,i.canvas.width,i.canvas.height),r.reset(),a.reset(),o.reset()}return{buffers:{color:r,depth:a,stencil:o},enable:r0,disable:T0,bindFramebuffer:A0,drawBuffers:O0,useProgram:at,setBlending:I,setMaterial:Jt,setFlipSided:z0,setCullFace:k0,setLineWidth:y0,setPolygonOffset:it,setScissorTest:x0,activeTexture:R,bindTexture:S,unbindTexture:z,compressedTexImage2D:j,compressedTexImage3D:Z,texImage2D:d0,texImage3D:S0,updateUBOMapping:H0,uniformBlockBinding:I0,texStorage2D:G0,texStorage3D:Q,texSubImage2D:Y,texSubImage3D:v0,compressedTexSubImage2D:a0,compressedTexSubImage3D:h0,scissor:E0,viewport:p0,reset:et}}function G9(i,t,e,n,s,r,a){const o=t.has("WEBGL_multisampled_render_to_texture")?t.get("WEBGL_multisampled_render_to_texture"):null,l=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),u=new f0,h=new WeakMap;let f;const c=new WeakMap;let m=!1;try{m=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function g(R,S){return m?new OffscreenCanvas(R,S):$1("canvas")}function _(R,S,z){let j=1;const Z=x0(R);if((Z.width>z||Z.height>z)&&(j=z/Math.max(Z.width,Z.height)),j<1)if(typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&R instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&R instanceof ImageBitmap||typeof VideoFrame<"u"&&R instanceof VideoFrame){const Y=Math.floor(j*Z.width),v0=Math.floor(j*Z.height);f===void 0&&(f=g(Y,v0));const a0=S?g(Y,v0):f;return a0.width=Y,a0.height=v0,a0.getContext("2d").drawImage(R,0,0,Y,v0),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+Z.width+"x"+Z.height+") to ("+Y+"x"+v0+")."),a0}else return"data"in R&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+Z.width+"x"+Z.height+")."),R;return R}function d(R){return R.generateMipmaps}function p(R){i.generateMipmap(R)}function x(R){return R.isWebGLCubeRenderTarget?i.TEXTURE_CUBE_MAP:R.isWebGL3DRenderTarget?i.TEXTURE_3D:R.isWebGLArrayRenderTarget||R.isCompressedArrayTexture?i.TEXTURE_2D_ARRAY:i.TEXTURE_2D}function y(R,S,z,j,Z=!1){if(R!==null){if(i[R]!==void 0)return i[R];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+R+"'")}let Y=S;if(S===i.RED&&(z===i.FLOAT&&(Y=i.R32F),z===i.HALF_FLOAT&&(Y=i.R16F),z===i.UNSIGNED_BYTE&&(Y=i.R8)),S===i.RED_INTEGER&&(z===i.UNSIGNED_BYTE&&(Y=i.R8UI),z===i.UNSIGNED_SHORT&&(Y=i.R16UI),z===i.UNSIGNED_INT&&(Y=i.R32UI),z===i.BYTE&&(Y=i.R8I),z===i.SHORT&&(Y=i.R16I),z===i.INT&&(Y=i.R32I)),S===i.RG&&(z===i.FLOAT&&(Y=i.RG32F),z===i.HALF_FLOAT&&(Y=i.RG16F),z===i.UNSIGNED_BYTE&&(Y=i.RG8)),S===i.RG_INTEGER&&(z===i.UNSIGNED_BYTE&&(Y=i.RG8UI),z===i.UNSIGNED_SHORT&&(Y=i.RG16UI),z===i.UNSIGNED_INT&&(Y=i.RG32UI),z===i.BYTE&&(Y=i.RG8I),z===i.SHORT&&(Y=i.RG16I),z===i.INT&&(Y=i.RG32I)),S===i.RGB_INTEGER&&(z===i.UNSIGNED_BYTE&&(Y=i.RGB8UI),z===i.UNSIGNED_SHORT&&(Y=i.RGB16UI),z===i.UNSIGNED_INT&&(Y=i.RGB32UI),z===i.BYTE&&(Y=i.RGB8I),z===i.SHORT&&(Y=i.RGB16I),z===i.INT&&(Y=i.RGB32I)),S===i.RGBA_INTEGER&&(z===i.UNSIGNED_BYTE&&(Y=i.RGBA8UI),z===i.UNSIGNED_SHORT&&(Y=i.RGBA16UI),z===i.UNSIGNED_INT&&(Y=i.RGBA32UI),z===i.BYTE&&(Y=i.RGBA8I),z===i.SHORT&&(Y=i.RGBA16I),z===i.INT&&(Y=i.RGBA32I)),S===i.RGB&&z===i.UNSIGNED_INT_5_9_9_9_REV&&(Y=i.RGB9_E5),S===i.RGBA){const v0=Z?q1:q0.getTransfer(j);z===i.FLOAT&&(Y=i.RGBA32F),z===i.HALF_FLOAT&&(Y=i.RGBA16F),z===i.UNSIGNED_BYTE&&(Y=v0===J0?i.SRGB8_ALPHA8:i.RGBA8),z===i.UNSIGNED_SHORT_4_4_4_4&&(Y=i.RGBA4),z===i.UNSIGNED_SHORT_5_5_5_1&&(Y=i.RGB5_A1)}return(Y===i.R16F||Y===i.R32F||Y===i.RG16F||Y===i.RG32F||Y===i.RGBA16F||Y===i.RGBA32F)&&t.get("EXT_color_buffer_float"),Y}function v(R,S){let z;return R?S===null||S===ae||S===hi?z=i.DEPTH24_STENCIL8:S===nt?z=i.DEPTH32F_STENCIL8:S===ui&&(z=i.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):S===null||S===ae||S===hi?z=i.DEPTH_COMPONENT24:S===nt?z=i.DEPTH_COMPONENT32F:S===ui&&(z=i.DEPTH_COMPONENT16),z}function T(R,S){return d(R)===!0||R.isFramebufferTexture&&R.minFilter!==B0&&R.minFilter!==ft?Math.log2(Math.max(S.width,S.height))+1:R.mipmaps!==void 0&&R.mipmaps.length>0?R.mipmaps.length:R.isCompressedTexture&&Array.isArray(R.image)?S.mipmaps.length:1}function A(R){const S=R.target;S.removeEventListener("dispose",A),P(S),S.isVideoTexture&&h.delete(S)}function w(R){const S=R.target;S.removeEventListener("dispose",w),M(S)}function P(R){const S=n.get(R);if(S.__webglInit===void 0)return;const z=R.source,j=c.get(z);if(j){const Z=j[S.__cacheKey];Z.usedTimes--,Z.usedTimes===0&&b(R),Object.keys(j).length===0&&c.delete(z)}n.remove(R)}function b(R){const S=n.get(R);i.deleteTexture(S.__webglTexture);const z=R.source,j=c.get(z);delete j[S.__cacheKey],a.memory.textures--}function M(R){const S=n.get(R);if(R.depthTexture&&(R.depthTexture.dispose(),n.remove(R.depthTexture)),R.isWebGLCubeRenderTarget)for(let j=0;j<6;j++){if(Array.isArray(S.__webglFramebuffer[j]))for(let Z=0;Z<S.__webglFramebuffer[j].length;Z++)i.deleteFramebuffer(S.__webglFramebuffer[j][Z]);else i.deleteFramebuffer(S.__webglFramebuffer[j]);S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer[j])}else{if(Array.isArray(S.__webglFramebuffer))for(let j=0;j<S.__webglFramebuffer.length;j++)i.deleteFramebuffer(S.__webglFramebuffer[j]);else i.deleteFramebuffer(S.__webglFramebuffer);if(S.__webglDepthbuffer&&i.deleteRenderbuffer(S.__webglDepthbuffer),S.__webglMultisampledFramebuffer&&i.deleteFramebuffer(S.__webglMultisampledFramebuffer),S.__webglColorRenderbuffer)for(let j=0;j<S.__webglColorRenderbuffer.length;j++)S.__webglColorRenderbuffer[j]&&i.deleteRenderbuffer(S.__webglColorRenderbuffer[j]);S.__webglDepthRenderbuffer&&i.deleteRenderbuffer(S.__webglDepthRenderbuffer)}const z=R.textures;for(let j=0,Z=z.length;j<Z;j++){const Y=n.get(z[j]);Y.__webglTexture&&(i.deleteTexture(Y.__webglTexture),a.memory.textures--),n.remove(z[j])}n.remove(R)}let C=0;function F(){C=0}function L(){const R=C;return R>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+R+" texture units while this GPU supports only "+s.maxTextures),C+=1,R}function B(R){const S=[];return S.push(R.wrapS),S.push(R.wrapT),S.push(R.wrapR||0),S.push(R.magFilter),S.push(R.minFilter),S.push(R.anisotropy),S.push(R.internalFormat),S.push(R.format),S.push(R.type),S.push(R.generateMipmaps),S.push(R.premultiplyAlpha),S.push(R.flipY),S.push(R.unpackAlignment),S.push(R.colorSpace),S.join()}function G(R,S){const z=n.get(R);if(R.isVideoTexture&&y0(R),R.isRenderTargetTexture===!1&&R.version>0&&z.__version!==R.version){const j=R.image;if(j===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(j.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{$(z,R,S);return}}e.bindTexture(i.TEXTURE_2D,z.__webglTexture,i.TEXTURE0+S)}function H(R,S){const z=n.get(R);if(R.version>0&&z.__version!==R.version){$(z,R,S);return}e.bindTexture(i.TEXTURE_2D_ARRAY,z.__webglTexture,i.TEXTURE0+S)}function q(R,S){const z=n.get(R);if(R.version>0&&z.__version!==R.version){$(z,R,S);return}e.bindTexture(i.TEXTURE_3D,z.__webglTexture,i.TEXTURE0+S)}function W(R,S){const z=n.get(R);if(R.version>0&&z.__version!==R.version){e0(z,R,S);return}e.bindTexture(i.TEXTURE_CUBE_MAP,z.__webglTexture,i.TEXTURE0+S)}const t0={[_e]:i.REPEAT,[Nt]:i.CLAMP_TO_EDGE,[mr]:i.MIRRORED_REPEAT},c0={[B0]:i.NEAREST,[Q3]:i.NEAREST_MIPMAP_NEAREST,[$i]:i.NEAREST_MIPMAP_LINEAR,[ft]:i.LINEAR,[cs]:i.LINEAR_MIPMAP_NEAREST,[yn]:i.LINEAR_MIPMAP_LINEAR},_0={[s5]:i.NEVER,[u5]:i.ALWAYS,[r5]:i.LESS,[Po]:i.LEQUAL,[a5]:i.EQUAL,[c5]:i.GEQUAL,[o5]:i.GREATER,[l5]:i.NOTEQUAL};function N0(R,S){if(S.type===nt&&t.has("OES_texture_float_linear")===!1&&(S.magFilter===ft||S.magFilter===cs||S.magFilter===$i||S.magFilter===yn||S.minFilter===ft||S.minFilter===cs||S.minFilter===$i||S.minFilter===yn)&&console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),i.texParameteri(R,i.TEXTURE_WRAP_S,t0[S.wrapS]),i.texParameteri(R,i.TEXTURE_WRAP_T,t0[S.wrapT]),(R===i.TEXTURE_3D||R===i.TEXTURE_2D_ARRAY)&&i.texParameteri(R,i.TEXTURE_WRAP_R,t0[S.wrapR]),i.texParameteri(R,i.TEXTURE_MAG_FILTER,c0[S.magFilter]),i.texParameteri(R,i.TEXTURE_MIN_FILTER,c0[S.minFilter]),S.compareFunction&&(i.texParameteri(R,i.TEXTURE_COMPARE_MODE,i.COMPARE_REF_TO_TEXTURE),i.texParameteri(R,i.TEXTURE_COMPARE_FUNC,_0[S.compareFunction])),t.has("EXT_texture_filter_anisotropic")===!0){if(S.magFilter===B0||S.minFilter!==$i&&S.minFilter!==yn||S.type===nt&&t.has("OES_texture_float_linear")===!1)return;if(S.anisotropy>1||n.get(S).__currentAnisotropy){const z=t.get("EXT_texture_filter_anisotropic");i.texParameterf(R,z.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(S.anisotropy,s.getMaxAnisotropy())),n.get(S).__currentAnisotropy=S.anisotropy}}}function tt(R,S){let z=!1;R.__webglInit===void 0&&(R.__webglInit=!0,S.addEventListener("dispose",A));const j=S.source;let Z=c.get(j);Z===void 0&&(Z={},c.set(j,Z));const Y=B(S);if(Y!==R.__cacheKey){Z[Y]===void 0&&(Z[Y]={texture:i.createTexture(),usedTimes:0},a.memory.textures++,z=!0),Z[Y].usedTimes++;const v0=Z[R.__cacheKey];v0!==void 0&&(Z[R.__cacheKey].usedTimes--,v0.usedTimes===0&&b(S)),R.__cacheKey=Y,R.__webglTexture=Z[Y].texture}return z}function $(R,S,z){let j=i.TEXTURE_2D;(S.isDataArrayTexture||S.isCompressedArrayTexture)&&(j=i.TEXTURE_2D_ARRAY),S.isData3DTexture&&(j=i.TEXTURE_3D);const Z=tt(R,S),Y=S.source;e.bindTexture(j,R.__webglTexture,i.TEXTURE0+z);const v0=n.get(Y);if(Y.version!==v0.__version||Z===!0){e.activeTexture(i.TEXTURE0+z);const a0=q0.getPrimaries(q0.workingColorSpace),h0=S.colorSpace===$e?null:q0.getPrimaries(S.colorSpace),G0=S.colorSpace===$e||a0===h0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,G0);let Q=_(S.image,!1,s.maxTextureSize);Q=it(S,Q);const d0=r.convert(S.format,S.colorSpace),S0=r.convert(S.type);let E0=y(S.internalFormat,d0,S0,S.colorSpace,S.isVideoTexture);N0(j,S);let p0;const H0=S.mipmaps,I0=S.isVideoTexture!==!0,et=v0.__version===void 0||Z===!0,U=Y.dataReady,i0=T(S,Q);if(S.isDepthTexture)E0=v(S.format===fi,S.type),et&&(I0?e.texStorage2D(i.TEXTURE_2D,1,E0,Q.width,Q.height):e.texImage2D(i.TEXTURE_2D,0,E0,Q.width,Q.height,0,d0,S0,null));else if(S.isDataTexture)if(H0.length>0){I0&&et&&e.texStorage2D(i.TEXTURE_2D,i0,E0,H0[0].width,H0[0].height);for(let X=0,K=H0.length;X<K;X++)p0=H0[X],I0?U&&e.texSubImage2D(i.TEXTURE_2D,X,0,0,p0.width,p0.height,d0,S0,p0.data):e.texImage2D(i.TEXTURE_2D,X,E0,p0.width,p0.height,0,d0,S0,p0.data);S.generateMipmaps=!1}else I0?(et&&e.texStorage2D(i.TEXTURE_2D,i0,E0,Q.width,Q.height),U&&e.texSubImage2D(i.TEXTURE_2D,0,0,0,Q.width,Q.height,d0,S0,Q.data)):e.texImage2D(i.TEXTURE_2D,0,E0,Q.width,Q.height,0,d0,S0,Q.data);else if(S.isCompressedTexture)if(S.isCompressedArrayTexture){I0&&et&&e.texStorage3D(i.TEXTURE_2D_ARRAY,i0,E0,H0[0].width,H0[0].height,Q.depth);for(let X=0,K=H0.length;X<K;X++)if(p0=H0[X],S.format!==Z0)if(d0!==null)if(I0){if(U)if(S.layerUpdates.size>0){const l0=a2(p0.width,p0.height,S.format,S.type);for(const o0 of S.layerUpdates){const D0=p0.data.subarray(o0*l0/p0.data.BYTES_PER_ELEMENT,(o0+1)*l0/p0.data.BYTES_PER_ELEMENT);e.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,X,0,0,o0,p0.width,p0.height,1,d0,D0)}S.clearLayerUpdates()}else e.compressedTexSubImage3D(i.TEXTURE_2D_ARRAY,X,0,0,0,p0.width,p0.height,Q.depth,d0,p0.data)}else e.compressedTexImage3D(i.TEXTURE_2D_ARRAY,X,E0,p0.width,p0.height,Q.depth,0,p0.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else I0?U&&e.texSubImage3D(i.TEXTURE_2D_ARRAY,X,0,0,0,p0.width,p0.height,Q.depth,d0,S0,p0.data):e.texImage3D(i.TEXTURE_2D_ARRAY,X,E0,p0.width,p0.height,Q.depth,0,d0,S0,p0.data)}else{I0&&et&&e.texStorage2D(i.TEXTURE_2D,i0,E0,H0[0].width,H0[0].height);for(let X=0,K=H0.length;X<K;X++)p0=H0[X],S.format!==Z0?d0!==null?I0?U&&e.compressedTexSubImage2D(i.TEXTURE_2D,X,0,0,p0.width,p0.height,d0,p0.data):e.compressedTexImage2D(i.TEXTURE_2D,X,E0,p0.width,p0.height,0,p0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):I0?U&&e.texSubImage2D(i.TEXTURE_2D,X,0,0,p0.width,p0.height,d0,S0,p0.data):e.texImage2D(i.TEXTURE_2D,X,E0,p0.width,p0.height,0,d0,S0,p0.data)}else if(S.isDataArrayTexture)if(I0){if(et&&e.texStorage3D(i.TEXTURE_2D_ARRAY,i0,E0,Q.width,Q.height,Q.depth),U)if(S.layerUpdates.size>0){const X=a2(Q.width,Q.height,S.format,S.type);for(const K of S.layerUpdates){const l0=Q.data.subarray(K*X/Q.data.BYTES_PER_ELEMENT,(K+1)*X/Q.data.BYTES_PER_ELEMENT);e.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,K,Q.width,Q.height,1,d0,S0,l0)}S.clearLayerUpdates()}else e.texSubImage3D(i.TEXTURE_2D_ARRAY,0,0,0,0,Q.width,Q.height,Q.depth,d0,S0,Q.data)}else e.texImage3D(i.TEXTURE_2D_ARRAY,0,E0,Q.width,Q.height,Q.depth,0,d0,S0,Q.data);else if(S.isData3DTexture)I0?(et&&e.texStorage3D(i.TEXTURE_3D,i0,E0,Q.width,Q.height,Q.depth),U&&e.texSubImage3D(i.TEXTURE_3D,0,0,0,0,Q.width,Q.height,Q.depth,d0,S0,Q.data)):e.texImage3D(i.TEXTURE_3D,0,E0,Q.width,Q.height,Q.depth,0,d0,S0,Q.data);else if(S.isFramebufferTexture){if(et)if(I0)e.texStorage2D(i.TEXTURE_2D,i0,E0,Q.width,Q.height);else{let X=Q.width,K=Q.height;for(let l0=0;l0<i0;l0++)e.texImage2D(i.TEXTURE_2D,l0,E0,X,K,0,d0,S0,null),X>>=1,K>>=1}}else if(H0.length>0){if(I0&&et){const X=x0(H0[0]);e.texStorage2D(i.TEXTURE_2D,i0,E0,X.width,X.height)}for(let X=0,K=H0.length;X<K;X++)p0=H0[X],I0?U&&e.texSubImage2D(i.TEXTURE_2D,X,0,0,d0,S0,p0):e.texImage2D(i.TEXTURE_2D,X,E0,d0,S0,p0);S.generateMipmaps=!1}else if(I0){if(et){const X=x0(Q);e.texStorage2D(i.TEXTURE_2D,i0,E0,X.width,X.height)}U&&e.texSubImage2D(i.TEXTURE_2D,0,0,0,d0,S0,Q)}else e.texImage2D(i.TEXTURE_2D,0,E0,d0,S0,Q);d(S)&&p(j),v0.__version=Y.version,S.onUpdate&&S.onUpdate(S)}R.__version=S.version}function e0(R,S,z){if(S.image.length!==6)return;const j=tt(R,S),Z=S.source;e.bindTexture(i.TEXTURE_CUBE_MAP,R.__webglTexture,i.TEXTURE0+z);const Y=n.get(Z);if(Z.version!==Y.__version||j===!0){e.activeTexture(i.TEXTURE0+z);const v0=q0.getPrimaries(q0.workingColorSpace),a0=S.colorSpace===$e?null:q0.getPrimaries(S.colorSpace),h0=S.colorSpace===$e||v0===a0?i.NONE:i.BROWSER_DEFAULT_WEBGL;i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,S.flipY),i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,S.premultiplyAlpha),i.pixelStorei(i.UNPACK_ALIGNMENT,S.unpackAlignment),i.pixelStorei(i.UNPACK_COLORSPACE_CONVERSION_WEBGL,h0);const G0=S.isCompressedTexture||S.image[0].isCompressedTexture,Q=S.image[0]&&S.image[0].isDataTexture,d0=[];for(let K=0;K<6;K++)!G0&&!Q?d0[K]=_(S.image[K],!0,s.maxCubemapSize):d0[K]=Q?S.image[K].image:S.image[K],d0[K]=it(S,d0[K]);const S0=d0[0],E0=r.convert(S.format,S.colorSpace),p0=r.convert(S.type),H0=y(S.internalFormat,E0,p0,S.colorSpace),I0=S.isVideoTexture!==!0,et=Y.__version===void 0||j===!0,U=Z.dataReady;let i0=T(S,S0);N0(i.TEXTURE_CUBE_MAP,S);let X;if(G0){I0&&et&&e.texStorage2D(i.TEXTURE_CUBE_MAP,i0,H0,S0.width,S0.height);for(let K=0;K<6;K++){X=d0[K].mipmaps;for(let l0=0;l0<X.length;l0++){const o0=X[l0];S.format!==Z0?E0!==null?I0?U&&e.compressedTexSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0,0,0,o0.width,o0.height,E0,o0.data):e.compressedTexImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0,H0,o0.width,o0.height,0,o0.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):I0?U&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0,0,0,o0.width,o0.height,E0,p0,o0.data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0,H0,o0.width,o0.height,0,E0,p0,o0.data)}}}else{if(X=S.mipmaps,I0&&et){X.length>0&&i0++;const K=x0(d0[0]);e.texStorage2D(i.TEXTURE_CUBE_MAP,i0,H0,K.width,K.height)}for(let K=0;K<6;K++)if(Q){I0?U&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,0,0,0,d0[K].width,d0[K].height,E0,p0,d0[K].data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,0,H0,d0[K].width,d0[K].height,0,E0,p0,d0[K].data);for(let l0=0;l0<X.length;l0++){const D0=X[l0].image[K].image;I0?U&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0+1,0,0,D0.width,D0.height,E0,p0,D0.data):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0+1,H0,D0.width,D0.height,0,E0,p0,D0.data)}}else{I0?U&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,0,0,0,E0,p0,d0[K]):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,0,H0,E0,p0,d0[K]);for(let l0=0;l0<X.length;l0++){const o0=X[l0];I0?U&&e.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0+1,0,0,E0,p0,o0.image[K]):e.texImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+K,l0+1,H0,E0,p0,o0.image[K])}}}d(S)&&p(i.TEXTURE_CUBE_MAP),Y.__version=Z.version,S.onUpdate&&S.onUpdate(S)}R.__version=S.version}function g0(R,S,z,j,Z,Y){const v0=r.convert(z.format,z.colorSpace),a0=r.convert(z.type),h0=y(z.internalFormat,v0,a0,z.colorSpace),G0=n.get(S),Q=n.get(z);if(Q.__renderTarget=S,!G0.__hasExternalTextures){const d0=Math.max(1,S.width>>Y),S0=Math.max(1,S.height>>Y);Z===i.TEXTURE_3D||Z===i.TEXTURE_2D_ARRAY?e.texImage3D(Z,Y,h0,d0,S0,S.depth,0,v0,a0,null):e.texImage2D(Z,Y,h0,d0,S0,0,v0,a0,null)}e.bindFramebuffer(i.FRAMEBUFFER,R),k0(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,j,Z,Q.__webglTexture,0,z0(S)):(Z===i.TEXTURE_2D||Z>=i.TEXTURE_CUBE_MAP_POSITIVE_X&&Z<=i.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&i.framebufferTexture2D(i.FRAMEBUFFER,j,Z,Q.__webglTexture,Y),e.bindFramebuffer(i.FRAMEBUFFER,null)}function r0(R,S,z){if(i.bindRenderbuffer(i.RENDERBUFFER,R),S.depthBuffer){const j=S.depthTexture,Z=j&&j.isDepthTexture?j.type:null,Y=v(S.stencilBuffer,Z),v0=S.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,a0=z0(S);k0(S)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,a0,Y,S.width,S.height):z?i.renderbufferStorageMultisample(i.RENDERBUFFER,a0,Y,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,Y,S.width,S.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,v0,i.RENDERBUFFER,R)}else{const j=S.textures;for(let Z=0;Z<j.length;Z++){const Y=j[Z],v0=r.convert(Y.format,Y.colorSpace),a0=r.convert(Y.type),h0=y(Y.internalFormat,v0,a0,Y.colorSpace),G0=z0(S);z&&k0(S)===!1?i.renderbufferStorageMultisample(i.RENDERBUFFER,G0,h0,S.width,S.height):k0(S)?o.renderbufferStorageMultisampleEXT(i.RENDERBUFFER,G0,h0,S.width,S.height):i.renderbufferStorage(i.RENDERBUFFER,h0,S.width,S.height)}}i.bindRenderbuffer(i.RENDERBUFFER,null)}function T0(R,S){if(S&&S.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(i.FRAMEBUFFER,R),!(S.depthTexture&&S.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const j=n.get(S.depthTexture);j.__renderTarget=S,(!j.__webglTexture||S.depthTexture.image.width!==S.width||S.depthTexture.image.height!==S.height)&&(S.depthTexture.image.width=S.width,S.depthTexture.image.height=S.height,S.depthTexture.needsUpdate=!0),G(S.depthTexture,0);const Z=j.__webglTexture,Y=z0(S);if(S.depthTexture.format===ri)k0(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,Z,0,Y):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.TEXTURE_2D,Z,0);else if(S.depthTexture.format===fi)k0(S)?o.framebufferTexture2DMultisampleEXT(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,Z,0,Y):i.framebufferTexture2D(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.TEXTURE_2D,Z,0);else throw new Error("Unknown depthTexture format")}function A0(R){const S=n.get(R),z=R.isWebGLCubeRenderTarget===!0;if(S.__boundDepthTexture!==R.depthTexture){const j=R.depthTexture;if(S.__depthDisposeCallback&&S.__depthDisposeCallback(),j){const Z=()=>{delete S.__boundDepthTexture,delete S.__depthDisposeCallback,j.removeEventListener("dispose",Z)};j.addEventListener("dispose",Z),S.__depthDisposeCallback=Z}S.__boundDepthTexture=j}if(R.depthTexture&&!S.__autoAllocateDepthBuffer){if(z)throw new Error("target.depthTexture not supported in Cube render targets");T0(S.__webglFramebuffer,R)}else if(z){S.__webglDepthbuffer=[];for(let j=0;j<6;j++)if(e.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer[j]),S.__webglDepthbuffer[j]===void 0)S.__webglDepthbuffer[j]=i.createRenderbuffer(),r0(S.__webglDepthbuffer[j],R,!1);else{const Z=R.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,Y=S.__webglDepthbuffer[j];i.bindRenderbuffer(i.RENDERBUFFER,Y),i.framebufferRenderbuffer(i.FRAMEBUFFER,Z,i.RENDERBUFFER,Y)}}else if(e.bindFramebuffer(i.FRAMEBUFFER,S.__webglFramebuffer),S.__webglDepthbuffer===void 0)S.__webglDepthbuffer=i.createRenderbuffer(),r0(S.__webglDepthbuffer,R,!1);else{const j=R.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,Z=S.__webglDepthbuffer;i.bindRenderbuffer(i.RENDERBUFFER,Z),i.framebufferRenderbuffer(i.FRAMEBUFFER,j,i.RENDERBUFFER,Z)}e.bindFramebuffer(i.FRAMEBUFFER,null)}function O0(R,S,z){const j=n.get(R);S!==void 0&&g0(j.__webglFramebuffer,R,R.texture,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,0),z!==void 0&&A0(R)}function at(R){const S=R.texture,z=n.get(R),j=n.get(S);R.addEventListener("dispose",w);const Z=R.textures,Y=R.isWebGLCubeRenderTarget===!0,v0=Z.length>1;if(v0||(j.__webglTexture===void 0&&(j.__webglTexture=i.createTexture()),j.__version=S.version,a.memory.textures++),Y){z.__webglFramebuffer=[];for(let a0=0;a0<6;a0++)if(S.mipmaps&&S.mipmaps.length>0){z.__webglFramebuffer[a0]=[];for(let h0=0;h0<S.mipmaps.length;h0++)z.__webglFramebuffer[a0][h0]=i.createFramebuffer()}else z.__webglFramebuffer[a0]=i.createFramebuffer()}else{if(S.mipmaps&&S.mipmaps.length>0){z.__webglFramebuffer=[];for(let a0=0;a0<S.mipmaps.length;a0++)z.__webglFramebuffer[a0]=i.createFramebuffer()}else z.__webglFramebuffer=i.createFramebuffer();if(v0)for(let a0=0,h0=Z.length;a0<h0;a0++){const G0=n.get(Z[a0]);G0.__webglTexture===void 0&&(G0.__webglTexture=i.createTexture(),a.memory.textures++)}if(R.samples>0&&k0(R)===!1){z.__webglMultisampledFramebuffer=i.createFramebuffer(),z.__webglColorRenderbuffer=[],e.bindFramebuffer(i.FRAMEBUFFER,z.__webglMultisampledFramebuffer);for(let a0=0;a0<Z.length;a0++){const h0=Z[a0];z.__webglColorRenderbuffer[a0]=i.createRenderbuffer(),i.bindRenderbuffer(i.RENDERBUFFER,z.__webglColorRenderbuffer[a0]);const G0=r.convert(h0.format,h0.colorSpace),Q=r.convert(h0.type),d0=y(h0.internalFormat,G0,Q,h0.colorSpace,R.isXRRenderTarget===!0),S0=z0(R);i.renderbufferStorageMultisample(i.RENDERBUFFER,S0,d0,R.width,R.height),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+a0,i.RENDERBUFFER,z.__webglColorRenderbuffer[a0])}i.bindRenderbuffer(i.RENDERBUFFER,null),R.depthBuffer&&(z.__webglDepthRenderbuffer=i.createRenderbuffer(),r0(z.__webglDepthRenderbuffer,R,!0)),e.bindFramebuffer(i.FRAMEBUFFER,null)}}if(Y){e.bindTexture(i.TEXTURE_CUBE_MAP,j.__webglTexture),N0(i.TEXTURE_CUBE_MAP,S);for(let a0=0;a0<6;a0++)if(S.mipmaps&&S.mipmaps.length>0)for(let h0=0;h0<S.mipmaps.length;h0++)g0(z.__webglFramebuffer[a0][h0],R,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+a0,h0);else g0(z.__webglFramebuffer[a0],R,S,i.COLOR_ATTACHMENT0,i.TEXTURE_CUBE_MAP_POSITIVE_X+a0,0);d(S)&&p(i.TEXTURE_CUBE_MAP),e.unbindTexture()}else if(v0){for(let a0=0,h0=Z.length;a0<h0;a0++){const G0=Z[a0],Q=n.get(G0);e.bindTexture(i.TEXTURE_2D,Q.__webglTexture),N0(i.TEXTURE_2D,G0),g0(z.__webglFramebuffer,R,G0,i.COLOR_ATTACHMENT0+a0,i.TEXTURE_2D,0),d(G0)&&p(i.TEXTURE_2D)}e.unbindTexture()}else{let a0=i.TEXTURE_2D;if((R.isWebGL3DRenderTarget||R.isWebGLArrayRenderTarget)&&(a0=R.isWebGL3DRenderTarget?i.TEXTURE_3D:i.TEXTURE_2D_ARRAY),e.bindTexture(a0,j.__webglTexture),N0(a0,S),S.mipmaps&&S.mipmaps.length>0)for(let h0=0;h0<S.mipmaps.length;h0++)g0(z.__webglFramebuffer[h0],R,S,i.COLOR_ATTACHMENT0,a0,h0);else g0(z.__webglFramebuffer,R,S,i.COLOR_ATTACHMENT0,a0,0);d(S)&&p(a0),e.unbindTexture()}R.depthBuffer&&A0(R)}function V0(R){const S=R.textures;for(let z=0,j=S.length;z<j;z++){const Z=S[z];if(d(Z)){const Y=x(R),v0=n.get(Z).__webglTexture;e.bindTexture(Y,v0),p(Y),e.unbindTexture()}}}const ht=[],I=[];function Jt(R){if(R.samples>0){if(k0(R)===!1){const S=R.textures,z=R.width,j=R.height;let Z=i.COLOR_BUFFER_BIT;const Y=R.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT,v0=n.get(R),a0=S.length>1;if(a0)for(let h0=0;h0<S.length;h0++)e.bindFramebuffer(i.FRAMEBUFFER,v0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+h0,i.RENDERBUFFER,null),e.bindFramebuffer(i.FRAMEBUFFER,v0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+h0,i.TEXTURE_2D,null,0);e.bindFramebuffer(i.READ_FRAMEBUFFER,v0.__webglMultisampledFramebuffer),e.bindFramebuffer(i.DRAW_FRAMEBUFFER,v0.__webglFramebuffer);for(let h0=0;h0<S.length;h0++){if(R.resolveDepthBuffer&&(R.depthBuffer&&(Z|=i.DEPTH_BUFFER_BIT),R.stencilBuffer&&R.resolveStencilBuffer&&(Z|=i.STENCIL_BUFFER_BIT)),a0){i.framebufferRenderbuffer(i.READ_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.RENDERBUFFER,v0.__webglColorRenderbuffer[h0]);const G0=n.get(S[h0]).__webglTexture;i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,G0,0)}i.blitFramebuffer(0,0,z,j,0,0,z,j,Z,i.NEAREST),l===!0&&(ht.length=0,I.length=0,ht.push(i.COLOR_ATTACHMENT0+h0),R.depthBuffer&&R.resolveDepthBuffer===!1&&(ht.push(Y),I.push(Y),i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,I)),i.invalidateFramebuffer(i.READ_FRAMEBUFFER,ht))}if(e.bindFramebuffer(i.READ_FRAMEBUFFER,null),e.bindFramebuffer(i.DRAW_FRAMEBUFFER,null),a0)for(let h0=0;h0<S.length;h0++){e.bindFramebuffer(i.FRAMEBUFFER,v0.__webglMultisampledFramebuffer),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0+h0,i.RENDERBUFFER,v0.__webglColorRenderbuffer[h0]);const G0=n.get(S[h0]).__webglTexture;e.bindFramebuffer(i.FRAMEBUFFER,v0.__webglFramebuffer),i.framebufferTexture2D(i.DRAW_FRAMEBUFFER,i.COLOR_ATTACHMENT0+h0,i.TEXTURE_2D,G0,0)}e.bindFramebuffer(i.DRAW_FRAMEBUFFER,v0.__webglMultisampledFramebuffer)}else if(R.depthBuffer&&R.resolveDepthBuffer===!1&&l){const S=R.stencilBuffer?i.DEPTH_STENCIL_ATTACHMENT:i.DEPTH_ATTACHMENT;i.invalidateFramebuffer(i.DRAW_FRAMEBUFFER,[S])}}}function z0(R){return Math.min(s.maxSamples,R.samples)}function k0(R){const S=n.get(R);return R.samples>0&&t.has("WEBGL_multisampled_render_to_texture")===!0&&S.__useRenderToTexture!==!1}function y0(R){const S=a.render.frame;h.get(R)!==S&&(h.set(R,S),R.update())}function it(R,S){const z=R.colorSpace,j=R.format,Z=R.type;return R.isCompressedTexture===!0||R.isVideoTexture===!0||z!==mi&&z!==$e&&(q0.getTransfer(z)===J0?(j!==Z0||Z!==le)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",z)),S}function x0(R){return typeof HTMLImageElement<"u"&&R instanceof HTMLImageElement?(u.width=R.naturalWidth||R.width,u.height=R.naturalHeight||R.height):typeof VideoFrame<"u"&&R instanceof VideoFrame?(u.width=R.displayWidth,u.height=R.displayHeight):(u.width=R.width,u.height=R.height),u}this.allocateTextureUnit=L,this.resetTextureUnits=F,this.setTexture2D=G,this.setTexture2DArray=H,this.setTexture3D=q,this.setTextureCube=W,this.rebindTextures=O0,this.setupRenderTarget=at,this.updateRenderTargetMipmap=V0,this.updateMultisampleRenderTarget=Jt,this.setupDepthRenderbuffer=A0,this.setupFrameBufferTexture=g0,this.useMultisampledRTT=k0}function W9(i,t){function e(n,s=$e){let r;const a=q0.getTransfer(s);if(n===le)return i.UNSIGNED_BYTE;if(n===ra)return i.UNSIGNED_SHORT_4_4_4_4;if(n===aa)return i.UNSIGNED_SHORT_5_5_5_1;if(n===So)return i.UNSIGNED_INT_5_9_9_9_REV;if(n===X1)return i.BYTE;if(n===sa)return i.SHORT;if(n===ui)return i.UNSIGNED_SHORT;if(n===si)return i.INT;if(n===ae)return i.UNSIGNED_INT;if(n===nt)return i.FLOAT;if(n===Ft)return i.HALF_FLOAT;if(n===To)return i.ALPHA;if(n===Eo)return i.RGB;if(n===Z0)return i.RGBA;if(n===wo)return i.LUMINANCE;if(n===Ao)return i.LUMINANCE_ALPHA;if(n===ri)return i.DEPTH_COMPONENT;if(n===fi)return i.DEPTH_STENCIL;if(n===di)return i.RED;if(n===J1)return i.RED_INTEGER;if(n===Q1)return i.RG;if(n===Gi)return i.RG_INTEGER;if(n===pi)return i.RGBA_INTEGER;if(n===B1||n===z1||n===k1||n===H1)if(a===J0)if(r=t.get("WEBGL_compressed_texture_s3tc_srgb"),r!==null){if(n===B1)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(n===z1)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(n===k1)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(n===H1)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(r=t.get("WEBGL_compressed_texture_s3tc"),r!==null){if(n===B1)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(n===z1)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(n===k1)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(n===H1)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(n===gr||n===_r||n===vr||n===xr)if(r=t.get("WEBGL_compressed_texture_pvrtc"),r!==null){if(n===gr)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(n===_r)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(n===vr)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(n===xr)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(n===yr||n===Mr||n===br)if(r=t.get("WEBGL_compressed_texture_etc"),r!==null){if(n===yr||n===Mr)return a===J0?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(n===br)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(n===Sr||n===Tr||n===Er||n===wr||n===Ar||n===Rr||n===Cr||n===Pr||n===Dr||n===Ir||n===Lr||n===Fr||n===Ur||n===Nr)if(r=t.get("WEBGL_compressed_texture_astc"),r!==null){if(n===Sr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(n===Tr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(n===Er)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(n===wr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(n===Ar)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(n===Rr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(n===Cr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(n===Pr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(n===Dr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(n===Ir)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(n===Lr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(n===Fr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(n===Ur)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(n===Nr)return a===J0?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(n===V1||n===Or||n===Br)if(r=t.get("EXT_texture_compression_bptc"),r!==null){if(n===V1)return a===J0?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(n===Or)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(n===Br)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(n===Ro||n===zr||n===kr||n===Hr)if(r=t.get("EXT_texture_compression_rgtc"),r!==null){if(n===V1)return r.COMPRESSED_RED_RGTC1_EXT;if(n===zr)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(n===kr)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(n===Hr)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return n===hi?i.UNSIGNED_INT_24_8:i[n]!==void 0?i[n]:null}return{convert:e}}const X9={type:"move"};class ks{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new ti,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new ti,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new D,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new D),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new ti,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new D,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new D),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,n){let s=null,r=null,a=null;const o=this._targetRay,l=this._grip,u=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(u&&t.hand){a=!0;for(const _ of t.hand.values()){const d=e.getJointPose(_,n),p=this._getHandJoint(u,_);d!==null&&(p.matrix.fromArray(d.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.matrixWorldNeedsUpdate=!0,p.jointRadius=d.radius),p.visible=d!==null}const h=u.joints["index-finger-tip"],f=u.joints["thumb-tip"],c=h.position.distanceTo(f.position),m=.02,g=.005;u.inputState.pinching&&c>m+g?(u.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!u.inputState.pinching&&c<=m-g&&(u.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),r!==null&&(l.matrix.fromArray(r.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,r.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(r.linearVelocity)):l.hasLinearVelocity=!1,r.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(r.angularVelocity)):l.hasAngularVelocity=!1));o!==null&&(s=e.getPose(t.targetRaySpace,n),s===null&&r!==null&&(s=r),s!==null&&(o.matrix.fromArray(s.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,s.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(s.linearVelocity)):o.hasLinearVelocity=!1,s.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(s.angularVelocity)):o.hasAngularVelocity=!1,this.dispatchEvent(X9)))}return o!==null&&(o.visible=s!==null),l!==null&&(l.visible=r!==null),u!==null&&(u.visible=a!==null),this}_getHandJoint(t,e){if(t.joints[e.jointName]===void 0){const n=new ti;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}const q9=`
void main() {

	gl_Position = vec4( position, 1.0 );

}`,Y9=`
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;class $9{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(this.texture===null){const s=new Ot,r=t.properties.get(s);r.__webglTexture=e.texture,(e.depthNear!==n.depthNear||e.depthFar!==n.depthFar)&&(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=s}}getMesh(t){if(this.texture!==null&&this.mesh===null){const e=t.cameras[0].viewport,n=new ce({vertexShader:q9,fragmentShader:Y9,uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new At(new ns(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class j9 extends Sn{constructor(t,e){super();const n=this;let s=null,r=1,a=null,o="local-floor",l=1,u=null,h=null,f=null,c=null,m=null,g=null;const _=new $9,d=e.getContextAttributes();let p=null,x=null;const y=[],v=[],T=new f0;let A=null;const w=new Lt;w.viewport=new K0;const P=new Lt;P.viewport=new K0;const b=[w,P],M=new p4;let C=null,F=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function($){let e0=y[$];return e0===void 0&&(e0=new ks,y[$]=e0),e0.getTargetRaySpace()},this.getControllerGrip=function($){let e0=y[$];return e0===void 0&&(e0=new ks,y[$]=e0),e0.getGripSpace()},this.getHand=function($){let e0=y[$];return e0===void 0&&(e0=new ks,y[$]=e0),e0.getHandSpace()};function L($){const e0=v.indexOf($.inputSource);if(e0===-1)return;const g0=y[e0];g0!==void 0&&(g0.update($.inputSource,$.frame,u||a),g0.dispatchEvent({type:$.type,data:$.inputSource}))}function B(){s.removeEventListener("select",L),s.removeEventListener("selectstart",L),s.removeEventListener("selectend",L),s.removeEventListener("squeeze",L),s.removeEventListener("squeezestart",L),s.removeEventListener("squeezeend",L),s.removeEventListener("end",B),s.removeEventListener("inputsourceschange",G);for(let $=0;$<y.length;$++){const e0=v[$];e0!==null&&(v[$]=null,y[$].disconnect(e0))}C=null,F=null,_.reset(),t.setRenderTarget(p),m=null,c=null,f=null,s=null,x=null,tt.stop(),n.isPresenting=!1,t.setPixelRatio(A),t.setSize(T.width,T.height,!1),n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function($){r=$,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function($){o=$,n.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return u||a},this.setReferenceSpace=function($){u=$},this.getBaseLayer=function(){return c!==null?c:m},this.getBinding=function(){return f},this.getFrame=function(){return g},this.getSession=function(){return s},this.setSession=async function($){if(s=$,s!==null){if(p=t.getRenderTarget(),s.addEventListener("select",L),s.addEventListener("selectstart",L),s.addEventListener("selectend",L),s.addEventListener("squeeze",L),s.addEventListener("squeezestart",L),s.addEventListener("squeezeend",L),s.addEventListener("end",B),s.addEventListener("inputsourceschange",G),d.xrCompatible!==!0&&await e.makeXRCompatible(),A=t.getPixelRatio(),t.getSize(T),s.enabledFeatures!==void 0&&s.enabledFeatures.includes("layers")){let g0=null,r0=null,T0=null;d.depth&&(T0=d.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,g0=d.stencil?fi:ri,r0=d.stencil?hi:ae);const A0={colorFormat:e.RGBA8,depthFormat:T0,scaleFactor:r};f=new XRWebGLBinding(s,e),c=f.createProjectionLayer(A0),s.updateRenderState({layers:[c]}),t.setPixelRatio(1),t.setSize(c.textureWidth,c.textureHeight,!1),x=new Zt(c.textureWidth,c.textureHeight,{format:Z0,type:le,depthTexture:new Ho(c.textureWidth,c.textureHeight,r0,void 0,void 0,void 0,void 0,void 0,void 0,g0),stencilBuffer:d.stencil,colorSpace:t.outputColorSpace,samples:d.antialias?4:0,resolveDepthBuffer:c.ignoreDepthValues===!1})}else{const g0={antialias:d.antialias,alpha:!0,depth:d.depth,stencil:d.stencil,framebufferScaleFactor:r};m=new XRWebGLLayer(s,e,g0),s.updateRenderState({baseLayer:m}),t.setPixelRatio(1),t.setSize(m.framebufferWidth,m.framebufferHeight,!1),x=new Zt(m.framebufferWidth,m.framebufferHeight,{format:Z0,type:le,colorSpace:t.outputColorSpace,stencilBuffer:d.stencil})}x.isXRRenderTarget=!0,this.setFoveation(l),u=null,a=await s.requestReferenceSpace(o),tt.setContext(s),tt.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode},this.getDepthTexture=function(){return _.getDepthTexture()};function G($){for(let e0=0;e0<$.removed.length;e0++){const g0=$.removed[e0],r0=v.indexOf(g0);r0>=0&&(v[r0]=null,y[r0].disconnect(g0))}for(let e0=0;e0<$.added.length;e0++){const g0=$.added[e0];let r0=v.indexOf(g0);if(r0===-1){for(let A0=0;A0<y.length;A0++)if(A0>=v.length){v.push(g0),r0=A0;break}else if(v[A0]===null){v[A0]=g0,r0=A0;break}if(r0===-1)break}const T0=y[r0];T0&&T0.connect(g0)}}const H=new D,q=new D;function W($,e0,g0){H.setFromMatrixPosition(e0.matrixWorld),q.setFromMatrixPosition(g0.matrixWorld);const r0=H.distanceTo(q),T0=e0.projectionMatrix.elements,A0=g0.projectionMatrix.elements,O0=T0[14]/(T0[10]-1),at=T0[14]/(T0[10]+1),V0=(T0[9]+1)/T0[5],ht=(T0[9]-1)/T0[5],I=(T0[8]-1)/T0[0],Jt=(A0[8]+1)/A0[0],z0=O0*I,k0=O0*Jt,y0=r0/(-I+Jt),it=y0*-I;if(e0.matrixWorld.decompose($.position,$.quaternion,$.scale),$.translateX(it),$.translateZ(y0),$.matrixWorld.compose($.position,$.quaternion,$.scale),$.matrixWorldInverse.copy($.matrixWorld).invert(),T0[10]===-1)$.projectionMatrix.copy(e0.projectionMatrix),$.projectionMatrixInverse.copy(e0.projectionMatrixInverse);else{const x0=O0+y0,R=at+y0,S=z0-it,z=k0+(r0-it),j=V0*at/R*x0,Z=ht*at/R*x0;$.projectionMatrix.makePerspective(S,z,j,Z,x0,R),$.projectionMatrixInverse.copy($.projectionMatrix).invert()}}function t0($,e0){e0===null?$.matrixWorld.copy($.matrix):$.matrixWorld.multiplyMatrices(e0.matrixWorld,$.matrix),$.matrixWorldInverse.copy($.matrixWorld).invert()}this.updateCamera=function($){if(s===null)return;let e0=$.near,g0=$.far;_.texture!==null&&(_.depthNear>0&&(e0=_.depthNear),_.depthFar>0&&(g0=_.depthFar)),M.near=P.near=w.near=e0,M.far=P.far=w.far=g0,(C!==M.near||F!==M.far)&&(s.updateRenderState({depthNear:M.near,depthFar:M.far}),C=M.near,F=M.far),w.layers.mask=$.layers.mask|2,P.layers.mask=$.layers.mask|4,M.layers.mask=w.layers.mask|P.layers.mask;const r0=$.parent,T0=M.cameras;t0(M,r0);for(let A0=0;A0<T0.length;A0++)t0(T0[A0],r0);T0.length===2?W(M,w,P):M.projectionMatrix.copy(w.projectionMatrix),c0($,M,r0)};function c0($,e0,g0){g0===null?$.matrix.copy(e0.matrixWorld):($.matrix.copy(g0.matrixWorld),$.matrix.invert(),$.matrix.multiply(e0.matrixWorld)),$.matrix.decompose($.position,$.quaternion,$.scale),$.updateMatrixWorld(!0),$.projectionMatrix.copy(e0.projectionMatrix),$.projectionMatrixInverse.copy(e0.projectionMatrixInverse),$.isPerspectiveCamera&&($.fov=gi*2*Math.atan(1/$.projectionMatrix.elements[5]),$.zoom=1)}this.getCamera=function(){return M},this.getFoveation=function(){if(!(c===null&&m===null))return l},this.setFoveation=function($){l=$,c!==null&&(c.fixedFoveation=$),m!==null&&m.fixedFoveation!==void 0&&(m.fixedFoveation=$)},this.hasDepthSensing=function(){return _.texture!==null},this.getDepthSensingMesh=function(){return _.getMesh(M)};let _0=null;function N0($,e0){if(h=e0.getViewerPose(u||a),g=e0,h!==null){const g0=h.views;m!==null&&(t.setRenderTargetFramebuffer(x,m.framebuffer),t.setRenderTarget(x));let r0=!1;g0.length!==M.cameras.length&&(M.cameras.length=0,r0=!0);for(let A0=0;A0<g0.length;A0++){const O0=g0[A0];let at=null;if(m!==null)at=m.getViewport(O0);else{const ht=f.getViewSubImage(c,O0);at=ht.viewport,A0===0&&(t.setRenderTargetTextures(x,ht.colorTexture,c.ignoreDepthValues?void 0:ht.depthStencilTexture),t.setRenderTarget(x))}let V0=b[A0];V0===void 0&&(V0=new Lt,V0.layers.enable(A0),V0.viewport=new K0,b[A0]=V0),V0.matrix.fromArray(O0.transform.matrix),V0.matrix.decompose(V0.position,V0.quaternion,V0.scale),V0.projectionMatrix.fromArray(O0.projectionMatrix),V0.projectionMatrixInverse.copy(V0.projectionMatrix).invert(),V0.viewport.set(at.x,at.y,at.width,at.height),A0===0&&(M.matrix.copy(V0.matrix),M.matrix.decompose(M.position,M.quaternion,M.scale)),r0===!0&&M.cameras.push(V0)}const T0=s.enabledFeatures;if(T0&&T0.includes("depth-sensing")){const A0=f.getDepthInformation(g0[0]);A0&&A0.isValid&&A0.texture&&_.init(t,A0,s.renderState)}}for(let g0=0;g0<y.length;g0++){const r0=v[g0],T0=y[g0];r0!==null&&T0!==void 0&&T0.update(r0,e0,u||a)}_0&&_0($,e0),e0.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:e0}),g=null}const tt=new Wo;tt.setAnimationLoop(N0),this.setAnimationLoop=function($){_0=$},this.dispose=function(){}}}const ln=new Se,K9=new U0;function Z9(i,t){function e(d,p){d.matrixAutoUpdate===!0&&d.updateMatrix(),p.value.copy(d.matrix)}function n(d,p){p.color.getRGB(d.fogColor.value,Oo(i)),p.isFog?(d.fogNear.value=p.near,d.fogFar.value=p.far):p.isFogExp2&&(d.fogDensity.value=p.density)}function s(d,p,x,y,v){p.isMeshBasicMaterial||p.isMeshLambertMaterial?r(d,p):p.isMeshToonMaterial?(r(d,p),f(d,p)):p.isMeshPhongMaterial?(r(d,p),h(d,p)):p.isMeshStandardMaterial?(r(d,p),c(d,p),p.isMeshPhysicalMaterial&&m(d,p,v)):p.isMeshMatcapMaterial?(r(d,p),g(d,p)):p.isMeshDepthMaterial?r(d,p):p.isMeshDistanceMaterial?(r(d,p),_(d,p)):p.isMeshNormalMaterial?r(d,p):p.isLineBasicMaterial?(a(d,p),p.isLineDashedMaterial&&o(d,p)):p.isPointsMaterial?l(d,p,x,y):p.isSpriteMaterial?u(d,p):p.isShadowMaterial?(d.color.value.copy(p.color),d.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function r(d,p){d.opacity.value=p.opacity,p.color&&d.diffuse.value.copy(p.color),p.emissive&&d.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(d.map.value=p.map,e(p.map,d.mapTransform)),p.alphaMap&&(d.alphaMap.value=p.alphaMap,e(p.alphaMap,d.alphaMapTransform)),p.bumpMap&&(d.bumpMap.value=p.bumpMap,e(p.bumpMap,d.bumpMapTransform),d.bumpScale.value=p.bumpScale,p.side===Rt&&(d.bumpScale.value*=-1)),p.normalMap&&(d.normalMap.value=p.normalMap,e(p.normalMap,d.normalMapTransform),d.normalScale.value.copy(p.normalScale),p.side===Rt&&d.normalScale.value.negate()),p.displacementMap&&(d.displacementMap.value=p.displacementMap,e(p.displacementMap,d.displacementMapTransform),d.displacementScale.value=p.displacementScale,d.displacementBias.value=p.displacementBias),p.emissiveMap&&(d.emissiveMap.value=p.emissiveMap,e(p.emissiveMap,d.emissiveMapTransform)),p.specularMap&&(d.specularMap.value=p.specularMap,e(p.specularMap,d.specularMapTransform)),p.alphaTest>0&&(d.alphaTest.value=p.alphaTest);const x=t.get(p),y=x.envMap,v=x.envMapRotation;y&&(d.envMap.value=y,ln.copy(v),ln.x*=-1,ln.y*=-1,ln.z*=-1,y.isCubeTexture&&y.isRenderTargetTexture===!1&&(ln.y*=-1,ln.z*=-1),d.envMapRotation.value.setFromMatrix4(K9.makeRotationFromEuler(ln)),d.flipEnvMap.value=y.isCubeTexture&&y.isRenderTargetTexture===!1?-1:1,d.reflectivity.value=p.reflectivity,d.ior.value=p.ior,d.refractionRatio.value=p.refractionRatio),p.lightMap&&(d.lightMap.value=p.lightMap,d.lightMapIntensity.value=p.lightMapIntensity,e(p.lightMap,d.lightMapTransform)),p.aoMap&&(d.aoMap.value=p.aoMap,d.aoMapIntensity.value=p.aoMapIntensity,e(p.aoMap,d.aoMapTransform))}function a(d,p){d.diffuse.value.copy(p.color),d.opacity.value=p.opacity,p.map&&(d.map.value=p.map,e(p.map,d.mapTransform))}function o(d,p){d.dashSize.value=p.dashSize,d.totalSize.value=p.dashSize+p.gapSize,d.scale.value=p.scale}function l(d,p,x,y){d.diffuse.value.copy(p.color),d.opacity.value=p.opacity,d.size.value=p.size*x,d.scale.value=y*.5,p.map&&(d.map.value=p.map,e(p.map,d.uvTransform)),p.alphaMap&&(d.alphaMap.value=p.alphaMap,e(p.alphaMap,d.alphaMapTransform)),p.alphaTest>0&&(d.alphaTest.value=p.alphaTest)}function u(d,p){d.diffuse.value.copy(p.color),d.opacity.value=p.opacity,d.rotation.value=p.rotation,p.map&&(d.map.value=p.map,e(p.map,d.mapTransform)),p.alphaMap&&(d.alphaMap.value=p.alphaMap,e(p.alphaMap,d.alphaMapTransform)),p.alphaTest>0&&(d.alphaTest.value=p.alphaTest)}function h(d,p){d.specular.value.copy(p.specular),d.shininess.value=Math.max(p.shininess,1e-4)}function f(d,p){p.gradientMap&&(d.gradientMap.value=p.gradientMap)}function c(d,p){d.metalness.value=p.metalness,p.metalnessMap&&(d.metalnessMap.value=p.metalnessMap,e(p.metalnessMap,d.metalnessMapTransform)),d.roughness.value=p.roughness,p.roughnessMap&&(d.roughnessMap.value=p.roughnessMap,e(p.roughnessMap,d.roughnessMapTransform)),p.envMap&&(d.envMapIntensity.value=p.envMapIntensity)}function m(d,p,x){d.ior.value=p.ior,p.sheen>0&&(d.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),d.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(d.sheenColorMap.value=p.sheenColorMap,e(p.sheenColorMap,d.sheenColorMapTransform)),p.sheenRoughnessMap&&(d.sheenRoughnessMap.value=p.sheenRoughnessMap,e(p.sheenRoughnessMap,d.sheenRoughnessMapTransform))),p.clearcoat>0&&(d.clearcoat.value=p.clearcoat,d.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(d.clearcoatMap.value=p.clearcoatMap,e(p.clearcoatMap,d.clearcoatMapTransform)),p.clearcoatRoughnessMap&&(d.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap,e(p.clearcoatRoughnessMap,d.clearcoatRoughnessMapTransform)),p.clearcoatNormalMap&&(d.clearcoatNormalMap.value=p.clearcoatNormalMap,e(p.clearcoatNormalMap,d.clearcoatNormalMapTransform),d.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),p.side===Rt&&d.clearcoatNormalScale.value.negate())),p.dispersion>0&&(d.dispersion.value=p.dispersion),p.iridescence>0&&(d.iridescence.value=p.iridescence,d.iridescenceIOR.value=p.iridescenceIOR,d.iridescenceThicknessMinimum.value=p.iridescenceThicknessRange[0],d.iridescenceThicknessMaximum.value=p.iridescenceThicknessRange[1],p.iridescenceMap&&(d.iridescenceMap.value=p.iridescenceMap,e(p.iridescenceMap,d.iridescenceMapTransform)),p.iridescenceThicknessMap&&(d.iridescenceThicknessMap.value=p.iridescenceThicknessMap,e(p.iridescenceThicknessMap,d.iridescenceThicknessMapTransform))),p.transmission>0&&(d.transmission.value=p.transmission,d.transmissionSamplerMap.value=x.texture,d.transmissionSamplerSize.value.set(x.width,x.height),p.transmissionMap&&(d.transmissionMap.value=p.transmissionMap,e(p.transmissionMap,d.transmissionMapTransform)),d.thickness.value=p.thickness,p.thicknessMap&&(d.thicknessMap.value=p.thicknessMap,e(p.thicknessMap,d.thicknessMapTransform)),d.attenuationDistance.value=p.attenuationDistance,d.attenuationColor.value.copy(p.attenuationColor)),p.anisotropy>0&&(d.anisotropyVector.value.set(p.anisotropy*Math.cos(p.anisotropyRotation),p.anisotropy*Math.sin(p.anisotropyRotation)),p.anisotropyMap&&(d.anisotropyMap.value=p.anisotropyMap,e(p.anisotropyMap,d.anisotropyMapTransform))),d.specularIntensity.value=p.specularIntensity,d.specularColor.value.copy(p.specularColor),p.specularColorMap&&(d.specularColorMap.value=p.specularColorMap,e(p.specularColorMap,d.specularColorMapTransform)),p.specularIntensityMap&&(d.specularIntensityMap.value=p.specularIntensityMap,e(p.specularIntensityMap,d.specularIntensityMapTransform))}function g(d,p){p.matcap&&(d.matcap.value=p.matcap)}function _(d,p){const x=t.get(p).light;d.referencePosition.value.setFromMatrixPosition(x.matrixWorld),d.nearDistance.value=x.shadow.camera.near,d.farDistance.value=x.shadow.camera.far}return{refreshFogUniforms:n,refreshMaterialUniforms:s}}function J9(i,t,e,n){let s={},r={},a=[];const o=i.getParameter(i.MAX_UNIFORM_BUFFER_BINDINGS);function l(x,y){const v=y.program;n.uniformBlockBinding(x,v)}function u(x,y){let v=s[x.id];v===void 0&&(g(x),v=h(x),s[x.id]=v,x.addEventListener("dispose",d));const T=y.program;n.updateUBOMapping(x,T);const A=t.render.frame;r[x.id]!==A&&(c(x),r[x.id]=A)}function h(x){const y=f();x.__bindingPointIndex=y;const v=i.createBuffer(),T=x.__size,A=x.usage;return i.bindBuffer(i.UNIFORM_BUFFER,v),i.bufferData(i.UNIFORM_BUFFER,T,A),i.bindBuffer(i.UNIFORM_BUFFER,null),i.bindBufferBase(i.UNIFORM_BUFFER,y,v),v}function f(){for(let x=0;x<o;x++)if(a.indexOf(x)===-1)return a.push(x),x;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function c(x){const y=s[x.id],v=x.uniforms,T=x.__cache;i.bindBuffer(i.UNIFORM_BUFFER,y);for(let A=0,w=v.length;A<w;A++){const P=Array.isArray(v[A])?v[A]:[v[A]];for(let b=0,M=P.length;b<M;b++){const C=P[b];if(m(C,A,b,T)===!0){const F=C.__offset,L=Array.isArray(C.value)?C.value:[C.value];let B=0;for(let G=0;G<L.length;G++){const H=L[G],q=_(H);typeof H=="number"||typeof H=="boolean"?(C.__data[0]=H,i.bufferSubData(i.UNIFORM_BUFFER,F+B,C.__data)):H.isMatrix3?(C.__data[0]=H.elements[0],C.__data[1]=H.elements[1],C.__data[2]=H.elements[2],C.__data[3]=0,C.__data[4]=H.elements[3],C.__data[5]=H.elements[4],C.__data[6]=H.elements[5],C.__data[7]=0,C.__data[8]=H.elements[6],C.__data[9]=H.elements[7],C.__data[10]=H.elements[8],C.__data[11]=0):(H.toArray(C.__data,B),B+=q.storage/Float32Array.BYTES_PER_ELEMENT)}i.bufferSubData(i.UNIFORM_BUFFER,F,C.__data)}}}i.bindBuffer(i.UNIFORM_BUFFER,null)}function m(x,y,v,T){const A=x.value,w=y+"_"+v;if(T[w]===void 0)return typeof A=="number"||typeof A=="boolean"?T[w]=A:T[w]=A.clone(),!0;{const P=T[w];if(typeof A=="number"||typeof A=="boolean"){if(P!==A)return T[w]=A,!0}else if(P.equals(A)===!1)return P.copy(A),!0}return!1}function g(x){const y=x.uniforms;let v=0;const T=16;for(let w=0,P=y.length;w<P;w++){const b=Array.isArray(y[w])?y[w]:[y[w]];for(let M=0,C=b.length;M<C;M++){const F=b[M],L=Array.isArray(F.value)?F.value:[F.value];for(let B=0,G=L.length;B<G;B++){const H=L[B],q=_(H),W=v%T,t0=W%q.boundary,c0=W+t0;v+=t0,c0!==0&&T-c0<q.storage&&(v+=T-c0),F.__data=new Float32Array(q.storage/Float32Array.BYTES_PER_ELEMENT),F.__offset=v,v+=q.storage}}}const A=v%T;return A>0&&(v+=T-A),x.__size=v,x.__cache={},this}function _(x){const y={boundary:0,storage:0};return typeof x=="number"||typeof x=="boolean"?(y.boundary=4,y.storage=4):x.isVector2?(y.boundary=8,y.storage=8):x.isVector3||x.isColor?(y.boundary=16,y.storage=12):x.isVector4?(y.boundary=16,y.storage=16):x.isMatrix3?(y.boundary=48,y.storage=48):x.isMatrix4?(y.boundary=64,y.storage=64):x.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",x),y}function d(x){const y=x.target;y.removeEventListener("dispose",d);const v=a.indexOf(y.__bindingPointIndex);a.splice(v,1),i.deleteBuffer(s[y.id]),delete s[y.id],delete r[y.id]}function p(){for(const x in s)i.deleteBuffer(s[x]);a=[],s={},r={}}return{bind:l,update:u,dispose:p}}class Q9{constructor(t={}){const{canvas:e=R5(),context:n=null,depth:s=!0,stencil:r=!1,alpha:a=!1,antialias:o=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:u=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:f=!1,reverseDepthBuffer:c=!1}=t;this.isWebGLRenderer=!0;let m;if(n!==null){if(typeof WebGLRenderingContext<"u"&&n instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");m=n.getContextAttributes().alpha}else m=a;const g=new Uint32Array(4),_=new Int32Array(4);let d=null,p=null;const x=[],y=[];this.domElement=e,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=ne,this.toneMapping=Ue,this.toneMappingExposure=1;const v=this;let T=!1,A=0,w=0,P=null,b=-1,M=null;const C=new K0,F=new K0;let L=null;const B=new F0(0);let G=0,H=e.width,q=e.height,W=1,t0=null,c0=null;const _0=new K0(0,0,H,q),N0=new K0(0,0,H,q);let tt=!1;const $=new ua;let e0=!1,g0=!1;this.transmissionResolutionScale=1;const r0=new U0,T0=new U0,A0=new D,O0=new K0,at={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let V0=!1;function ht(){return P===null?W:1}let I=n;function Jt(E,N){return e.getContext(E,N)}try{const E={alpha:!0,depth:s,stencil:r,antialias:o,premultipliedAlpha:l,preserveDrawingBuffer:u,powerPreference:h,failIfMajorPerformanceCaveat:f};if("setAttribute"in e&&e.setAttribute("data-engine",`three.js r${K1}`),e.addEventListener("webglcontextlost",K,!1),e.addEventListener("webglcontextrestored",l0,!1),e.addEventListener("webglcontextcreationerror",o0,!1),I===null){const N="webgl2";if(I=Jt(N,E),I===null)throw Jt(N)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(E){throw console.error("THREE.WebGLRenderer: "+E.message),E}let z0,k0,y0,it,x0,R,S,z,j,Z,Y,v0,a0,h0,G0,Q,d0,S0,E0,p0,H0,I0,et,U;function i0(){z0=new l8(I),z0.init(),I0=new W9(I,z0),k0=new n8(I,z0,t,I0),y0=new V9(I,z0),k0.reverseDepthBuffer&&c&&y0.buffers.depth.setReversed(!0),it=new h8(I),x0=new C9,R=new G9(I,z0,y0,x0,k0,I0,it),S=new s8(v),z=new o8(v),j=new v4(I),et=new t8(I,j),Z=new c8(I,j,it,et),Y=new d8(I,Z,j,it),E0=new f8(I,k0,R),Q=new i8(x0),v0=new R9(v,S,z,z0,k0,et,Q),a0=new Z9(v,x0),h0=new D9,G0=new O9(z0),S0=new Q7(v,S,z,y0,Y,m,l),d0=new k9(v,Y,k0),U=new J9(I,it,k0,y0),p0=new e8(I,z0,it),H0=new u8(I,z0,it),it.programs=v0.programs,v.capabilities=k0,v.extensions=z0,v.properties=x0,v.renderLists=h0,v.shadowMap=d0,v.state=y0,v.info=it}i0();const X=new j9(v,I);this.xr=X,this.getContext=function(){return I},this.getContextAttributes=function(){return I.getContextAttributes()},this.forceContextLoss=function(){const E=z0.get("WEBGL_lose_context");E&&E.loseContext()},this.forceContextRestore=function(){const E=z0.get("WEBGL_lose_context");E&&E.restoreContext()},this.getPixelRatio=function(){return W},this.setPixelRatio=function(E){E!==void 0&&(W=E,this.setSize(H,q,!1))},this.getSize=function(E){return E.set(H,q)},this.setSize=function(E,N,k=!0){if(X.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}H=E,q=N,e.width=Math.floor(E*W),e.height=Math.floor(N*W),k===!0&&(e.style.width=E+"px",e.style.height=N+"px"),this.setViewport(0,0,E,N)},this.getDrawingBufferSize=function(E){return E.set(H*W,q*W).floor()},this.setDrawingBufferSize=function(E,N,k){H=E,q=N,W=k,e.width=Math.floor(E*k),e.height=Math.floor(N*k),this.setViewport(0,0,E,N)},this.getCurrentViewport=function(E){return E.copy(C)},this.getViewport=function(E){return E.copy(_0)},this.setViewport=function(E,N,k,V){E.isVector4?_0.set(E.x,E.y,E.z,E.w):_0.set(E,N,k,V),y0.viewport(C.copy(_0).multiplyScalar(W).round())},this.getScissor=function(E){return E.copy(N0)},this.setScissor=function(E,N,k,V){E.isVector4?N0.set(E.x,E.y,E.z,E.w):N0.set(E,N,k,V),y0.scissor(F.copy(N0).multiplyScalar(W).round())},this.getScissorTest=function(){return tt},this.setScissorTest=function(E){y0.setScissorTest(tt=E)},this.setOpaqueSort=function(E){t0=E},this.setTransparentSort=function(E){c0=E},this.getClearColor=function(E){return E.copy(S0.getClearColor())},this.setClearColor=function(){S0.setClearColor.apply(S0,arguments)},this.getClearAlpha=function(){return S0.getClearAlpha()},this.setClearAlpha=function(){S0.setClearAlpha.apply(S0,arguments)},this.clear=function(E=!0,N=!0,k=!0){let V=0;if(E){let O=!1;if(P!==null){const J=P.texture.format;O=J===pi||J===Gi||J===J1}if(O){const J=P.texture.type,s0=J===le||J===ae||J===ui||J===hi||J===ra||J===aa,u0=S0.getClearColor(),m0=S0.getClearAlpha(),w0=u0.r,R0=u0.g,M0=u0.b;s0?(g[0]=w0,g[1]=R0,g[2]=M0,g[3]=m0,I.clearBufferuiv(I.COLOR,0,g)):(_[0]=w0,_[1]=R0,_[2]=M0,_[3]=m0,I.clearBufferiv(I.COLOR,0,_))}else V|=I.COLOR_BUFFER_BIT}N&&(V|=I.DEPTH_BUFFER_BIT),k&&(V|=I.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),I.clear(V)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",K,!1),e.removeEventListener("webglcontextrestored",l0,!1),e.removeEventListener("webglcontextcreationerror",o0,!1),S0.dispose(),h0.dispose(),G0.dispose(),x0.dispose(),S.dispose(),z.dispose(),Y.dispose(),et.dispose(),U.dispose(),v0.dispose(),X.dispose(),X.removeEventListener("sessionstart",Ea),X.removeEventListener("sessionend",wa),tn.stop()};function K(E){E.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),T=!0}function l0(){console.log("THREE.WebGLRenderer: Context Restored."),T=!1;const E=it.autoReset,N=d0.enabled,k=d0.autoUpdate,V=d0.needsUpdate,O=d0.type;i0(),it.autoReset=E,d0.enabled=N,d0.autoUpdate=k,d0.needsUpdate=V,d0.type=O}function o0(E){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",E.statusMessage)}function D0(E){const N=E.target;N.removeEventListener("dispose",D0),ot(N)}function ot(E){Tt(E),x0.remove(E)}function Tt(E){const N=x0.get(E).programs;N!==void 0&&(N.forEach(function(k){v0.releaseProgram(k)}),E.isShaderMaterial&&v0.releaseShaderCache(E))}this.renderBufferDirect=function(E,N,k,V,O,J){N===null&&(N=at);const s0=O.isMesh&&O.matrixWorld.determinant()<0,u0=v3(E,N,k,V,O);y0.setMaterial(V,s0);let m0=k.index,w0=1;if(V.wireframe===!0){if(m0=Z.getWireframeAttribute(k),m0===void 0)return;w0=2}const R0=k.drawRange,M0=k.attributes.position;let W0=R0.start*w0,Y0=(R0.start+R0.count)*w0;J!==null&&(W0=Math.max(W0,J.start*w0),Y0=Math.min(Y0,(J.start+J.count)*w0)),m0!==null?(W0=Math.max(W0,0),Y0=Math.min(Y0,m0.count)):M0!=null&&(W0=Math.max(W0,0),Y0=Math.min(Y0,M0.count));const dt=Y0-W0;if(dt<0||dt===1/0)return;et.setup(O,V,u0,k,m0);let lt,X0=p0;if(m0!==null&&(lt=j.get(m0),X0=H0,X0.setIndex(lt)),O.isMesh)V.wireframe===!0?(y0.setLineWidth(V.wireframeLinewidth*ht()),X0.setMode(I.LINES)):X0.setMode(I.TRIANGLES);else if(O.isLine){let b0=V.linewidth;b0===void 0&&(b0=1),y0.setLineWidth(b0*ht()),O.isLineSegments?X0.setMode(I.LINES):O.isLineLoop?X0.setMode(I.LINE_LOOP):X0.setMode(I.LINE_STRIP)}else O.isPoints?X0.setMode(I.POINTS):O.isSprite&&X0.setMode(I.TRIANGLES);if(O.isBatchedMesh)if(O._multiDrawInstances!==null)X0.renderMultiDrawInstances(O._multiDrawStarts,O._multiDrawCounts,O._multiDrawCount,O._multiDrawInstances);else if(z0.get("WEBGL_multi_draw"))X0.renderMultiDraw(O._multiDrawStarts,O._multiDrawCounts,O._multiDrawCount);else{const b0=O._multiDrawStarts,Mt=O._multiDrawCounts,$0=O._multiDrawCount,he=m0?j.get(m0).bytesPerElement:1,En=x0.get(V).currentProgram.getUniforms();for(let Xt=0;Xt<$0;Xt++)En.setValue(I,"_gl_DrawID",Xt),X0.render(b0[Xt]/he,Mt[Xt])}else if(O.isInstancedMesh)X0.renderInstances(W0,dt,O.count);else if(k.isInstancedBufferGeometry){const b0=k._maxInstanceCount!==void 0?k._maxInstanceCount:1/0,Mt=Math.min(k.instanceCount,b0);X0.renderInstances(W0,dt,Mt)}else X0.render(W0,dt)};function j0(E,N,k){E.transparent===!0&&E.side===ie&&E.forceSinglePass===!1?(E.side=Rt,E.needsUpdate=!0,Yi(E,N,k),E.side=ve,E.needsUpdate=!0,Yi(E,N,k),E.side=ie):Yi(E,N,k)}this.compile=function(E,N,k=null){k===null&&(k=E),p=G0.get(k),p.init(N),y.push(p),k.traverseVisible(function(O){O.isLight&&O.layers.test(N.layers)&&(p.pushLight(O),O.castShadow&&p.pushShadow(O))}),E!==k&&E.traverseVisible(function(O){O.isLight&&O.layers.test(N.layers)&&(p.pushLight(O),O.castShadow&&p.pushShadow(O))}),p.setupLights();const V=new Set;return E.traverse(function(O){if(!(O.isMesh||O.isPoints||O.isLine||O.isSprite))return;const J=O.material;if(J)if(Array.isArray(J))for(let s0=0;s0<J.length;s0++){const u0=J[s0];j0(u0,k,O),V.add(u0)}else j0(J,k,O),V.add(J)}),y.pop(),p=null,V},this.compileAsync=function(E,N,k=null){const V=this.compile(E,N,k);return new Promise(O=>{function J(){if(V.forEach(function(s0){x0.get(s0).currentProgram.isReady()&&V.delete(s0)}),V.size===0){O(E);return}setTimeout(J,10)}z0.get("KHR_parallel_shader_compile")!==null?J():setTimeout(J,10)})};let ue=null;function Te(E){ue&&ue(E)}function Ea(){tn.stop()}function wa(){tn.start()}const tn=new Wo;tn.setAnimationLoop(Te),typeof self<"u"&&tn.setContext(self),this.setAnimationLoop=function(E){ue=E,X.setAnimationLoop(E),E===null?tn.stop():tn.start()},X.addEventListener("sessionstart",Ea),X.addEventListener("sessionend",wa),this.render=function(E,N){if(N!==void 0&&N.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(T===!0)return;if(E.matrixWorldAutoUpdate===!0&&E.updateMatrixWorld(),N.parent===null&&N.matrixWorldAutoUpdate===!0&&N.updateMatrixWorld(),X.enabled===!0&&X.isPresenting===!0&&(X.cameraAutoUpdate===!0&&X.updateCamera(N),N=X.getCamera()),E.isScene===!0&&E.onBeforeRender(v,E,N,P),p=G0.get(E,y.length),p.init(N),y.push(p),T0.multiplyMatrices(N.projectionMatrix,N.matrixWorldInverse),$.setFromProjectionMatrix(T0),g0=this.localClippingEnabled,e0=Q.init(this.clippingPlanes,g0),d=h0.get(E,x.length),d.init(),x.push(d),X.enabled===!0&&X.isPresenting===!0){const J=v.xr.getDepthSensingMesh();J!==null&&os(J,N,-1/0,v.sortObjects)}os(E,N,0,v.sortObjects),d.finish(),v.sortObjects===!0&&d.sort(t0,c0),V0=X.enabled===!1||X.isPresenting===!1||X.hasDepthSensing()===!1,V0&&S0.addToRenderList(d,E),this.info.render.frame++,e0===!0&&Q.beginShadows();const k=p.state.shadowsArray;d0.render(k,E,N),e0===!0&&Q.endShadows(),this.info.autoReset===!0&&this.info.reset();const V=d.opaque,O=d.transmissive;if(p.setupLights(),N.isArrayCamera){const J=N.cameras;if(O.length>0)for(let s0=0,u0=J.length;s0<u0;s0++){const m0=J[s0];Ra(V,O,E,m0)}V0&&S0.render(E);for(let s0=0,u0=J.length;s0<u0;s0++){const m0=J[s0];Aa(d,E,m0,m0.viewport)}}else O.length>0&&Ra(V,O,E,N),V0&&S0.render(E),Aa(d,E,N);P!==null&&w===0&&(R.updateMultisampleRenderTarget(P),R.updateRenderTargetMipmap(P)),E.isScene===!0&&E.onAfterRender(v,E,N),et.resetDefaultState(),b=-1,M=null,y.pop(),y.length>0?(p=y[y.length-1],e0===!0&&Q.setGlobalState(v.clippingPlanes,p.state.camera)):p=null,x.pop(),x.length>0?d=x[x.length-1]:d=null};function os(E,N,k,V){if(E.visible===!1)return;if(E.layers.test(N.layers)){if(E.isGroup)k=E.renderOrder;else if(E.isLOD)E.autoUpdate===!0&&E.update(N);else if(E.isLight)p.pushLight(E),E.castShadow&&p.pushShadow(E);else if(E.isSprite){if(!E.frustumCulled||$.intersectsSprite(E)){V&&O0.setFromMatrixPosition(E.matrixWorld).applyMatrix4(T0);const s0=Y.update(E),u0=E.material;u0.visible&&d.push(E,s0,u0,k,O0.z,null)}}else if((E.isMesh||E.isLine||E.isPoints)&&(!E.frustumCulled||$.intersectsObject(E))){const s0=Y.update(E),u0=E.material;if(V&&(E.boundingSphere!==void 0?(E.boundingSphere===null&&E.computeBoundingSphere(),O0.copy(E.boundingSphere.center)):(s0.boundingSphere===null&&s0.computeBoundingSphere(),O0.copy(s0.boundingSphere.center)),O0.applyMatrix4(E.matrixWorld).applyMatrix4(T0)),Array.isArray(u0)){const m0=s0.groups;for(let w0=0,R0=m0.length;w0<R0;w0++){const M0=m0[w0],W0=u0[M0.materialIndex];W0&&W0.visible&&d.push(E,s0,W0,k,O0.z,M0)}}else u0.visible&&d.push(E,s0,u0,k,O0.z,null)}}const J=E.children;for(let s0=0,u0=J.length;s0<u0;s0++)os(J[s0],N,k,V)}function Aa(E,N,k,V){const O=E.opaque,J=E.transmissive,s0=E.transparent;p.setupLightsView(k),e0===!0&&Q.setGlobalState(v.clippingPlanes,k),V&&y0.viewport(C.copy(V)),O.length>0&&qi(O,N,k),J.length>0&&qi(J,N,k),s0.length>0&&qi(s0,N,k),y0.buffers.depth.setTest(!0),y0.buffers.depth.setMask(!0),y0.buffers.color.setMask(!0),y0.setPolygonOffset(!1)}function Ra(E,N,k,V){if((k.isScene===!0?k.overrideMaterial:null)!==null)return;p.state.transmissionRenderTarget[V.id]===void 0&&(p.state.transmissionRenderTarget[V.id]=new Zt(1,1,{generateMipmaps:!0,type:z0.has("EXT_color_buffer_half_float")||z0.has("EXT_color_buffer_float")?Ft:le,minFilter:yn,samples:4,stencilBuffer:r,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:q0.workingColorSpace}));const J=p.state.transmissionRenderTarget[V.id],s0=V.viewport||C;J.setSize(s0.z*v.transmissionResolutionScale,s0.w*v.transmissionResolutionScale);const u0=v.getRenderTarget();v.setRenderTarget(J),v.getClearColor(B),G=v.getClearAlpha(),G<1&&v.setClearColor(16777215,.5),v.clear(),V0&&S0.render(k);const m0=v.toneMapping;v.toneMapping=Ue;const w0=V.viewport;if(V.viewport!==void 0&&(V.viewport=void 0),p.setupLightsView(V),e0===!0&&Q.setGlobalState(v.clippingPlanes,V),qi(E,k,V),R.updateMultisampleRenderTarget(J),R.updateRenderTargetMipmap(J),z0.has("WEBGL_multisampled_render_to_texture")===!1){let R0=!1;for(let M0=0,W0=N.length;M0<W0;M0++){const Y0=N[M0],dt=Y0.object,lt=Y0.geometry,X0=Y0.material,b0=Y0.group;if(X0.side===ie&&dt.layers.test(V.layers)){const Mt=X0.side;X0.side=Rt,X0.needsUpdate=!0,Ca(dt,k,V,lt,X0,b0),X0.side=Mt,X0.needsUpdate=!0,R0=!0}}R0===!0&&(R.updateMultisampleRenderTarget(J),R.updateRenderTargetMipmap(J))}v.setRenderTarget(u0),v.setClearColor(B,G),w0!==void 0&&(V.viewport=w0),v.toneMapping=m0}function qi(E,N,k){const V=N.isScene===!0?N.overrideMaterial:null;for(let O=0,J=E.length;O<J;O++){const s0=E[O],u0=s0.object,m0=s0.geometry,w0=V===null?s0.material:V,R0=s0.group;u0.layers.test(k.layers)&&Ca(u0,N,k,m0,w0,R0)}}function Ca(E,N,k,V,O,J){E.onBeforeRender(v,N,k,V,O,J),E.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse,E.matrixWorld),E.normalMatrix.getNormalMatrix(E.modelViewMatrix),O.onBeforeRender(v,N,k,V,E,J),O.transparent===!0&&O.side===ie&&O.forceSinglePass===!1?(O.side=Rt,O.needsUpdate=!0,v.renderBufferDirect(k,N,V,O,E,J),O.side=ve,O.needsUpdate=!0,v.renderBufferDirect(k,N,V,O,E,J),O.side=ie):v.renderBufferDirect(k,N,V,O,E,J),E.onAfterRender(v,N,k,V,O,J)}function Yi(E,N,k){N.isScene!==!0&&(N=at);const V=x0.get(E),O=p.state.lights,J=p.state.shadowsArray,s0=O.state.version,u0=v0.getParameters(E,O.state,J,N,k),m0=v0.getProgramCacheKey(u0);let w0=V.programs;V.environment=E.isMeshStandardMaterial?N.environment:null,V.fog=N.fog,V.envMap=(E.isMeshStandardMaterial?z:S).get(E.envMap||V.environment),V.envMapRotation=V.environment!==null&&E.envMap===null?N.environmentRotation:E.envMapRotation,w0===void 0&&(E.addEventListener("dispose",D0),w0=new Map,V.programs=w0);let R0=w0.get(m0);if(R0!==void 0){if(V.currentProgram===R0&&V.lightsStateVersion===s0)return Da(E,u0),R0}else u0.uniforms=v0.getUniforms(E),E.onBeforeCompile(u0,v),R0=v0.acquireProgram(u0,m0),w0.set(m0,R0),V.uniforms=u0.uniforms;const M0=V.uniforms;return(!E.isShaderMaterial&&!E.isRawShaderMaterial||E.clipping===!0)&&(M0.clippingPlanes=Q.uniform),Da(E,u0),V.needsLights=y3(E),V.lightsStateVersion=s0,V.needsLights&&(M0.ambientLightColor.value=O.state.ambient,M0.lightProbe.value=O.state.probe,M0.directionalLights.value=O.state.directional,M0.directionalLightShadows.value=O.state.directionalShadow,M0.spotLights.value=O.state.spot,M0.spotLightShadows.value=O.state.spotShadow,M0.rectAreaLights.value=O.state.rectArea,M0.ltc_1.value=O.state.rectAreaLTC1,M0.ltc_2.value=O.state.rectAreaLTC2,M0.pointLights.value=O.state.point,M0.pointLightShadows.value=O.state.pointShadow,M0.hemisphereLights.value=O.state.hemi,M0.directionalShadowMap.value=O.state.directionalShadowMap,M0.directionalShadowMatrix.value=O.state.directionalShadowMatrix,M0.spotShadowMap.value=O.state.spotShadowMap,M0.spotLightMatrix.value=O.state.spotLightMatrix,M0.spotLightMap.value=O.state.spotLightMap,M0.pointShadowMap.value=O.state.pointShadowMap,M0.pointShadowMatrix.value=O.state.pointShadowMatrix),V.currentProgram=R0,V.uniformsList=null,R0}function Pa(E){if(E.uniformsList===null){const N=E.currentProgram.getUniforms();E.uniformsList=G1.seqWithValue(N.seq,E.uniforms)}return E.uniformsList}function Da(E,N){const k=x0.get(E);k.outputColorSpace=N.outputColorSpace,k.batching=N.batching,k.batchingColor=N.batchingColor,k.instancing=N.instancing,k.instancingColor=N.instancingColor,k.instancingMorph=N.instancingMorph,k.skinning=N.skinning,k.morphTargets=N.morphTargets,k.morphNormals=N.morphNormals,k.morphColors=N.morphColors,k.morphTargetsCount=N.morphTargetsCount,k.numClippingPlanes=N.numClippingPlanes,k.numIntersection=N.numClipIntersection,k.vertexAlphas=N.vertexAlphas,k.vertexTangents=N.vertexTangents,k.toneMapping=N.toneMapping}function v3(E,N,k,V,O){N.isScene!==!0&&(N=at),R.resetTextureUnits();const J=N.fog,s0=V.isMeshStandardMaterial?N.environment:null,u0=P===null?v.outputColorSpace:P.isXRRenderTarget===!0?P.texture.colorSpace:mi,m0=(V.isMeshStandardMaterial?z:S).get(V.envMap||s0),w0=V.vertexColors===!0&&!!k.attributes.color&&k.attributes.color.itemSize===4,R0=!!k.attributes.tangent&&(!!V.normalMap||V.anisotropy>0),M0=!!k.morphAttributes.position,W0=!!k.morphAttributes.normal,Y0=!!k.morphAttributes.color;let dt=Ue;V.toneMapped&&(P===null||P.isXRRenderTarget===!0)&&(dt=v.toneMapping);const lt=k.morphAttributes.position||k.morphAttributes.normal||k.morphAttributes.color,X0=lt!==void 0?lt.length:0,b0=x0.get(V),Mt=p.state.lights;if(e0===!0&&(g0===!0||E!==M)){const Pt=E===M&&V.id===b;Q.setState(V,E,Pt)}let $0=!1;V.version===b0.__version?(b0.needsLights&&b0.lightsStateVersion!==Mt.state.version||b0.outputColorSpace!==u0||O.isBatchedMesh&&b0.batching===!1||!O.isBatchedMesh&&b0.batching===!0||O.isBatchedMesh&&b0.batchingColor===!0&&O.colorTexture===null||O.isBatchedMesh&&b0.batchingColor===!1&&O.colorTexture!==null||O.isInstancedMesh&&b0.instancing===!1||!O.isInstancedMesh&&b0.instancing===!0||O.isSkinnedMesh&&b0.skinning===!1||!O.isSkinnedMesh&&b0.skinning===!0||O.isInstancedMesh&&b0.instancingColor===!0&&O.instanceColor===null||O.isInstancedMesh&&b0.instancingColor===!1&&O.instanceColor!==null||O.isInstancedMesh&&b0.instancingMorph===!0&&O.morphTexture===null||O.isInstancedMesh&&b0.instancingMorph===!1&&O.morphTexture!==null||b0.envMap!==m0||V.fog===!0&&b0.fog!==J||b0.numClippingPlanes!==void 0&&(b0.numClippingPlanes!==Q.numPlanes||b0.numIntersection!==Q.numIntersection)||b0.vertexAlphas!==w0||b0.vertexTangents!==R0||b0.morphTargets!==M0||b0.morphNormals!==W0||b0.morphColors!==Y0||b0.toneMapping!==dt||b0.morphTargetsCount!==X0)&&($0=!0):($0=!0,b0.__version=V.version);let he=b0.currentProgram;$0===!0&&(he=Yi(V,N,O));let En=!1,Xt=!1,Si=!1;const rt=he.getUniforms(),Qt=b0.uniforms;if(y0.useProgram(he.program)&&(En=!0,Xt=!0,Si=!0),V.id!==b&&(b=V.id,Xt=!0),En||M!==E){y0.buffers.depth.getReversed()?(r0.copy(E.projectionMatrix),P5(r0),D5(r0),rt.setValue(I,"projectionMatrix",r0)):rt.setValue(I,"projectionMatrix",E.projectionMatrix),rt.setValue(I,"viewMatrix",E.matrixWorldInverse);const Ht=rt.map.cameraPosition;Ht!==void 0&&Ht.setValue(I,A0.setFromMatrixPosition(E.matrixWorld)),k0.logarithmicDepthBuffer&&rt.setValue(I,"logDepthBufFC",2/(Math.log(E.far+1)/Math.LN2)),(V.isMeshPhongMaterial||V.isMeshToonMaterial||V.isMeshLambertMaterial||V.isMeshBasicMaterial||V.isMeshStandardMaterial||V.isShaderMaterial)&&rt.setValue(I,"isOrthographic",E.isOrthographicCamera===!0),M!==E&&(M=E,Xt=!0,Si=!0)}if(O.isSkinnedMesh){rt.setOptional(I,O,"bindMatrix"),rt.setOptional(I,O,"bindMatrixInverse");const Pt=O.skeleton;Pt&&(Pt.boneTexture===null&&Pt.computeBoneTexture(),rt.setValue(I,"boneTexture",Pt.boneTexture,R))}O.isBatchedMesh&&(rt.setOptional(I,O,"batchingTexture"),rt.setValue(I,"batchingTexture",O._matricesTexture,R),rt.setOptional(I,O,"batchingIdTexture"),rt.setValue(I,"batchingIdTexture",O._indirectTexture,R),rt.setOptional(I,O,"batchingColorTexture"),O._colorsTexture!==null&&rt.setValue(I,"batchingColorTexture",O._colorsTexture,R));const te=k.morphAttributes;if((te.position!==void 0||te.normal!==void 0||te.color!==void 0)&&E0.update(O,k,he),(Xt||b0.receiveShadow!==O.receiveShadow)&&(b0.receiveShadow=O.receiveShadow,rt.setValue(I,"receiveShadow",O.receiveShadow)),V.isMeshGouraudMaterial&&V.envMap!==null&&(Qt.envMap.value=m0,Qt.flipEnvMap.value=m0.isCubeTexture&&m0.isRenderTargetTexture===!1?-1:1),V.isMeshStandardMaterial&&V.envMap===null&&N.environment!==null&&(Qt.envMapIntensity.value=N.environmentIntensity),Xt&&(rt.setValue(I,"toneMappingExposure",v.toneMappingExposure),b0.needsLights&&x3(Qt,Si),J&&V.fog===!0&&a0.refreshFogUniforms(Qt,J),a0.refreshMaterialUniforms(Qt,V,W,q,p.state.transmissionRenderTarget[E.id]),G1.upload(I,Pa(b0),Qt,R)),V.isShaderMaterial&&V.uniformsNeedUpdate===!0&&(G1.upload(I,Pa(b0),Qt,R),V.uniformsNeedUpdate=!1),V.isSpriteMaterial&&rt.setValue(I,"center",O.center),rt.setValue(I,"modelViewMatrix",O.modelViewMatrix),rt.setValue(I,"normalMatrix",O.normalMatrix),rt.setValue(I,"modelMatrix",O.matrixWorld),V.isShaderMaterial||V.isRawShaderMaterial){const Pt=V.uniformsGroups;for(let Ht=0,ls=Pt.length;Ht<ls;Ht++){const en=Pt[Ht];U.update(en,he),U.bind(en,he)}}return he}function x3(E,N){E.ambientLightColor.needsUpdate=N,E.lightProbe.needsUpdate=N,E.directionalLights.needsUpdate=N,E.directionalLightShadows.needsUpdate=N,E.pointLights.needsUpdate=N,E.pointLightShadows.needsUpdate=N,E.spotLights.needsUpdate=N,E.spotLightShadows.needsUpdate=N,E.rectAreaLights.needsUpdate=N,E.hemisphereLights.needsUpdate=N}function y3(E){return E.isMeshLambertMaterial||E.isMeshToonMaterial||E.isMeshPhongMaterial||E.isMeshStandardMaterial||E.isShadowMaterial||E.isShaderMaterial&&E.lights===!0}this.getActiveCubeFace=function(){return A},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return P},this.setRenderTargetTextures=function(E,N,k){x0.get(E.texture).__webglTexture=N,x0.get(E.depthTexture).__webglTexture=k;const V=x0.get(E);V.__hasExternalTextures=!0,V.__autoAllocateDepthBuffer=k===void 0,V.__autoAllocateDepthBuffer||z0.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),V.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(E,N){const k=x0.get(E);k.__webglFramebuffer=N,k.__useDefaultFramebuffer=N===void 0};const M3=I.createFramebuffer();this.setRenderTarget=function(E,N=0,k=0){P=E,A=N,w=k;let V=!0,O=null,J=!1,s0=!1;if(E){const m0=x0.get(E);if(m0.__useDefaultFramebuffer!==void 0)y0.bindFramebuffer(I.FRAMEBUFFER,null),V=!1;else if(m0.__webglFramebuffer===void 0)R.setupRenderTarget(E);else if(m0.__hasExternalTextures)R.rebindTextures(E,x0.get(E.texture).__webglTexture,x0.get(E.depthTexture).__webglTexture);else if(E.depthBuffer){const M0=E.depthTexture;if(m0.__boundDepthTexture!==M0){if(M0!==null&&x0.has(M0)&&(E.width!==M0.image.width||E.height!==M0.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");R.setupDepthRenderbuffer(E)}}const w0=E.texture;(w0.isData3DTexture||w0.isDataArrayTexture||w0.isCompressedArrayTexture)&&(s0=!0);const R0=x0.get(E).__webglFramebuffer;E.isWebGLCubeRenderTarget?(Array.isArray(R0[N])?O=R0[N][k]:O=R0[N],J=!0):E.samples>0&&R.useMultisampledRTT(E)===!1?O=x0.get(E).__webglMultisampledFramebuffer:Array.isArray(R0)?O=R0[k]:O=R0,C.copy(E.viewport),F.copy(E.scissor),L=E.scissorTest}else C.copy(_0).multiplyScalar(W).floor(),F.copy(N0).multiplyScalar(W).floor(),L=tt;if(k!==0&&(O=M3),y0.bindFramebuffer(I.FRAMEBUFFER,O)&&V&&y0.drawBuffers(E,O),y0.viewport(C),y0.scissor(F),y0.setScissorTest(L),J){const m0=x0.get(E.texture);I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_CUBE_MAP_POSITIVE_X+N,m0.__webglTexture,k)}else if(s0){const m0=x0.get(E.texture),w0=N;I.framebufferTextureLayer(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,m0.__webglTexture,k,w0)}else if(E!==null&&k!==0){const m0=x0.get(E.texture);I.framebufferTexture2D(I.FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,m0.__webglTexture,k)}b=-1},this.readRenderTargetPixels=function(E,N,k,V,O,J,s0){if(!(E&&E.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let u0=x0.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&s0!==void 0&&(u0=u0[s0]),u0){y0.bindFramebuffer(I.FRAMEBUFFER,u0);try{const m0=E.texture,w0=m0.format,R0=m0.type;if(!k0.textureFormatReadable(w0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(!k0.textureTypeReadable(R0)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}N>=0&&N<=E.width-V&&k>=0&&k<=E.height-O&&I.readPixels(N,k,V,O,I0.convert(w0),I0.convert(R0),J)}finally{const m0=P!==null?x0.get(P).__webglFramebuffer:null;y0.bindFramebuffer(I.FRAMEBUFFER,m0)}}},this.readRenderTargetPixelsAsync=async function(E,N,k,V,O,J,s0){if(!(E&&E.isWebGLRenderTarget))throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let u0=x0.get(E).__webglFramebuffer;if(E.isWebGLCubeRenderTarget&&s0!==void 0&&(u0=u0[s0]),u0){const m0=E.texture,w0=m0.format,R0=m0.type;if(!k0.textureFormatReadable(w0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!k0.textureTypeReadable(R0))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(N>=0&&N<=E.width-V&&k>=0&&k<=E.height-O){y0.bindFramebuffer(I.FRAMEBUFFER,u0);const M0=I.createBuffer();I.bindBuffer(I.PIXEL_PACK_BUFFER,M0),I.bufferData(I.PIXEL_PACK_BUFFER,J.byteLength,I.STREAM_READ),I.readPixels(N,k,V,O,I0.convert(w0),I0.convert(R0),0);const W0=P!==null?x0.get(P).__webglFramebuffer:null;y0.bindFramebuffer(I.FRAMEBUFFER,W0);const Y0=I.fenceSync(I.SYNC_GPU_COMMANDS_COMPLETE,0);return I.flush(),await C5(I,Y0,4),I.bindBuffer(I.PIXEL_PACK_BUFFER,M0),I.getBufferSubData(I.PIXEL_PACK_BUFFER,0,J),I.deleteBuffer(M0),I.deleteSync(Y0),J}else throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(E,N=null,k=0){E.isTexture!==!0&&(Zn("WebGLRenderer: copyFramebufferToTexture function signature has changed."),N=arguments[0]||null,E=arguments[1]);const V=Math.pow(2,-k),O=Math.floor(E.image.width*V),J=Math.floor(E.image.height*V),s0=N!==null?N.x:0,u0=N!==null?N.y:0;R.setTexture2D(E,0),I.copyTexSubImage2D(I.TEXTURE_2D,k,0,0,s0,u0,O,J),y0.unbindTexture()};const b3=I.createFramebuffer(),S3=I.createFramebuffer();this.copyTextureToTexture=function(E,N,k=null,V=null,O=0,J=null){E.isTexture!==!0&&(Zn("WebGLRenderer: copyTextureToTexture function signature has changed."),V=arguments[0]||null,E=arguments[1],N=arguments[2],J=arguments[3]||0,k=null),J===null&&(O!==0?(Zn("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."),J=O,O=0):J=0);let s0,u0,m0,w0,R0,M0,W0,Y0,dt;const lt=E.isCompressedTexture?E.mipmaps[J]:E.image;if(k!==null)s0=k.max.x-k.min.x,u0=k.max.y-k.min.y,m0=k.isBox3?k.max.z-k.min.z:1,w0=k.min.x,R0=k.min.y,M0=k.isBox3?k.min.z:0;else{const te=Math.pow(2,-O);s0=Math.floor(lt.width*te),u0=Math.floor(lt.height*te),E.isDataArrayTexture?m0=lt.depth:E.isData3DTexture?m0=Math.floor(lt.depth*te):m0=1,w0=0,R0=0,M0=0}V!==null?(W0=V.x,Y0=V.y,dt=V.z):(W0=0,Y0=0,dt=0);const X0=I0.convert(N.format),b0=I0.convert(N.type);let Mt;N.isData3DTexture?(R.setTexture3D(N,0),Mt=I.TEXTURE_3D):N.isDataArrayTexture||N.isCompressedArrayTexture?(R.setTexture2DArray(N,0),Mt=I.TEXTURE_2D_ARRAY):(R.setTexture2D(N,0),Mt=I.TEXTURE_2D),I.pixelStorei(I.UNPACK_FLIP_Y_WEBGL,N.flipY),I.pixelStorei(I.UNPACK_PREMULTIPLY_ALPHA_WEBGL,N.premultiplyAlpha),I.pixelStorei(I.UNPACK_ALIGNMENT,N.unpackAlignment);const $0=I.getParameter(I.UNPACK_ROW_LENGTH),he=I.getParameter(I.UNPACK_IMAGE_HEIGHT),En=I.getParameter(I.UNPACK_SKIP_PIXELS),Xt=I.getParameter(I.UNPACK_SKIP_ROWS),Si=I.getParameter(I.UNPACK_SKIP_IMAGES);I.pixelStorei(I.UNPACK_ROW_LENGTH,lt.width),I.pixelStorei(I.UNPACK_IMAGE_HEIGHT,lt.height),I.pixelStorei(I.UNPACK_SKIP_PIXELS,w0),I.pixelStorei(I.UNPACK_SKIP_ROWS,R0),I.pixelStorei(I.UNPACK_SKIP_IMAGES,M0);const rt=E.isDataArrayTexture||E.isData3DTexture,Qt=N.isDataArrayTexture||N.isData3DTexture;if(E.isDepthTexture){const te=x0.get(E),Pt=x0.get(N),Ht=x0.get(te.__renderTarget),ls=x0.get(Pt.__renderTarget);y0.bindFramebuffer(I.READ_FRAMEBUFFER,Ht.__webglFramebuffer),y0.bindFramebuffer(I.DRAW_FRAMEBUFFER,ls.__webglFramebuffer);for(let en=0;en<m0;en++)rt&&(I.framebufferTextureLayer(I.READ_FRAMEBUFFER,I.COLOR_ATTACHMENT0,x0.get(E).__webglTexture,O,M0+en),I.framebufferTextureLayer(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,x0.get(N).__webglTexture,J,dt+en)),I.blitFramebuffer(w0,R0,s0,u0,W0,Y0,s0,u0,I.DEPTH_BUFFER_BIT,I.NEAREST);y0.bindFramebuffer(I.READ_FRAMEBUFFER,null),y0.bindFramebuffer(I.DRAW_FRAMEBUFFER,null)}else if(O!==0||E.isRenderTargetTexture||x0.has(E)){const te=x0.get(E),Pt=x0.get(N);y0.bindFramebuffer(I.READ_FRAMEBUFFER,b3),y0.bindFramebuffer(I.DRAW_FRAMEBUFFER,S3);for(let Ht=0;Ht<m0;Ht++)rt?I.framebufferTextureLayer(I.READ_FRAMEBUFFER,I.COLOR_ATTACHMENT0,te.__webglTexture,O,M0+Ht):I.framebufferTexture2D(I.READ_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,te.__webglTexture,O),Qt?I.framebufferTextureLayer(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,Pt.__webglTexture,J,dt+Ht):I.framebufferTexture2D(I.DRAW_FRAMEBUFFER,I.COLOR_ATTACHMENT0,I.TEXTURE_2D,Pt.__webglTexture,J),O!==0?I.blitFramebuffer(w0,R0,s0,u0,W0,Y0,s0,u0,I.COLOR_BUFFER_BIT,I.NEAREST):Qt?I.copyTexSubImage3D(Mt,J,W0,Y0,dt+Ht,w0,R0,s0,u0):I.copyTexSubImage2D(Mt,J,W0,Y0,w0,R0,s0,u0);y0.bindFramebuffer(I.READ_FRAMEBUFFER,null),y0.bindFramebuffer(I.DRAW_FRAMEBUFFER,null)}else Qt?E.isDataTexture||E.isData3DTexture?I.texSubImage3D(Mt,J,W0,Y0,dt,s0,u0,m0,X0,b0,lt.data):N.isCompressedArrayTexture?I.compressedTexSubImage3D(Mt,J,W0,Y0,dt,s0,u0,m0,X0,lt.data):I.texSubImage3D(Mt,J,W0,Y0,dt,s0,u0,m0,X0,b0,lt):E.isDataTexture?I.texSubImage2D(I.TEXTURE_2D,J,W0,Y0,s0,u0,X0,b0,lt.data):E.isCompressedTexture?I.compressedTexSubImage2D(I.TEXTURE_2D,J,W0,Y0,lt.width,lt.height,X0,lt.data):I.texSubImage2D(I.TEXTURE_2D,J,W0,Y0,s0,u0,X0,b0,lt);I.pixelStorei(I.UNPACK_ROW_LENGTH,$0),I.pixelStorei(I.UNPACK_IMAGE_HEIGHT,he),I.pixelStorei(I.UNPACK_SKIP_PIXELS,En),I.pixelStorei(I.UNPACK_SKIP_ROWS,Xt),I.pixelStorei(I.UNPACK_SKIP_IMAGES,Si),J===0&&N.generateMipmaps&&I.generateMipmap(Mt),y0.unbindTexture()},this.copyTextureToTexture3D=function(E,N,k=null,V=null,O=0){return E.isTexture!==!0&&(Zn("WebGLRenderer: copyTextureToTexture3D function signature has changed."),k=arguments[0]||null,V=arguments[1]||null,E=arguments[2],N=arguments[3],O=arguments[4]||0),Zn('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(E,N,k,V,O)},this.initRenderTarget=function(E){x0.get(E).__webglFramebuffer===void 0&&R.setupRenderTarget(E)},this.initTexture=function(E){E.isCubeTexture?R.setTextureCube(E,0):E.isData3DTexture?R.setTexture3D(E,0):E.isDataArrayTexture||E.isCompressedArrayTexture?R.setTexture2DArray(E,0):R.setTexture2D(E,0),y0.unbindTexture()},this.resetState=function(){A=0,w=0,P=null,y0.reset(),et.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Fe}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorspace=q0._getDrawingBufferColorSpace(t),e.unpackColorSpace=q0._getUnpackColorSpace()}}const D2={type:"change"},pa={type:"start"},jo={type:"end"},_1=new Io,I2=new ye,tl=Math.cos(70*A5.DEG2RAD),gt=new D,Vt=2*Math.PI,Q0={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6},Hs=1e-6;class el extends g4{constructor(t,e=null){super(t,e),this.state=Q0.NONE,this.enabled=!0,this.target=new D,this.cursor=new D,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minTargetRadius=0,this.maxTargetRadius=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.keyRotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:ii.ROTATE,MIDDLE:ii.DOLLY,RIGHT:ii.PAN},this.touches={ONE:Qn.ROTATE,TWO:Qn.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this._lastPosition=new D,this._lastQuaternion=new Je,this._lastTargetPosition=new D,this._quat=new Je().setFromUnitVectors(t.up,new D(0,1,0)),this._quatInverse=this._quat.clone().invert(),this._spherical=new Gr,this._sphericalDelta=new Gr,this._scale=1,this._panOffset=new D,this._rotateStart=new f0,this._rotateEnd=new f0,this._rotateDelta=new f0,this._panStart=new f0,this._panEnd=new f0,this._panDelta=new f0,this._dollyStart=new f0,this._dollyEnd=new f0,this._dollyDelta=new f0,this._dollyDirection=new D,this._mouse=new f0,this._performCursorZoom=!1,this._pointers=[],this._pointerPositions={},this._controlActive=!1,this._onPointerMove=il.bind(this),this._onPointerDown=nl.bind(this),this._onPointerUp=sl.bind(this),this._onContextMenu=hl.bind(this),this._onMouseWheel=ol.bind(this),this._onKeyDown=ll.bind(this),this._onTouchStart=cl.bind(this),this._onTouchMove=ul.bind(this),this._onMouseDown=rl.bind(this),this._onMouseMove=al.bind(this),this._interceptControlDown=fl.bind(this),this._interceptControlUp=dl.bind(this),this.domElement!==null&&this.connect(),this.update()}connect(){this.domElement.addEventListener("pointerdown",this._onPointerDown),this.domElement.addEventListener("pointercancel",this._onPointerUp),this.domElement.addEventListener("contextmenu",this._onContextMenu),this.domElement.addEventListener("wheel",this._onMouseWheel,{passive:!1}),this.domElement.getRootNode().addEventListener("keydown",this._interceptControlDown,{passive:!0,capture:!0}),this.domElement.style.touchAction="none"}disconnect(){this.domElement.removeEventListener("pointerdown",this._onPointerDown),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.domElement.removeEventListener("pointercancel",this._onPointerUp),this.domElement.removeEventListener("wheel",this._onMouseWheel),this.domElement.removeEventListener("contextmenu",this._onContextMenu),this.stopListenToKeyEvents(),this.domElement.getRootNode().removeEventListener("keydown",this._interceptControlDown,{capture:!0}),this.domElement.style.touchAction="auto"}dispose(){this.disconnect()}getPolarAngle(){return this._spherical.phi}getAzimuthalAngle(){return this._spherical.theta}getDistance(){return this.object.position.distanceTo(this.target)}listenToKeyEvents(t){t.addEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=t}stopListenToKeyEvents(){this._domElementKeyEvents!==null&&(this._domElementKeyEvents.removeEventListener("keydown",this._onKeyDown),this._domElementKeyEvents=null)}saveState(){this.target0.copy(this.target),this.position0.copy(this.object.position),this.zoom0=this.object.zoom}reset(){this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(D2),this.update(),this.state=Q0.NONE}update(t=null){const e=this.object.position;gt.copy(e).sub(this.target),gt.applyQuaternion(this._quat),this._spherical.setFromVector3(gt),this.autoRotate&&this.state===Q0.NONE&&this._rotateLeft(this._getAutoRotationAngle(t)),this.enableDamping?(this._spherical.theta+=this._sphericalDelta.theta*this.dampingFactor,this._spherical.phi+=this._sphericalDelta.phi*this.dampingFactor):(this._spherical.theta+=this._sphericalDelta.theta,this._spherical.phi+=this._sphericalDelta.phi);let n=this.minAzimuthAngle,s=this.maxAzimuthAngle;isFinite(n)&&isFinite(s)&&(n<-Math.PI?n+=Vt:n>Math.PI&&(n-=Vt),s<-Math.PI?s+=Vt:s>Math.PI&&(s-=Vt),n<=s?this._spherical.theta=Math.max(n,Math.min(s,this._spherical.theta)):this._spherical.theta=this._spherical.theta>(n+s)/2?Math.max(n,this._spherical.theta):Math.min(s,this._spherical.theta)),this._spherical.phi=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,this._spherical.phi)),this._spherical.makeSafe(),this.enableDamping===!0?this.target.addScaledVector(this._panOffset,this.dampingFactor):this.target.add(this._panOffset),this.target.sub(this.cursor),this.target.clampLength(this.minTargetRadius,this.maxTargetRadius),this.target.add(this.cursor);let r=!1;if(this.zoomToCursor&&this._performCursorZoom||this.object.isOrthographicCamera)this._spherical.radius=this._clampDistance(this._spherical.radius);else{const a=this._spherical.radius;this._spherical.radius=this._clampDistance(this._spherical.radius*this._scale),r=a!=this._spherical.radius}if(gt.setFromSpherical(this._spherical),gt.applyQuaternion(this._quatInverse),e.copy(this.target).add(gt),this.object.lookAt(this.target),this.enableDamping===!0?(this._sphericalDelta.theta*=1-this.dampingFactor,this._sphericalDelta.phi*=1-this.dampingFactor,this._panOffset.multiplyScalar(1-this.dampingFactor)):(this._sphericalDelta.set(0,0,0),this._panOffset.set(0,0,0)),this.zoomToCursor&&this._performCursorZoom){let a=null;if(this.object.isPerspectiveCamera){const o=gt.length();a=this._clampDistance(o*this._scale);const l=o-a;this.object.position.addScaledVector(this._dollyDirection,l),this.object.updateMatrixWorld(),r=!!l}else if(this.object.isOrthographicCamera){const o=new D(this._mouse.x,this._mouse.y,0);o.unproject(this.object);const l=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),this.object.updateProjectionMatrix(),r=l!==this.object.zoom;const u=new D(this._mouse.x,this._mouse.y,0);u.unproject(this.object),this.object.position.sub(u).add(o),this.object.updateMatrixWorld(),a=gt.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),this.zoomToCursor=!1;a!==null&&(this.screenSpacePanning?this.target.set(0,0,-1).transformDirection(this.object.matrix).multiplyScalar(a).add(this.object.position):(_1.origin.copy(this.object.position),_1.direction.set(0,0,-1).transformDirection(this.object.matrix),Math.abs(this.object.up.dot(_1.direction))<tl?this.object.lookAt(this.target):(I2.setFromNormalAndCoplanarPoint(this.object.up,this.target),_1.intersectPlane(I2,this.target))))}else if(this.object.isOrthographicCamera){const a=this.object.zoom;this.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/this._scale)),a!==this.object.zoom&&(this.object.updateProjectionMatrix(),r=!0)}return this._scale=1,this._performCursorZoom=!1,r||this._lastPosition.distanceToSquared(this.object.position)>Hs||8*(1-this._lastQuaternion.dot(this.object.quaternion))>Hs||this._lastTargetPosition.distanceToSquared(this.target)>Hs?(this.dispatchEvent(D2),this._lastPosition.copy(this.object.position),this._lastQuaternion.copy(this.object.quaternion),this._lastTargetPosition.copy(this.target),!0):!1}_getAutoRotationAngle(t){return t!==null?Vt/60*this.autoRotateSpeed*t:Vt/60/60*this.autoRotateSpeed}_getZoomScale(t){const e=Math.abs(t*.01);return Math.pow(.95,this.zoomSpeed*e)}_rotateLeft(t){this._sphericalDelta.theta-=t}_rotateUp(t){this._sphericalDelta.phi-=t}_panLeft(t,e){gt.setFromMatrixColumn(e,0),gt.multiplyScalar(-t),this._panOffset.add(gt)}_panUp(t,e){this.screenSpacePanning===!0?gt.setFromMatrixColumn(e,1):(gt.setFromMatrixColumn(e,0),gt.crossVectors(this.object.up,gt)),gt.multiplyScalar(t),this._panOffset.add(gt)}_pan(t,e){const n=this.domElement;if(this.object.isPerspectiveCamera){const s=this.object.position;gt.copy(s).sub(this.target);let r=gt.length();r*=Math.tan(this.object.fov/2*Math.PI/180),this._panLeft(2*t*r/n.clientHeight,this.object.matrix),this._panUp(2*e*r/n.clientHeight,this.object.matrix)}else this.object.isOrthographicCamera?(this._panLeft(t*(this.object.right-this.object.left)/this.object.zoom/n.clientWidth,this.object.matrix),this._panUp(e*(this.object.top-this.object.bottom)/this.object.zoom/n.clientHeight,this.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),this.enablePan=!1)}_dollyOut(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale/=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_dollyIn(t){this.object.isPerspectiveCamera||this.object.isOrthographicCamera?this._scale*=t:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),this.enableZoom=!1)}_updateZoomParameters(t,e){if(!this.zoomToCursor)return;this._performCursorZoom=!0;const n=this.domElement.getBoundingClientRect(),s=t-n.left,r=e-n.top,a=n.width,o=n.height;this._mouse.x=s/a*2-1,this._mouse.y=-(r/o)*2+1,this._dollyDirection.set(this._mouse.x,this._mouse.y,1).unproject(this.object).sub(this.object.position).normalize()}_clampDistance(t){return Math.max(this.minDistance,Math.min(this.maxDistance,t))}_handleMouseDownRotate(t){this._rotateStart.set(t.clientX,t.clientY)}_handleMouseDownDolly(t){this._updateZoomParameters(t.clientX,t.clientX),this._dollyStart.set(t.clientX,t.clientY)}_handleMouseDownPan(t){this._panStart.set(t.clientX,t.clientY)}_handleMouseMoveRotate(t){this._rotateEnd.set(t.clientX,t.clientY),this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Vt*this._rotateDelta.x/e.clientHeight),this._rotateUp(Vt*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd),this.update()}_handleMouseMoveDolly(t){this._dollyEnd.set(t.clientX,t.clientY),this._dollyDelta.subVectors(this._dollyEnd,this._dollyStart),this._dollyDelta.y>0?this._dollyOut(this._getZoomScale(this._dollyDelta.y)):this._dollyDelta.y<0&&this._dollyIn(this._getZoomScale(this._dollyDelta.y)),this._dollyStart.copy(this._dollyEnd),this.update()}_handleMouseMovePan(t){this._panEnd.set(t.clientX,t.clientY),this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd),this.update()}_handleMouseWheel(t){this._updateZoomParameters(t.clientX,t.clientY),t.deltaY<0?this._dollyIn(this._getZoomScale(t.deltaY)):t.deltaY>0&&this._dollyOut(this._getZoomScale(t.deltaY)),this.update()}_handleKeyDown(t){let e=!1;switch(t.code){case this.keys.UP:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(Vt*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,this.keyPanSpeed),e=!0;break;case this.keys.BOTTOM:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateUp(-Vt*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(0,-this.keyPanSpeed),e=!0;break;case this.keys.LEFT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(Vt*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(this.keyPanSpeed,0),e=!0;break;case this.keys.RIGHT:t.ctrlKey||t.metaKey||t.shiftKey?this.enableRotate&&this._rotateLeft(-Vt*this.keyRotateSpeed/this.domElement.clientHeight):this.enablePan&&this._pan(-this.keyPanSpeed,0),e=!0;break}e&&(t.preventDefault(),this.update())}_handleTouchStartRotate(t){if(this._pointers.length===1)this._rotateStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._rotateStart.set(n,s)}}_handleTouchStartPan(t){if(this._pointers.length===1)this._panStart.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._panStart.set(n,s)}}_handleTouchStartDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,s=t.pageY-e.y,r=Math.sqrt(n*n+s*s);this._dollyStart.set(0,r)}_handleTouchStartDollyPan(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enablePan&&this._handleTouchStartPan(t)}_handleTouchStartDollyRotate(t){this.enableZoom&&this._handleTouchStartDolly(t),this.enableRotate&&this._handleTouchStartRotate(t)}_handleTouchMoveRotate(t){if(this._pointers.length==1)this._rotateEnd.set(t.pageX,t.pageY);else{const n=this._getSecondPointerPosition(t),s=.5*(t.pageX+n.x),r=.5*(t.pageY+n.y);this._rotateEnd.set(s,r)}this._rotateDelta.subVectors(this._rotateEnd,this._rotateStart).multiplyScalar(this.rotateSpeed);const e=this.domElement;this._rotateLeft(Vt*this._rotateDelta.x/e.clientHeight),this._rotateUp(Vt*this._rotateDelta.y/e.clientHeight),this._rotateStart.copy(this._rotateEnd)}_handleTouchMovePan(t){if(this._pointers.length===1)this._panEnd.set(t.pageX,t.pageY);else{const e=this._getSecondPointerPosition(t),n=.5*(t.pageX+e.x),s=.5*(t.pageY+e.y);this._panEnd.set(n,s)}this._panDelta.subVectors(this._panEnd,this._panStart).multiplyScalar(this.panSpeed),this._pan(this._panDelta.x,this._panDelta.y),this._panStart.copy(this._panEnd)}_handleTouchMoveDolly(t){const e=this._getSecondPointerPosition(t),n=t.pageX-e.x,s=t.pageY-e.y,r=Math.sqrt(n*n+s*s);this._dollyEnd.set(0,r),this._dollyDelta.set(0,Math.pow(this._dollyEnd.y/this._dollyStart.y,this.zoomSpeed)),this._dollyOut(this._dollyDelta.y),this._dollyStart.copy(this._dollyEnd);const a=(t.pageX+e.x)*.5,o=(t.pageY+e.y)*.5;this._updateZoomParameters(a,o)}_handleTouchMoveDollyPan(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enablePan&&this._handleTouchMovePan(t)}_handleTouchMoveDollyRotate(t){this.enableZoom&&this._handleTouchMoveDolly(t),this.enableRotate&&this._handleTouchMoveRotate(t)}_addPointer(t){this._pointers.push(t.pointerId)}_removePointer(t){delete this._pointerPositions[t.pointerId];for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId){this._pointers.splice(e,1);return}}_isTrackingPointer(t){for(let e=0;e<this._pointers.length;e++)if(this._pointers[e]==t.pointerId)return!0;return!1}_trackPointer(t){let e=this._pointerPositions[t.pointerId];e===void 0&&(e=new f0,this._pointerPositions[t.pointerId]=e),e.set(t.pageX,t.pageY)}_getSecondPointerPosition(t){const e=t.pointerId===this._pointers[0]?this._pointers[1]:this._pointers[0];return this._pointerPositions[e]}_customWheelEvent(t){const e=t.deltaMode,n={clientX:t.clientX,clientY:t.clientY,deltaY:t.deltaY};switch(e){case 1:n.deltaY*=16;break;case 2:n.deltaY*=100;break}return t.ctrlKey&&!this._controlActive&&(n.deltaY*=10),n}}function nl(i){this.enabled!==!1&&(this._pointers.length===0&&(this.domElement.setPointerCapture(i.pointerId),this.domElement.addEventListener("pointermove",this._onPointerMove),this.domElement.addEventListener("pointerup",this._onPointerUp)),!this._isTrackingPointer(i)&&(this._addPointer(i),i.pointerType==="touch"?this._onTouchStart(i):this._onMouseDown(i)))}function il(i){this.enabled!==!1&&(i.pointerType==="touch"?this._onTouchMove(i):this._onMouseMove(i))}function sl(i){switch(this._removePointer(i),this._pointers.length){case 0:this.domElement.releasePointerCapture(i.pointerId),this.domElement.removeEventListener("pointermove",this._onPointerMove),this.domElement.removeEventListener("pointerup",this._onPointerUp),this.dispatchEvent(jo),this.state=Q0.NONE;break;case 1:const t=this._pointers[0],e=this._pointerPositions[t];this._onTouchStart({pointerId:t,pageX:e.x,pageY:e.y});break}}function rl(i){let t;switch(i.button){case 0:t=this.mouseButtons.LEFT;break;case 1:t=this.mouseButtons.MIDDLE;break;case 2:t=this.mouseButtons.RIGHT;break;default:t=-1}switch(t){case ii.DOLLY:if(this.enableZoom===!1)return;this._handleMouseDownDolly(i),this.state=Q0.DOLLY;break;case ii.ROTATE:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Q0.PAN}else{if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Q0.ROTATE}break;case ii.PAN:if(i.ctrlKey||i.metaKey||i.shiftKey){if(this.enableRotate===!1)return;this._handleMouseDownRotate(i),this.state=Q0.ROTATE}else{if(this.enablePan===!1)return;this._handleMouseDownPan(i),this.state=Q0.PAN}break;default:this.state=Q0.NONE}this.state!==Q0.NONE&&this.dispatchEvent(pa)}function al(i){switch(this.state){case Q0.ROTATE:if(this.enableRotate===!1)return;this._handleMouseMoveRotate(i);break;case Q0.DOLLY:if(this.enableZoom===!1)return;this._handleMouseMoveDolly(i);break;case Q0.PAN:if(this.enablePan===!1)return;this._handleMouseMovePan(i);break}}function ol(i){this.enabled===!1||this.enableZoom===!1||this.state!==Q0.NONE||(i.preventDefault(),this.dispatchEvent(pa),this._handleMouseWheel(this._customWheelEvent(i)),this.dispatchEvent(jo))}function ll(i){this.enabled!==!1&&this._handleKeyDown(i)}function cl(i){switch(this._trackPointer(i),this._pointers.length){case 1:switch(this.touches.ONE){case Qn.ROTATE:if(this.enableRotate===!1)return;this._handleTouchStartRotate(i),this.state=Q0.TOUCH_ROTATE;break;case Qn.PAN:if(this.enablePan===!1)return;this._handleTouchStartPan(i),this.state=Q0.TOUCH_PAN;break;default:this.state=Q0.NONE}break;case 2:switch(this.touches.TWO){case Qn.DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchStartDollyPan(i),this.state=Q0.TOUCH_DOLLY_PAN;break;case Qn.DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchStartDollyRotate(i),this.state=Q0.TOUCH_DOLLY_ROTATE;break;default:this.state=Q0.NONE}break;default:this.state=Q0.NONE}this.state!==Q0.NONE&&this.dispatchEvent(pa)}function ul(i){switch(this._trackPointer(i),this.state){case Q0.TOUCH_ROTATE:if(this.enableRotate===!1)return;this._handleTouchMoveRotate(i),this.update();break;case Q0.TOUCH_PAN:if(this.enablePan===!1)return;this._handleTouchMovePan(i),this.update();break;case Q0.TOUCH_DOLLY_PAN:if(this.enableZoom===!1&&this.enablePan===!1)return;this._handleTouchMoveDollyPan(i),this.update();break;case Q0.TOUCH_DOLLY_ROTATE:if(this.enableZoom===!1&&this.enableRotate===!1)return;this._handleTouchMoveDollyRotate(i),this.update();break;default:this.state=Q0.NONE}}function hl(i){this.enabled!==!1&&i.preventDefault()}function fl(i){i.key==="Control"&&(this._controlActive=!0,this.domElement.getRootNode().addEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}function dl(i){i.key==="Control"&&(this._controlActive=!1,this.domElement.getRootNode().removeEventListener("keyup",this._interceptControlUp,{passive:!0,capture:!0}))}const Ko=0,pl=1,Zo=2,L2=2,Vs=1.25,F2=1,Ze=6*4+4+4,ss=65535,ml=Math.pow(2,-24),Gs=Symbol("SKIP_GENERATION");function Jo(i){return i.index?i.index.count:i.attributes.position.count}function bi(i){return Jo(i)/3}function Qo(i,t=ArrayBuffer){return i>65535?new Uint32Array(new t(4*i)):new Uint16Array(new t(2*i))}function gl(i,t){if(!i.index){const e=i.attributes.position.count,n=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer,s=Qo(e,n);i.setIndex(new ut(s,1));for(let r=0;r<e;r++)s[r]=r}}function t3(i,t){const e=bi(i),n=t||i.drawRange,s=n.start/3,r=(n.start+n.count)/3,a=Math.max(0,s),o=Math.min(e,r)-a;return[{offset:Math.floor(a),count:Math.floor(o)}]}function e3(i,t){if(!i.groups||!i.groups.length)return t3(i,t);const e=[],n=new Set,s=t||i.drawRange,r=s.start/3,a=(s.start+s.count)/3;for(const l of i.groups){const u=l.start/3,h=(l.start+l.count)/3;n.add(Math.max(r,u)),n.add(Math.min(a,h))}const o=Array.from(n.values()).sort((l,u)=>l-u);for(let l=0;l<o.length-1;l++){const u=o[l],h=o[l+1];e.push({offset:Math.floor(u),count:Math.floor(h-u)})}return e}function _l(i,t){const e=bi(i),n=e3(i,t).sort((a,o)=>a.offset-o.offset),s=n[n.length-1];s.count=Math.min(e-s.offset,s.count);let r=0;return n.forEach(({count:a})=>r+=a),e!==r}function Ws(i,t,e,n,s){let r=1/0,a=1/0,o=1/0,l=-1/0,u=-1/0,h=-1/0,f=1/0,c=1/0,m=1/0,g=-1/0,_=-1/0,d=-1/0;for(let p=t*6,x=(t+e)*6;p<x;p+=6){const y=i[p+0],v=i[p+1],T=y-v,A=y+v;T<r&&(r=T),A>l&&(l=A),y<f&&(f=y),y>g&&(g=y);const w=i[p+2],P=i[p+3],b=w-P,M=w+P;b<a&&(a=b),M>u&&(u=M),w<c&&(c=w),w>_&&(_=w);const C=i[p+4],F=i[p+5],L=C-F,B=C+F;L<o&&(o=L),B>h&&(h=B),C<m&&(m=C),C>d&&(d=C)}n[0]=r,n[1]=a,n[2]=o,n[3]=l,n[4]=u,n[5]=h,s[0]=f,s[1]=c,s[2]=m,s[3]=g,s[4]=_,s[5]=d}function vl(i,t=null,e=null,n=null){const s=i.attributes.position,r=i.index?i.index.array:null,a=bi(i),o=s.normalized;let l;t===null?(l=new Float32Array(a*6),e=0,n=a):(l=t,e=e||0,n=n||a);const u=s.array,h=s.offset||0;let f=3;s.isInterleavedBufferAttribute&&(f=s.data.stride);const c=["getX","getY","getZ"];for(let m=e;m<e+n;m++){const g=m*3,_=m*6;let d=g+0,p=g+1,x=g+2;r&&(d=r[d],p=r[p],x=r[x]),o||(d=d*f+h,p=p*f+h,x=x*f+h);for(let y=0;y<3;y++){let v,T,A;o?(v=s[c[y]](d),T=s[c[y]](p),A=s[c[y]](x)):(v=u[d+y],T=u[p+y],A=u[x+y]);let w=v;T<w&&(w=T),A<w&&(w=A);let P=v;T>P&&(P=T),A>P&&(P=A);const b=(P-w)/2,M=y*2;l[_+M+0]=w+b,l[_+M+1]=b+(Math.abs(w)+b)*ml}}return l}function ct(i,t,e){return e.min.x=t[i],e.min.y=t[i+1],e.min.z=t[i+2],e.max.x=t[i+3],e.max.y=t[i+4],e.max.z=t[i+5],e}function U2(i){let t=-1,e=-1/0;for(let n=0;n<3;n++){const s=i[n+3]-i[n];s>e&&(e=s,t=n)}return t}function N2(i,t){t.set(i)}function O2(i,t,e){let n,s;for(let r=0;r<3;r++){const a=r+3;n=i[r],s=t[r],e[r]=n<s?n:s,n=i[a],s=t[a],e[a]=n>s?n:s}}function v1(i,t,e){for(let n=0;n<3;n++){const s=t[i+2*n],r=t[i+2*n+1],a=s-r,o=s+r;a<e[n]&&(e[n]=a),o>e[n+3]&&(e[n+3]=o)}}function Ri(i){const t=i[3]-i[0],e=i[4]-i[1],n=i[5]-i[2];return 2*(t*e+e*n+n*t)}const De=32,xl=(i,t)=>i.candidate-t.candidate,qe=new Array(De).fill().map(()=>({count:0,bounds:new Float32Array(6),rightCacheBounds:new Float32Array(6),leftCacheBounds:new Float32Array(6),candidate:0})),x1=new Float32Array(6);function yl(i,t,e,n,s,r){let a=-1,o=0;if(r===Ko)a=U2(t),a!==-1&&(o=(t[a]+t[a+3])/2);else if(r===pl)a=U2(i),a!==-1&&(o=Ml(e,n,s,a));else if(r===Zo){const l=Ri(i);let u=Vs*s;const h=n*6,f=(n+s)*6;for(let c=0;c<3;c++){const m=t[c],d=(t[c+3]-m)/De;if(s<De/4){const p=[...qe];p.length=s;let x=0;for(let v=h;v<f;v+=6,x++){const T=p[x];T.candidate=e[v+2*c],T.count=0;const{bounds:A,leftCacheBounds:w,rightCacheBounds:P}=T;for(let b=0;b<3;b++)P[b]=1/0,P[b+3]=-1/0,w[b]=1/0,w[b+3]=-1/0,A[b]=1/0,A[b+3]=-1/0;v1(v,e,A)}p.sort(xl);let y=s;for(let v=0;v<y;v++){const T=p[v];for(;v+1<y&&p[v+1].candidate===T.candidate;)p.splice(v+1,1),y--}for(let v=h;v<f;v+=6){const T=e[v+2*c];for(let A=0;A<y;A++){const w=p[A];T>=w.candidate?v1(v,e,w.rightCacheBounds):(v1(v,e,w.leftCacheBounds),w.count++)}}for(let v=0;v<y;v++){const T=p[v],A=T.count,w=s-T.count,P=T.leftCacheBounds,b=T.rightCacheBounds;let M=0;A!==0&&(M=Ri(P)/l);let C=0;w!==0&&(C=Ri(b)/l);const F=F2+Vs*(M*A+C*w);F<u&&(a=c,u=F,o=T.candidate)}}else{for(let y=0;y<De;y++){const v=qe[y];v.count=0,v.candidate=m+d+y*d;const T=v.bounds;for(let A=0;A<3;A++)T[A]=1/0,T[A+3]=-1/0}for(let y=h;y<f;y+=6){let A=~~((e[y+2*c]-m)/d);A>=De&&(A=De-1);const w=qe[A];w.count++,v1(y,e,w.bounds)}const p=qe[De-1];N2(p.bounds,p.rightCacheBounds);for(let y=De-2;y>=0;y--){const v=qe[y],T=qe[y+1];O2(v.bounds,T.rightCacheBounds,v.rightCacheBounds)}let x=0;for(let y=0;y<De-1;y++){const v=qe[y],T=v.count,A=v.bounds,P=qe[y+1].rightCacheBounds;T!==0&&(x===0?N2(A,x1):O2(A,x1,x1)),x+=T;let b=0,M=0;x!==0&&(b=Ri(x1)/l);const C=s-x;C!==0&&(M=Ri(P)/l);const F=F2+Vs*(b*x+M*C);F<u&&(a=c,u=F,o=v.candidate)}}}}else console.warn(`MeshBVH: Invalid build strategy value ${r} used.`);return{axis:a,pos:o}}function Ml(i,t,e,n){let s=0;for(let r=t,a=t+e;r<a;r++)s+=i[r*6+n*2];return s/e}class Xs{constructor(){this.boundingData=new Float32Array(6)}}function bl(i,t,e,n,s,r){let a=n,o=n+s-1;const l=r.pos,u=r.axis*2;for(;;){for(;a<=o&&e[a*6+u]<l;)a++;for(;a<=o&&e[o*6+u]>=l;)o--;if(a<o){for(let h=0;h<3;h++){let f=t[a*3+h];t[a*3+h]=t[o*3+h],t[o*3+h]=f}for(let h=0;h<6;h++){let f=e[a*6+h];e[a*6+h]=e[o*6+h],e[o*6+h]=f}a++,o--}else return a}}function Sl(i,t,e,n,s,r){let a=n,o=n+s-1;const l=r.pos,u=r.axis*2;for(;;){for(;a<=o&&e[a*6+u]<l;)a++;for(;a<=o&&e[o*6+u]>=l;)o--;if(a<o){let h=i[a];i[a]=i[o],i[o]=h;for(let f=0;f<6;f++){let c=e[a*6+f];e[a*6+f]=e[o*6+f],e[o*6+f]=c}a++,o--}else return a}}function Ut(i,t){return t[i+15]===65535}function Wt(i,t){return t[i+6]}function $t(i,t){return t[i+14]}function se(i){return i+8}function jt(i,t){return t[i+6]}function ma(i,t){return t[i+7]}let n3,Ni,W1,i3;const Tl=Math.pow(2,32);function Xr(i){return"count"in i?1:1+Xr(i.left)+Xr(i.right)}function El(i,t,e){return n3=new Float32Array(e),Ni=new Uint32Array(e),W1=new Uint16Array(e),i3=new Uint8Array(e),qr(i,t)}function qr(i,t){const e=i/4,n=i/2,s="count"in t,r=t.boundingData;for(let a=0;a<6;a++)n3[e+a]=r[a];if(s)if(t.buffer){const a=t.buffer;i3.set(new Uint8Array(a),i);for(let o=i,l=i+a.byteLength;o<l;o+=Ze){const u=o/2;Ut(u,W1)||(Ni[o/4+6]+=e)}return i+a.byteLength}else{const a=t.offset,o=t.count;return Ni[e+6]=a,W1[n+14]=o,W1[n+15]=ss,i+Ze}else{const a=t.left,o=t.right,l=t.splitAxis;let u;if(u=qr(i+Ze,a),u/4>Tl)throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");return Ni[e+6]=u/4,u=qr(u,o),Ni[e+7]=l,u}}function wl(i,t){const e=(i.index?i.index.count:i.attributes.position.count)/3,n=e>2**16,s=n?4:2,r=t?new SharedArrayBuffer(e*s):new ArrayBuffer(e*s),a=n?new Uint32Array(r):new Uint16Array(r);for(let o=0,l=a.length;o<l;o++)a[o]=o;return a}function Al(i,t,e,n,s){const{maxDepth:r,verbose:a,maxLeafTris:o,strategy:l,onProgress:u,indirect:h}=s,f=i._indirectBuffer,c=i.geometry,m=c.index?c.index.array:null,g=h?Sl:bl,_=bi(c),d=new Float32Array(6);let p=!1;const x=new Xs;return Ws(t,e,n,x.boundingData,d),v(x,e,n,d),x;function y(T){u&&u(T/_)}function v(T,A,w,P=null,b=0){if(!p&&b>=r&&(p=!0,a&&(console.warn(`MeshBVH: Max depth of ${r} reached when generating BVH. Consider increasing maxDepth.`),console.warn(c))),w<=o||b>=r)return y(A+w),T.offset=A,T.count=w,T;const M=yl(T.boundingData,P,t,A,w,l);if(M.axis===-1)return y(A+w),T.offset=A,T.count=w,T;const C=g(f,m,t,A,w,M);if(C===A||C===A+w)y(A+w),T.offset=A,T.count=w;else{T.splitAxis=M.axis;const F=new Xs,L=A,B=C-A;T.left=F,Ws(t,L,B,F.boundingData,d),v(F,L,B,d,b+1);const G=new Xs,H=C,q=w-B;T.right=G,Ws(t,H,q,G.boundingData,d),v(G,H,q,d,b+1)}return T}}function Rl(i,t){const e=i.geometry;t.indirect&&(i._indirectBuffer=wl(e,t.useSharedArrayBuffer),_l(e,t.range)&&!t.verbose&&console.warn('MeshBVH: Provided geometry contains groups or a range that do not fully span the vertex contents while using the "indirect" option. BVH may incorrectly report intersections on unrendered portions of the geometry.')),i._indirectBuffer||gl(e,t);const n=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer,s=vl(e),r=t.indirect?t3(e,t.range):e3(e,t.range);i._roots=r.map(a=>{const o=Al(i,s,a.offset,a.count,t),l=Xr(o),u=new n(Ze*l);return El(0,o,u),u})}class Be{constructor(){this.min=1/0,this.max=-1/0}setFromPointsField(t,e){let n=1/0,s=-1/0;for(let r=0,a=t.length;r<a;r++){const l=t[r][e];n=l<n?l:n,s=l>s?l:s}this.min=n,this.max=s}setFromPoints(t,e){let n=1/0,s=-1/0;for(let r=0,a=e.length;r<a;r++){const o=e[r],l=t.dot(o);n=l<n?l:n,s=l>s?l:s}this.min=n,this.max=s}isSeparated(t){return this.min>t.max||t.min>this.max}}Be.prototype.setFromBox=function(){const i=new D;return function(e,n){const s=n.min,r=n.max;let a=1/0,o=-1/0;for(let l=0;l<=1;l++)for(let u=0;u<=1;u++)for(let h=0;h<=1;h++){i.x=s.x*l+r.x*(1-l),i.y=s.y*u+r.y*(1-u),i.z=s.z*h+r.z*(1-h);const f=e.dot(i);a=Math.min(f,a),o=Math.max(f,o)}this.min=a,this.max=o}}();const Cl=function(){const i=new D,t=new D,e=new D;return function(s,r,a){const o=s.start,l=i,u=r.start,h=t;e.subVectors(o,u),i.subVectors(s.end,s.start),t.subVectors(r.end,r.start);const f=e.dot(h),c=h.dot(l),m=h.dot(h),g=e.dot(l),d=l.dot(l)*m-c*c;let p,x;d!==0?p=(f*c-g*m)/d:p=0,x=(f+p*c)/m,a.x=p,a.y=x}}(),ga=function(){const i=new f0,t=new D,e=new D;return function(s,r,a,o){Cl(s,r,i);let l=i.x,u=i.y;if(l>=0&&l<=1&&u>=0&&u<=1){s.at(l,a),r.at(u,o);return}else if(l>=0&&l<=1){u<0?r.at(0,o):r.at(1,o),s.closestPointToPoint(o,!0,a);return}else if(u>=0&&u<=1){l<0?s.at(0,a):s.at(1,a),r.closestPointToPoint(a,!0,o);return}else{let h;l<0?h=s.start:h=s.end;let f;u<0?f=r.start:f=r.end;const c=t,m=e;if(s.closestPointToPoint(f,!0,t),r.closestPointToPoint(h,!0,e),c.distanceToSquared(f)<=m.distanceToSquared(h)){a.copy(c),o.copy(f);return}else{a.copy(h),o.copy(m);return}}}}(),Pl=function(){const i=new D,t=new D,e=new ye,n=new Oe;return function(r,a){const{radius:o,center:l}=r,{a:u,b:h,c:f}=a;if(n.start=u,n.end=h,n.closestPointToPoint(l,!0,i).distanceTo(l)<=o||(n.start=u,n.end=f,n.closestPointToPoint(l,!0,i).distanceTo(l)<=o)||(n.start=h,n.end=f,n.closestPointToPoint(l,!0,i).distanceTo(l)<=o))return!0;const _=a.getPlane(e);if(Math.abs(_.distanceToPoint(l))<=o){const p=_.projectPoint(l,t);if(a.containsPoint(p))return!0}return!1}}(),Dl=1e-15;function qs(i){return Math.abs(i)<Dl}class xe extends bt{constructor(...t){super(...t),this.isExtendedTriangle=!0,this.satAxes=new Array(4).fill().map(()=>new D),this.satBounds=new Array(4).fill().map(()=>new Be),this.points=[this.a,this.b,this.c],this.sphere=new es,this.plane=new ye,this.needsUpdate=!0}intersectsSphere(t){return Pl(t,this)}update(){const t=this.a,e=this.b,n=this.c,s=this.points,r=this.satAxes,a=this.satBounds,o=r[0],l=a[0];this.getNormal(o),l.setFromPoints(o,s);const u=r[1],h=a[1];u.subVectors(t,e),h.setFromPoints(u,s);const f=r[2],c=a[2];f.subVectors(e,n),c.setFromPoints(f,s);const m=r[3],g=a[3];m.subVectors(n,t),g.setFromPoints(m,s),this.sphere.setFromPoints(this.points),this.plane.setFromNormalAndCoplanarPoint(o,t),this.needsUpdate=!1}}xe.prototype.closestPointToSegment=function(){const i=new D,t=new D,e=new Oe;return function(s,r=null,a=null){const{start:o,end:l}=s,u=this.points;let h,f=1/0;for(let c=0;c<3;c++){const m=(c+1)%3;e.start.copy(u[c]),e.end.copy(u[m]),ga(e,s,i,t),h=i.distanceToSquared(t),h<f&&(f=h,r&&r.copy(i),a&&a.copy(t))}return this.closestPointToPoint(o,i),h=o.distanceToSquared(i),h<f&&(f=h,r&&r.copy(i),a&&a.copy(o)),this.closestPointToPoint(l,i),h=l.distanceToSquared(i),h<f&&(f=h,r&&r.copy(i),a&&a.copy(l)),Math.sqrt(f)}}();xe.prototype.intersectsTriangle=function(){const i=new xe,t=new Array(3),e=new Array(3),n=new Be,s=new Be,r=new D,a=new D,o=new D,l=new D,u=new D,h=new Oe,f=new Oe,c=new Oe,m=new D;function g(_,d,p){const x=_.points;let y=0,v=-1;for(let T=0;T<3;T++){const{start:A,end:w}=h;A.copy(x[T]),w.copy(x[(T+1)%3]),h.delta(a);const P=qs(d.distanceToPoint(A));if(qs(d.normal.dot(a))&&P){p.copy(h),y=2;break}const b=d.intersectLine(h,m);if(!b&&P&&m.copy(A),(b||P)&&!qs(m.distanceTo(w))){if(y<=1)(y===1?p.start:p.end).copy(m),P&&(v=y);else if(y>=2){(v===1?p.start:p.end).copy(m),y=2;break}if(y++,y===2&&v===-1)break}}return y}return function(d,p=null,x=!1){this.needsUpdate&&this.update(),d.isExtendedTriangle?d.needsUpdate&&d.update():(i.copy(d),i.update(),d=i);const y=this.plane,v=d.plane;if(Math.abs(y.normal.dot(v.normal))>1-1e-10){const T=this.satBounds,A=this.satAxes;e[0]=d.a,e[1]=d.b,e[2]=d.c;for(let b=0;b<4;b++){const M=T[b],C=A[b];if(n.setFromPoints(C,e),M.isSeparated(n))return!1}const w=d.satBounds,P=d.satAxes;t[0]=this.a,t[1]=this.b,t[2]=this.c;for(let b=0;b<4;b++){const M=w[b],C=P[b];if(n.setFromPoints(C,t),M.isSeparated(n))return!1}for(let b=0;b<4;b++){const M=A[b];for(let C=0;C<4;C++){const F=P[C];if(r.crossVectors(M,F),n.setFromPoints(r,t),s.setFromPoints(r,e),n.isSeparated(s))return!1}}return p&&(x||console.warn("ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0."),p.start.set(0,0,0),p.end.set(0,0,0)),!0}else{const T=g(this,v,f);if(T===1&&d.containsPoint(f.end))return p&&(p.start.copy(f.end),p.end.copy(f.end)),!0;if(T!==2)return!1;const A=g(d,y,c);if(A===1&&this.containsPoint(c.end))return p&&(p.start.copy(c.end),p.end.copy(c.end)),!0;if(A!==2)return!1;if(f.delta(o),c.delta(l),o.dot(l)<0){let L=c.start;c.start=c.end,c.end=L}const w=f.start.dot(o),P=f.end.dot(o),b=c.start.dot(o),M=c.end.dot(o),C=P<b,F=w<M;return w!==M&&b!==P&&C===F?!1:(p&&(u.subVectors(f.start,c.start),u.dot(o)>0?p.start.copy(f.start):p.start.copy(c.start),u.subVectors(f.end,c.end),u.dot(o)<0?p.end.copy(f.end):p.end.copy(c.end)),!0)}}}();xe.prototype.distanceToPoint=function(){const i=new D;return function(e){return this.closestPointToPoint(e,i),e.distanceTo(i)}}();xe.prototype.distanceToTriangle=function(){const i=new D,t=new D,e=["a","b","c"],n=new Oe,s=new Oe;return function(a,o=null,l=null){const u=o||l?n:null;if(this.intersectsTriangle(a,u))return(o||l)&&(o&&u.getCenter(o),l&&u.getCenter(l)),0;let h=1/0;for(let f=0;f<3;f++){let c;const m=e[f],g=a[m];this.closestPointToPoint(g,i),c=g.distanceToSquared(i),c<h&&(h=c,o&&o.copy(i),l&&l.copy(g));const _=this[m];a.closestPointToPoint(_,i),c=_.distanceToSquared(i),c<h&&(h=c,o&&o.copy(_),l&&l.copy(i))}for(let f=0;f<3;f++){const c=e[f],m=e[(f+1)%3];n.set(this[c],this[m]);for(let g=0;g<3;g++){const _=e[g],d=e[(g+1)%3];s.set(a[_],a[d]),ga(n,s,i,t);const p=i.distanceToSquared(t);p<h&&(h=p,o&&o.copy(i),l&&l.copy(t))}}return Math.sqrt(h)}}();class zt{constructor(t,e,n){this.isOrientedBox=!0,this.min=new D,this.max=new D,this.matrix=new U0,this.invMatrix=new U0,this.points=new Array(8).fill().map(()=>new D),this.satAxes=new Array(3).fill().map(()=>new D),this.satBounds=new Array(3).fill().map(()=>new Be),this.alignedSatBounds=new Array(3).fill().map(()=>new Be),this.needsUpdate=!1,t&&this.min.copy(t),e&&this.max.copy(e),n&&this.matrix.copy(n)}set(t,e,n){this.min.copy(t),this.max.copy(e),this.matrix.copy(n),this.needsUpdate=!0}copy(t){this.min.copy(t.min),this.max.copy(t.max),this.matrix.copy(t.matrix),this.needsUpdate=!0}}zt.prototype.update=function(){return function(){const t=this.matrix,e=this.min,n=this.max,s=this.points;for(let u=0;u<=1;u++)for(let h=0;h<=1;h++)for(let f=0;f<=1;f++){const c=1*u|2*h|4*f,m=s[c];m.x=u?n.x:e.x,m.y=h?n.y:e.y,m.z=f?n.z:e.z,m.applyMatrix4(t)}const r=this.satBounds,a=this.satAxes,o=s[0];for(let u=0;u<3;u++){const h=a[u],f=r[u],c=1<<u,m=s[c];h.subVectors(o,m),f.setFromPoints(h,s)}const l=this.alignedSatBounds;l[0].setFromPointsField(s,"x"),l[1].setFromPointsField(s,"y"),l[2].setFromPointsField(s,"z"),this.invMatrix.copy(this.matrix).invert(),this.needsUpdate=!1}}();zt.prototype.intersectsBox=function(){const i=new Be;return function(e){this.needsUpdate&&this.update();const n=e.min,s=e.max,r=this.satBounds,a=this.satAxes,o=this.alignedSatBounds;if(i.min=n.x,i.max=s.x,o[0].isSeparated(i)||(i.min=n.y,i.max=s.y,o[1].isSeparated(i))||(i.min=n.z,i.max=s.z,o[2].isSeparated(i)))return!1;for(let l=0;l<3;l++){const u=a[l],h=r[l];if(i.setFromBox(u,e),h.isSeparated(i))return!1}return!0}}();zt.prototype.intersectsTriangle=function(){const i=new xe,t=new Array(3),e=new Be,n=new Be,s=new D;return function(a){this.needsUpdate&&this.update(),a.isExtendedTriangle?a.needsUpdate&&a.update():(i.copy(a),i.update(),a=i);const o=this.satBounds,l=this.satAxes;t[0]=a.a,t[1]=a.b,t[2]=a.c;for(let c=0;c<3;c++){const m=o[c],g=l[c];if(e.setFromPoints(g,t),m.isSeparated(e))return!1}const u=a.satBounds,h=a.satAxes,f=this.points;for(let c=0;c<3;c++){const m=u[c],g=h[c];if(e.setFromPoints(g,f),m.isSeparated(e))return!1}for(let c=0;c<3;c++){const m=l[c];for(let g=0;g<4;g++){const _=h[g];if(s.crossVectors(m,_),e.setFromPoints(s,t),n.setFromPoints(s,f),e.isSeparated(n))return!1}}return!0}}();zt.prototype.closestPointToPoint=function(){return function(t,e){return this.needsUpdate&&this.update(),e.copy(t).applyMatrix4(this.invMatrix).clamp(this.min,this.max).applyMatrix4(this.matrix),e}}();zt.prototype.distanceToPoint=function(){const i=new D;return function(e){return this.closestPointToPoint(e,i),e.distanceTo(i)}}();zt.prototype.distanceToBox=function(){const i=["x","y","z"],t=new Array(12).fill().map(()=>new Oe),e=new Array(12).fill().map(()=>new Oe),n=new D,s=new D;return function(a,o=0,l=null,u=null){if(this.needsUpdate&&this.update(),this.intersectsBox(a))return(l||u)&&(a.getCenter(s),this.closestPointToPoint(s,n),a.closestPointToPoint(n,s),l&&l.copy(n),u&&u.copy(s)),0;const h=o*o,f=a.min,c=a.max,m=this.points;let g=1/0;for(let d=0;d<8;d++){const p=m[d];s.copy(p).clamp(f,c);const x=p.distanceToSquared(s);if(x<g&&(g=x,l&&l.copy(p),u&&u.copy(s),x<h))return Math.sqrt(x)}let _=0;for(let d=0;d<3;d++)for(let p=0;p<=1;p++)for(let x=0;x<=1;x++){const y=(d+1)%3,v=(d+2)%3,T=p<<y|x<<v,A=1<<d|p<<y|x<<v,w=m[T],P=m[A];t[_].set(w,P);const M=i[d],C=i[y],F=i[v],L=e[_],B=L.start,G=L.end;B[M]=f[M],B[C]=p?f[C]:c[C],B[F]=x?f[F]:c[C],G[M]=c[M],G[C]=p?f[C]:c[C],G[F]=x?f[F]:c[C],_++}for(let d=0;d<=1;d++)for(let p=0;p<=1;p++)for(let x=0;x<=1;x++){s.x=d?c.x:f.x,s.y=p?c.y:f.y,s.z=x?c.z:f.z,this.closestPointToPoint(s,n);const y=s.distanceToSquared(n);if(y<g&&(g=y,l&&l.copy(n),u&&u.copy(s),y<h))return Math.sqrt(y)}for(let d=0;d<12;d++){const p=t[d];for(let x=0;x<12;x++){const y=e[x];ga(p,y,n,s);const v=n.distanceToSquared(s);if(v<g&&(g=v,l&&l.copy(n),u&&u.copy(s),v<h))return Math.sqrt(v)}}return Math.sqrt(g)}}();class _a{constructor(t){this._getNewPrimitive=t,this._primitives=[]}getPrimitive(){const t=this._primitives;return t.length===0?this._getNewPrimitive():t.pop()}releasePrimitive(t){this._primitives.push(t)}}class Il extends _a{constructor(){super(()=>new xe)}}const re=new Il;class Ll{constructor(){this.float32Array=null,this.uint16Array=null,this.uint32Array=null;const t=[];let e=null;this.setBuffer=n=>{e&&t.push(e),e=n,this.float32Array=new Float32Array(n),this.uint16Array=new Uint16Array(n),this.uint32Array=new Uint32Array(n)},this.clearBuffer=()=>{e=null,this.float32Array=null,this.uint16Array=null,this.uint32Array=null,t.length!==0&&this.setBuffer(t.pop())}}}const st=new Ll;let je,ni;const kn=[],y1=new _a(()=>new Bt);function Fl(i,t,e,n,s,r){je=y1.getPrimitive(),ni=y1.getPrimitive(),kn.push(je,ni),st.setBuffer(i._roots[t]);const a=Yr(0,i.geometry,e,n,s,r);st.clearBuffer(),y1.releasePrimitive(je),y1.releasePrimitive(ni),kn.pop(),kn.pop();const o=kn.length;return o>0&&(ni=kn[o-1],je=kn[o-2]),a}function Yr(i,t,e,n,s=null,r=0,a=0){const{float32Array:o,uint16Array:l,uint32Array:u}=st;let h=i*2;if(Ut(h,l)){const g=Wt(i,u),_=$t(h,l);return ct(i,o,je),n(g,_,!1,a,r+i,je)}else{let F=function(B){const{uint16Array:G,uint32Array:H}=st;let q=B*2;for(;!Ut(q,G);)B=se(B),q=B*2;return Wt(B,H)},L=function(B){const{uint16Array:G,uint32Array:H}=st;let q=B*2;for(;!Ut(q,G);)B=jt(B,H),q=B*2;return Wt(B,H)+$t(q,G)};var c=F,m=L;const g=se(i),_=jt(i,u);let d=g,p=_,x,y,v,T;if(s&&(v=je,T=ni,ct(d,o,v),ct(p,o,T),x=s(v),y=s(T),y<x)){d=_,p=g;const B=x;x=y,y=B,v=T}v||(v=je,ct(d,o,v));const A=Ut(d*2,l),w=e(v,A,x,a+1,r+d);let P;if(w===L2){const B=F(d),H=L(d)-B;P=n(B,H,!0,a+1,r+d,v)}else P=w&&Yr(d,t,e,n,s,r,a+1);if(P)return!0;T=ni,ct(p,o,T);const b=Ut(p*2,l),M=e(T,b,y,a+1,r+p);let C;if(M===L2){const B=F(p),H=L(p)-B;C=n(B,H,!0,a+1,r+p,T)}else C=M&&Yr(p,t,e,n,s,r,a+1);return!!C}}const Ci=new D,Ys=new D;function Ul(i,t,e={},n=0,s=1/0){const r=n*n,a=s*s;let o=1/0,l=null;if(i.shapecast({boundsTraverseOrder:h=>(Ci.copy(t).clamp(h.min,h.max),Ci.distanceToSquared(t)),intersectsBounds:(h,f,c)=>c<o&&c<a,intersectsTriangle:(h,f)=>{h.closestPointToPoint(t,Ci);const c=t.distanceToSquared(Ci);return c<o&&(Ys.copy(Ci),o=c,l=f),c<r}}),o===1/0)return null;const u=Math.sqrt(o);return e.point?e.point.copy(Ys):e.point=Ys.clone(),e.distance=u,e.faceIndex=l,e}const Nl=parseInt(K1)>=169,cn=new D,un=new D,hn=new D,M1=new f0,b1=new f0,S1=new f0,B2=new D,z2=new D,k2=new D,Pi=new D;function Ol(i,t,e,n,s,r,a,o){let l;if(r===Rt?l=i.intersectTriangle(n,e,t,!0,s):l=i.intersectTriangle(t,e,n,r!==ie,s),l===null)return null;const u=i.origin.distanceTo(s);return u<a||u>o?null:{distance:u,point:s.clone()}}function Bl(i,t,e,n,s,r,a,o,l,u,h){cn.fromBufferAttribute(t,r),un.fromBufferAttribute(t,a),hn.fromBufferAttribute(t,o);const f=Ol(i,cn,un,hn,Pi,l,u,h);if(f){const c=new D;bt.getBarycoord(Pi,cn,un,hn,c),n&&(M1.fromBufferAttribute(n,r),b1.fromBufferAttribute(n,a),S1.fromBufferAttribute(n,o),f.uv=bt.getInterpolation(Pi,cn,un,hn,M1,b1,S1,new f0)),s&&(M1.fromBufferAttribute(s,r),b1.fromBufferAttribute(s,a),S1.fromBufferAttribute(s,o),f.uv1=bt.getInterpolation(Pi,cn,un,hn,M1,b1,S1,new f0)),e&&(B2.fromBufferAttribute(e,r),z2.fromBufferAttribute(e,a),k2.fromBufferAttribute(e,o),f.normal=bt.getInterpolation(Pi,cn,un,hn,B2,z2,k2,new D),f.normal.dot(i.direction)>0&&f.normal.multiplyScalar(-1));const m={a:r,b:a,c:o,normal:new D,materialIndex:0};bt.getNormal(cn,un,hn,m.normal),f.face=m,f.faceIndex=r,Nl&&(f.barycoord=c)}return f}function rs(i,t,e,n,s,r,a){const o=n*3;let l=o+0,u=o+1,h=o+2;const f=i.index;i.index&&(l=f.getX(l),u=f.getX(u),h=f.getX(h));const{position:c,normal:m,uv:g,uv1:_}=i.attributes,d=Bl(e,c,m,g,_,l,u,h,t,r,a);return d?(d.faceIndex=n,s&&s.push(d),d):null}function mt(i,t,e,n){const s=i.a,r=i.b,a=i.c;let o=t,l=t+1,u=t+2;e&&(o=e.getX(o),l=e.getX(l),u=e.getX(u)),s.x=n.getX(o),s.y=n.getY(o),s.z=n.getZ(o),r.x=n.getX(l),r.y=n.getY(l),r.z=n.getZ(l),a.x=n.getX(u),a.y=n.getY(u),a.z=n.getZ(u)}function zl(i,t,e,n,s,r,a,o){const{geometry:l,_indirectBuffer:u}=i;for(let h=n,f=n+s;h<f;h++)rs(l,t,e,h,r,a,o)}function kl(i,t,e,n,s,r,a){const{geometry:o,_indirectBuffer:l}=i;let u=1/0,h=null;for(let f=n,c=n+s;f<c;f++){let m;m=rs(o,t,e,f,null,r,a),m&&m.distance<u&&(h=m,u=m.distance)}return h}function Hl(i,t,e,n,s,r,a){const{geometry:o}=e,{index:l}=o,u=o.attributes.position;for(let h=i,f=t+i;h<f;h++){let c;if(c=h,mt(a,c*3,l,u),a.needsUpdate=!0,n(a,c,s,r))return!0}return!1}function Vl(i,t=null){t&&Array.isArray(t)&&(t=new Set(t));const e=i.geometry,n=e.index?e.index.array:null,s=e.attributes.position;let r,a,o,l,u=0;const h=i._roots;for(let c=0,m=h.length;c<m;c++)r=h[c],a=new Uint32Array(r),o=new Uint16Array(r),l=new Float32Array(r),f(0,u),u+=r.byteLength;function f(c,m,g=!1){const _=c*2;if(o[_+15]===ss){const p=a[c+6],x=o[_+14];let y=1/0,v=1/0,T=1/0,A=-1/0,w=-1/0,P=-1/0;for(let b=3*p,M=3*(p+x);b<M;b++){let C=n[b];const F=s.getX(C),L=s.getY(C),B=s.getZ(C);F<y&&(y=F),F>A&&(A=F),L<v&&(v=L),L>w&&(w=L),B<T&&(T=B),B>P&&(P=B)}return l[c+0]!==y||l[c+1]!==v||l[c+2]!==T||l[c+3]!==A||l[c+4]!==w||l[c+5]!==P?(l[c+0]=y,l[c+1]=v,l[c+2]=T,l[c+3]=A,l[c+4]=w,l[c+5]=P,!0):!1}else{const p=c+8,x=a[c+6],y=p+m,v=x+m;let T=g,A=!1,w=!1;t?T||(A=t.has(y),w=t.has(v),T=!A&&!w):(A=!0,w=!0);const P=T||A,b=T||w;let M=!1;P&&(M=f(p,m,T));let C=!1;b&&(C=f(x,m,T));const F=M||C;if(F)for(let L=0;L<3;L++){const B=p+L,G=x+L,H=l[B],q=l[B+3],W=l[G],t0=l[G+3];l[c+L]=H<W?H:W,l[c+L+3]=q>t0?q:t0}return F}}}function Qe(i,t,e,n,s){let r,a,o,l,u,h;const f=1/e.direction.x,c=1/e.direction.y,m=1/e.direction.z,g=e.origin.x,_=e.origin.y,d=e.origin.z;let p=t[i],x=t[i+3],y=t[i+1],v=t[i+3+1],T=t[i+2],A=t[i+3+2];return f>=0?(r=(p-g)*f,a=(x-g)*f):(r=(x-g)*f,a=(p-g)*f),c>=0?(o=(y-_)*c,l=(v-_)*c):(o=(v-_)*c,l=(y-_)*c),r>l||o>a||((o>r||isNaN(r))&&(r=o),(l<a||isNaN(a))&&(a=l),m>=0?(u=(T-d)*m,h=(A-d)*m):(u=(A-d)*m,h=(T-d)*m),r>h||u>a)?!1:((u>r||r!==r)&&(r=u),(h<a||a!==a)&&(a=h),r<=s&&a>=n)}function Gl(i,t,e,n,s,r,a,o){const{geometry:l,_indirectBuffer:u}=i;for(let h=n,f=n+s;h<f;h++){let c=u?u[h]:h;rs(l,t,e,c,r,a,o)}}function Wl(i,t,e,n,s,r,a){const{geometry:o,_indirectBuffer:l}=i;let u=1/0,h=null;for(let f=n,c=n+s;f<c;f++){let m;m=rs(o,t,e,l?l[f]:f,null,r,a),m&&m.distance<u&&(h=m,u=m.distance)}return h}function Xl(i,t,e,n,s,r,a){const{geometry:o}=e,{index:l}=o,u=o.attributes.position;for(let h=i,f=t+i;h<f;h++){let c;if(c=e.resolveTriangleIndex(h),mt(a,c*3,l,u),a.needsUpdate=!0,n(a,c,s,r))return!0}return!1}function ql(i,t,e,n,s,r,a){st.setBuffer(i._roots[t]),$r(0,i,e,n,s,r,a),st.clearBuffer()}function $r(i,t,e,n,s,r,a){const{float32Array:o,uint16Array:l,uint32Array:u}=st,h=i*2;if(Ut(h,l)){const c=Wt(i,u),m=$t(h,l);zl(t,e,n,c,m,s,r,a)}else{const c=se(i);Qe(c,o,n,r,a)&&$r(c,t,e,n,s,r,a);const m=jt(i,u);Qe(m,o,n,r,a)&&$r(m,t,e,n,s,r,a)}}const Yl=["x","y","z"];function $l(i,t,e,n,s,r){st.setBuffer(i._roots[t]);const a=jr(0,i,e,n,s,r);return st.clearBuffer(),a}function jr(i,t,e,n,s,r){const{float32Array:a,uint16Array:o,uint32Array:l}=st;let u=i*2;if(Ut(u,o)){const f=Wt(i,l),c=$t(u,o);return kl(t,e,n,f,c,s,r)}else{const f=ma(i,l),c=Yl[f],g=n.direction[c]>=0;let _,d;g?(_=se(i),d=jt(i,l)):(_=jt(i,l),d=se(i));const x=Qe(_,a,n,s,r)?jr(_,t,e,n,s,r):null;if(x){const T=x.point[c];if(g?T<=a[d+f]:T>=a[d+f+3])return x}const v=Qe(d,a,n,s,r)?jr(d,t,e,n,s,r):null;return x&&v?x.distance<=v.distance?x:v:x||v||null}}const T1=new Bt,Hn=new xe,Vn=new xe,Di=new U0,H2=new zt,E1=new zt;function jl(i,t,e,n){st.setBuffer(i._roots[t]);const s=Kr(0,i,e,n);return st.clearBuffer(),s}function Kr(i,t,e,n,s=null){const{float32Array:r,uint16Array:a,uint32Array:o}=st;let l=i*2;if(s===null&&(e.boundingBox||e.computeBoundingBox(),H2.set(e.boundingBox.min,e.boundingBox.max,n),s=H2),Ut(l,a)){const h=t.geometry,f=h.index,c=h.attributes.position,m=e.index,g=e.attributes.position,_=Wt(i,o),d=$t(l,a);if(Di.copy(n).invert(),e.boundsTree)return ct(i,r,E1),E1.matrix.copy(Di),E1.needsUpdate=!0,e.boundsTree.shapecast({intersectsBounds:x=>E1.intersectsBox(x),intersectsTriangle:x=>{x.a.applyMatrix4(n),x.b.applyMatrix4(n),x.c.applyMatrix4(n),x.needsUpdate=!0;for(let y=_*3,v=(d+_)*3;y<v;y+=3)if(mt(Vn,y,f,c),Vn.needsUpdate=!0,x.intersectsTriangle(Vn))return!0;return!1}});for(let p=_*3,x=(d+_)*3;p<x;p+=3){mt(Hn,p,f,c),Hn.a.applyMatrix4(Di),Hn.b.applyMatrix4(Di),Hn.c.applyMatrix4(Di),Hn.needsUpdate=!0;for(let y=0,v=m.count;y<v;y+=3)if(mt(Vn,y,m,g),Vn.needsUpdate=!0,Hn.intersectsTriangle(Vn))return!0}}else{const h=i+8,f=o[i+6];return ct(h,r,T1),!!(s.intersectsBox(T1)&&Kr(h,t,e,n,s)||(ct(f,r,T1),s.intersectsBox(T1)&&Kr(f,t,e,n,s)))}}const w1=new U0,$s=new zt,Ii=new zt,Kl=new D,Zl=new D,Jl=new D,Ql=new D;function tc(i,t,e,n={},s={},r=0,a=1/0){t.boundingBox||t.computeBoundingBox(),$s.set(t.boundingBox.min,t.boundingBox.max,e),$s.needsUpdate=!0;const o=i.geometry,l=o.attributes.position,u=o.index,h=t.attributes.position,f=t.index,c=re.getPrimitive(),m=re.getPrimitive();let g=Kl,_=Zl,d=null,p=null;s&&(d=Jl,p=Ql);let x=1/0,y=null,v=null;return w1.copy(e).invert(),Ii.matrix.copy(w1),i.shapecast({boundsTraverseOrder:T=>$s.distanceToBox(T),intersectsBounds:(T,A,w)=>w<x&&w<a?(A&&(Ii.min.copy(T.min),Ii.max.copy(T.max),Ii.needsUpdate=!0),!0):!1,intersectsRange:(T,A)=>{if(t.boundsTree)return t.boundsTree.shapecast({boundsTraverseOrder:P=>Ii.distanceToBox(P),intersectsBounds:(P,b,M)=>M<x&&M<a,intersectsRange:(P,b)=>{for(let M=P,C=P+b;M<C;M++){mt(m,3*M,f,h),m.a.applyMatrix4(e),m.b.applyMatrix4(e),m.c.applyMatrix4(e),m.needsUpdate=!0;for(let F=T,L=T+A;F<L;F++){mt(c,3*F,u,l),c.needsUpdate=!0;const B=c.distanceToTriangle(m,g,d);if(B<x&&(_.copy(g),p&&p.copy(d),x=B,y=F,v=M),B<r)return!0}}}});{const w=bi(t);for(let P=0,b=w;P<b;P++){mt(m,3*P,f,h),m.a.applyMatrix4(e),m.b.applyMatrix4(e),m.c.applyMatrix4(e),m.needsUpdate=!0;for(let M=T,C=T+A;M<C;M++){mt(c,3*M,u,l),c.needsUpdate=!0;const F=c.distanceToTriangle(m,g,d);if(F<x&&(_.copy(g),p&&p.copy(d),x=F,y=M,v=P),F<r)return!0}}}}}),re.releasePrimitive(c),re.releasePrimitive(m),x===1/0?null:(n.point?n.point.copy(_):n.point=_.clone(),n.distance=x,n.faceIndex=y,s&&(s.point?s.point.copy(p):s.point=p.clone(),s.point.applyMatrix4(w1),_.applyMatrix4(w1),s.distance=_.sub(s.point).length(),s.faceIndex=v),n)}function ec(i,t=null){t&&Array.isArray(t)&&(t=new Set(t));const e=i.geometry,n=e.index?e.index.array:null,s=e.attributes.position;let r,a,o,l,u=0;const h=i._roots;for(let c=0,m=h.length;c<m;c++)r=h[c],a=new Uint32Array(r),o=new Uint16Array(r),l=new Float32Array(r),f(0,u),u+=r.byteLength;function f(c,m,g=!1){const _=c*2;if(o[_+15]===ss){const p=a[c+6],x=o[_+14];let y=1/0,v=1/0,T=1/0,A=-1/0,w=-1/0,P=-1/0;for(let b=p,M=p+x;b<M;b++){const C=3*i.resolveTriangleIndex(b);for(let F=0;F<3;F++){let L=C+F;L=n?n[L]:L;const B=s.getX(L),G=s.getY(L),H=s.getZ(L);B<y&&(y=B),B>A&&(A=B),G<v&&(v=G),G>w&&(w=G),H<T&&(T=H),H>P&&(P=H)}}return l[c+0]!==y||l[c+1]!==v||l[c+2]!==T||l[c+3]!==A||l[c+4]!==w||l[c+5]!==P?(l[c+0]=y,l[c+1]=v,l[c+2]=T,l[c+3]=A,l[c+4]=w,l[c+5]=P,!0):!1}else{const p=c+8,x=a[c+6],y=p+m,v=x+m;let T=g,A=!1,w=!1;t?T||(A=t.has(y),w=t.has(v),T=!A&&!w):(A=!0,w=!0);const P=T||A,b=T||w;let M=!1;P&&(M=f(p,m,T));let C=!1;b&&(C=f(x,m,T));const F=M||C;if(F)for(let L=0;L<3;L++){const B=p+L,G=x+L,H=l[B],q=l[B+3],W=l[G],t0=l[G+3];l[c+L]=H<W?H:W,l[c+L+3]=q>t0?q:t0}return F}}}function nc(i,t,e,n,s,r,a){st.setBuffer(i._roots[t]),Zr(0,i,e,n,s,r,a),st.clearBuffer()}function Zr(i,t,e,n,s,r,a){const{float32Array:o,uint16Array:l,uint32Array:u}=st,h=i*2;if(Ut(h,l)){const c=Wt(i,u),m=$t(h,l);Gl(t,e,n,c,m,s,r,a)}else{const c=se(i);Qe(c,o,n,r,a)&&Zr(c,t,e,n,s,r,a);const m=jt(i,u);Qe(m,o,n,r,a)&&Zr(m,t,e,n,s,r,a)}}const ic=["x","y","z"];function sc(i,t,e,n,s,r){st.setBuffer(i._roots[t]);const a=Jr(0,i,e,n,s,r);return st.clearBuffer(),a}function Jr(i,t,e,n,s,r){const{float32Array:a,uint16Array:o,uint32Array:l}=st;let u=i*2;if(Ut(u,o)){const f=Wt(i,l),c=$t(u,o);return Wl(t,e,n,f,c,s,r)}else{const f=ma(i,l),c=ic[f],g=n.direction[c]>=0;let _,d;g?(_=se(i),d=jt(i,l)):(_=jt(i,l),d=se(i));const x=Qe(_,a,n,s,r)?Jr(_,t,e,n,s,r):null;if(x){const T=x.point[c];if(g?T<=a[d+f]:T>=a[d+f+3])return x}const v=Qe(d,a,n,s,r)?Jr(d,t,e,n,s,r):null;return x&&v?x.distance<=v.distance?x:v:x||v||null}}const A1=new Bt,Gn=new xe,Wn=new xe,Li=new U0,V2=new zt,R1=new zt;function rc(i,t,e,n){st.setBuffer(i._roots[t]);const s=Qr(0,i,e,n);return st.clearBuffer(),s}function Qr(i,t,e,n,s=null){const{float32Array:r,uint16Array:a,uint32Array:o}=st;let l=i*2;if(s===null&&(e.boundingBox||e.computeBoundingBox(),V2.set(e.boundingBox.min,e.boundingBox.max,n),s=V2),Ut(l,a)){const h=t.geometry,f=h.index,c=h.attributes.position,m=e.index,g=e.attributes.position,_=Wt(i,o),d=$t(l,a);if(Li.copy(n).invert(),e.boundsTree)return ct(i,r,R1),R1.matrix.copy(Li),R1.needsUpdate=!0,e.boundsTree.shapecast({intersectsBounds:x=>R1.intersectsBox(x),intersectsTriangle:x=>{x.a.applyMatrix4(n),x.b.applyMatrix4(n),x.c.applyMatrix4(n),x.needsUpdate=!0;for(let y=_,v=d+_;y<v;y++)if(mt(Wn,3*t.resolveTriangleIndex(y),f,c),Wn.needsUpdate=!0,x.intersectsTriangle(Wn))return!0;return!1}});for(let p=_,x=d+_;p<x;p++){const y=t.resolveTriangleIndex(p);mt(Gn,3*y,f,c),Gn.a.applyMatrix4(Li),Gn.b.applyMatrix4(Li),Gn.c.applyMatrix4(Li),Gn.needsUpdate=!0;for(let v=0,T=m.count;v<T;v+=3)if(mt(Wn,v,m,g),Wn.needsUpdate=!0,Gn.intersectsTriangle(Wn))return!0}}else{const h=i+8,f=o[i+6];return ct(h,r,A1),!!(s.intersectsBox(A1)&&Qr(h,t,e,n,s)||(ct(f,r,A1),s.intersectsBox(A1)&&Qr(f,t,e,n,s)))}}const C1=new U0,js=new zt,Fi=new zt,ac=new D,oc=new D,lc=new D,cc=new D;function uc(i,t,e,n={},s={},r=0,a=1/0){t.boundingBox||t.computeBoundingBox(),js.set(t.boundingBox.min,t.boundingBox.max,e),js.needsUpdate=!0;const o=i.geometry,l=o.attributes.position,u=o.index,h=t.attributes.position,f=t.index,c=re.getPrimitive(),m=re.getPrimitive();let g=ac,_=oc,d=null,p=null;s&&(d=lc,p=cc);let x=1/0,y=null,v=null;return C1.copy(e).invert(),Fi.matrix.copy(C1),i.shapecast({boundsTraverseOrder:T=>js.distanceToBox(T),intersectsBounds:(T,A,w)=>w<x&&w<a?(A&&(Fi.min.copy(T.min),Fi.max.copy(T.max),Fi.needsUpdate=!0),!0):!1,intersectsRange:(T,A)=>{if(t.boundsTree){const w=t.boundsTree;return w.shapecast({boundsTraverseOrder:P=>Fi.distanceToBox(P),intersectsBounds:(P,b,M)=>M<x&&M<a,intersectsRange:(P,b)=>{for(let M=P,C=P+b;M<C;M++){const F=w.resolveTriangleIndex(M);mt(m,3*F,f,h),m.a.applyMatrix4(e),m.b.applyMatrix4(e),m.c.applyMatrix4(e),m.needsUpdate=!0;for(let L=T,B=T+A;L<B;L++){const G=i.resolveTriangleIndex(L);mt(c,3*G,u,l),c.needsUpdate=!0;const H=c.distanceToTriangle(m,g,d);if(H<x&&(_.copy(g),p&&p.copy(d),x=H,y=L,v=M),H<r)return!0}}}})}else{const w=bi(t);for(let P=0,b=w;P<b;P++){mt(m,3*P,f,h),m.a.applyMatrix4(e),m.b.applyMatrix4(e),m.c.applyMatrix4(e),m.needsUpdate=!0;for(let M=T,C=T+A;M<C;M++){const F=i.resolveTriangleIndex(M);mt(c,3*F,u,l),c.needsUpdate=!0;const L=c.distanceToTriangle(m,g,d);if(L<x&&(_.copy(g),p&&p.copy(d),x=L,y=M,v=P),L<r)return!0}}}}}),re.releasePrimitive(c),re.releasePrimitive(m),x===1/0?null:(n.point?n.point.copy(_):n.point=_.clone(),n.distance=x,n.faceIndex=y,s&&(s.point?s.point.copy(p):s.point=p.clone(),s.point.applyMatrix4(C1),_.applyMatrix4(C1),s.distance=_.sub(s.point).length(),s.faceIndex=v),n)}function hc(){return typeof SharedArrayBuffer<"u"}const ki=new st.constructor,j1=new st.constructor,Ye=new _a(()=>new Bt),Xn=new Bt,qn=new Bt,Ks=new Bt,Zs=new Bt;let Js=!1;function fc(i,t,e,n){if(Js)throw new Error("MeshBVH: Recursive calls to bvhcast not supported.");Js=!0;const s=i._roots,r=t._roots;let a,o=0,l=0;const u=new U0().copy(e).invert();for(let h=0,f=s.length;h<f;h++){ki.setBuffer(s[h]),l=0;const c=Ye.getPrimitive();ct(0,ki.float32Array,c),c.applyMatrix4(u);for(let m=0,g=r.length;m<g&&(j1.setBuffer(r[m]),a=ge(0,0,e,u,n,o,l,0,0,c),j1.clearBuffer(),l+=r[m].length,!a);m++);if(Ye.releasePrimitive(c),ki.clearBuffer(),o+=s[h].length,a)break}return Js=!1,a}function ge(i,t,e,n,s,r=0,a=0,o=0,l=0,u=null,h=!1){let f,c;h?(f=j1,c=ki):(f=ki,c=j1);const m=f.float32Array,g=f.uint32Array,_=f.uint16Array,d=c.float32Array,p=c.uint32Array,x=c.uint16Array,y=i*2,v=t*2,T=Ut(y,_),A=Ut(v,x);let w=!1;if(A&&T)h?w=s(Wt(t,p),$t(t*2,x),Wt(i,g),$t(i*2,_),l,a+t,o,r+i):w=s(Wt(i,g),$t(i*2,_),Wt(t,p),$t(t*2,x),o,r+i,l,a+t);else if(A){const P=Ye.getPrimitive();ct(t,d,P),P.applyMatrix4(e);const b=se(i),M=jt(i,g);ct(b,m,Xn),ct(M,m,qn);const C=P.intersectsBox(Xn),F=P.intersectsBox(qn);w=C&&ge(t,b,n,e,s,a,r,l,o+1,P,!h)||F&&ge(t,M,n,e,s,a,r,l,o+1,P,!h),Ye.releasePrimitive(P)}else{const P=se(t),b=jt(t,p);ct(P,d,Ks),ct(b,d,Zs);const M=u.intersectsBox(Ks),C=u.intersectsBox(Zs);if(M&&C)w=ge(i,P,e,n,s,r,a,o,l+1,u,h)||ge(i,b,e,n,s,r,a,o,l+1,u,h);else if(M)if(T)w=ge(i,P,e,n,s,r,a,o,l+1,u,h);else{const F=Ye.getPrimitive();F.copy(Ks).applyMatrix4(e);const L=se(i),B=jt(i,g);ct(L,m,Xn),ct(B,m,qn);const G=F.intersectsBox(Xn),H=F.intersectsBox(qn);w=G&&ge(P,L,n,e,s,a,r,l,o+1,F,!h)||H&&ge(P,B,n,e,s,a,r,l,o+1,F,!h),Ye.releasePrimitive(F)}else if(C)if(T)w=ge(i,b,e,n,s,r,a,o,l+1,u,h);else{const F=Ye.getPrimitive();F.copy(Zs).applyMatrix4(e);const L=se(i),B=jt(i,g);ct(L,m,Xn),ct(B,m,qn);const G=F.intersectsBox(Xn),H=F.intersectsBox(qn);w=G&&ge(b,L,n,e,s,a,r,l,o+1,F,!h)||H&&ge(b,B,n,e,s,a,r,l,o+1,F,!h),Ye.releasePrimitive(F)}}return w}const P1=new zt,G2=new Bt,dc={strategy:Ko,maxDepth:40,maxLeafTris:10,useSharedArrayBuffer:!1,setBoundingBox:!0,onProgress:null,indirect:!1,verbose:!0,range:null};class va{static serialize(t,e={}){e={cloneBuffers:!0,...e};const n=t.geometry,s=t._roots,r=t._indirectBuffer,a=n.getIndex();let o;return e.cloneBuffers?o={roots:s.map(l=>l.slice()),index:a?a.array.slice():null,indirectBuffer:r?r.slice():null}:o={roots:s,index:a?a.array:null,indirectBuffer:r},o}static deserialize(t,e,n={}){n={setIndex:!0,indirect:!!t.indirectBuffer,...n};const{index:s,roots:r,indirectBuffer:a}=t,o=new va(e,{...n,[Gs]:!0});if(o._roots=r,o._indirectBuffer=a||null,n.setIndex){const l=e.getIndex();if(l===null){const u=new ut(t.index,1,!1);e.setIndex(u)}else l.array!==s&&(l.array.set(s),l.needsUpdate=!0)}return o}get indirect(){return!!this._indirectBuffer}constructor(t,e={}){if(t.isBufferGeometry){if(t.index&&t.index.isInterleavedBufferAttribute)throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.")}else throw new Error("MeshBVH: Only BufferGeometries are supported.");if(e=Object.assign({...dc,[Gs]:!1},e),e.useSharedArrayBuffer&&!hc())throw new Error("MeshBVH: SharedArrayBuffer is not available.");this.geometry=t,this._roots=null,this._indirectBuffer=null,e[Gs]||(Rl(this,e),!t.boundingBox&&e.setBoundingBox&&(t.boundingBox=this.getBoundingBox(new Bt))),this.resolveTriangleIndex=e.indirect?n=>this._indirectBuffer[n]:n=>n}refit(t=null){return(this.indirect?ec:Vl)(this,t)}traverse(t,e=0){const n=this._roots[e],s=new Uint32Array(n),r=new Uint16Array(n);a(0);function a(o,l=0){const u=o*2,h=r[u+15]===ss;if(h){const f=s[o+6],c=r[u+14];t(l,h,new Float32Array(n,o*4,6),f,c)}else{const f=o+Ze/4,c=s[o+6],m=s[o+7];t(l,h,new Float32Array(n,o*4,6),m)||(a(f,l+1),a(c,l+1))}}}raycast(t,e=ve,n=0,s=1/0){const r=this._roots,a=this.geometry,o=[],l=e.isMaterial,u=Array.isArray(e),h=a.groups,f=l?e.side:e,c=this.indirect?nc:ql;for(let m=0,g=r.length;m<g;m++){const _=u?e[h[m].materialIndex].side:f,d=o.length;if(c(this,m,_,t,o,n,s),u){const p=h[m].materialIndex;for(let x=d,y=o.length;x<y;x++)o[x].face.materialIndex=p}}return o}raycastFirst(t,e=ve,n=0,s=1/0){const r=this._roots,a=this.geometry,o=e.isMaterial,l=Array.isArray(e);let u=null;const h=a.groups,f=o?e.side:e,c=this.indirect?sc:$l;for(let m=0,g=r.length;m<g;m++){const _=l?e[h[m].materialIndex].side:f,d=c(this,m,_,t,n,s);d!=null&&(u==null||d.distance<u.distance)&&(u=d,l&&(d.face.materialIndex=h[m].materialIndex))}return u}intersectsGeometry(t,e){let n=!1;const s=this._roots,r=this.indirect?rc:jl;for(let a=0,o=s.length;a<o&&(n=r(this,a,t,e),!n);a++);return n}shapecast(t){const e=re.getPrimitive(),n=this.indirect?Xl:Hl;let{boundsTraverseOrder:s,intersectsBounds:r,intersectsRange:a,intersectsTriangle:o}=t;if(a&&o){const f=a;a=(c,m,g,_,d)=>f(c,m,g,_,d)?!0:n(c,m,this,o,g,_,e)}else a||(o?a=(f,c,m,g)=>n(f,c,this,o,m,g,e):a=(f,c,m)=>m);let l=!1,u=0;const h=this._roots;for(let f=0,c=h.length;f<c;f++){const m=h[f];if(l=Fl(this,f,r,a,s,u),l)break;u+=m.byteLength}return re.releasePrimitive(e),l}bvhcast(t,e,n){let{intersectsRanges:s,intersectsTriangles:r}=n;const a=re.getPrimitive(),o=this.geometry.index,l=this.geometry.attributes.position,u=this.indirect?g=>{const _=this.resolveTriangleIndex(g);mt(a,_*3,o,l)}:g=>{mt(a,g*3,o,l)},h=re.getPrimitive(),f=t.geometry.index,c=t.geometry.attributes.position,m=t.indirect?g=>{const _=t.resolveTriangleIndex(g);mt(h,_*3,f,c)}:g=>{mt(h,g*3,f,c)};if(r){const g=(_,d,p,x,y,v,T,A)=>{for(let w=p,P=p+x;w<P;w++){m(w),h.a.applyMatrix4(e),h.b.applyMatrix4(e),h.c.applyMatrix4(e),h.needsUpdate=!0;for(let b=_,M=_+d;b<M;b++)if(u(b),a.needsUpdate=!0,r(a,h,b,w,y,v,T,A))return!0}return!1};if(s){const _=s;s=function(d,p,x,y,v,T,A,w){return _(d,p,x,y,v,T,A,w)?!0:g(d,p,x,y,v,T,A,w)}}else s=g}return fc(this,t,e,s)}intersectsBox(t,e){return P1.set(t.min,t.max,e),P1.needsUpdate=!0,this.shapecast({intersectsBounds:n=>P1.intersectsBox(n),intersectsTriangle:n=>P1.intersectsTriangle(n)})}intersectsSphere(t){return this.shapecast({intersectsBounds:e=>t.intersectsBox(e),intersectsTriangle:e=>e.intersectsSphere(t)})}closestPointToGeometry(t,e,n={},s={},r=0,a=1/0){return(this.indirect?uc:tc)(this,t,e,n,s,r,a)}closestPointToPoint(t,e={},n=0,s=1/0){return Ul(this,t,e,n,s)}getBoundingBox(t){return t.makeEmpty(),this._roots.forEach(n=>{ct(0,new Float32Array(n),G2),t.union(G2)}),t}}function pc(i){switch(i){case 1:return"R";case 2:return"RG";case 3:return"RGBA";case 4:return"RGBA"}throw new Error}function mc(i){switch(i){case 1:return di;case 2:return Q1;case 3:return Z0;case 4:return Z0}}function W2(i){switch(i){case 1:return J1;case 2:return Gi;case 3:return pi;case 4:return pi}}class s3 extends oe{constructor(){super(),this.minFilter=B0,this.magFilter=B0,this.generateMipmaps=!1,this.overrideItemSize=null,this._forcedType=null}updateFrom(t){const e=this.overrideItemSize,n=t.itemSize,s=t.count;if(e!==null){if(n*s%e!==0)throw new Error("VertexAttributeTexture: overrideItemSize must divide evenly into buffer length.");t.itemSize=e,t.count=s*n/e}const r=t.itemSize,a=t.count,o=t.normalized,l=t.array.constructor,u=l.BYTES_PER_ELEMENT;let h=this._forcedType,f=r;if(h===null)switch(l){case Float32Array:h=nt;break;case Uint8Array:case Uint16Array:case Uint32Array:h=ae;break;case Int8Array:case Int16Array:case Int32Array:h=si;break}let c,m,g,_,d=pc(r);switch(h){case nt:g=1,m=mc(r),o&&u===1?(_=l,d+="8",l===Uint8Array?c=le:(c=X1,d+="_SNORM")):(_=Float32Array,d+="32F",c=nt);break;case si:d+=u*8+"I",g=o?Math.pow(2,l.BYTES_PER_ELEMENT*8-1):1,m=W2(r),u===1?(_=Int8Array,c=X1):u===2?(_=Int16Array,c=sa):(_=Int32Array,c=si);break;case ae:d+=u*8+"UI",g=o?Math.pow(2,l.BYTES_PER_ELEMENT*8-1):1,m=W2(r),u===1?(_=Uint8Array,c=le):u===2?(_=Uint16Array,c=ui):(_=Uint32Array,c=ae);break}f===3&&(m===Z0||m===pi)&&(f=4);const p=Math.ceil(Math.sqrt(a))||1,x=f*p*p,y=new _(x),v=t.normalized;t.normalized=!1;for(let T=0;T<a;T++){const A=f*T;y[A]=t.getX(T)/g,r>=2&&(y[A+1]=t.getY(T)/g),r>=3&&(y[A+2]=t.getZ(T)/g,f===4&&(y[A+3]=1)),r>=4&&(y[A+3]=t.getW(T)/g)}t.normalized=v,this.internalFormat=d,this.format=m,this.type=c,this.image.width=p,this.image.height=p,this.image.data=y,this.needsUpdate=!0,this.dispose(),t.itemSize=n,t.count=s}}class r3 extends s3{constructor(){super(),this._forcedType=ae}}class a3 extends s3{constructor(){super(),this._forcedType=nt}}class gc{constructor(){this.index=new r3,this.position=new a3,this.bvhBounds=new oe,this.bvhContents=new oe,this._cachedIndexAttr=null,this.index.overrideItemSize=3}updateFrom(t){const{geometry:e}=t;if(vc(t,this.bvhBounds,this.bvhContents),this.position.updateFrom(e.attributes.position),t.indirect){const n=t._indirectBuffer;if(this._cachedIndexAttr===null||this._cachedIndexAttr.count!==n.length)if(e.index)this._cachedIndexAttr=e.index.clone();else{const s=Qo(Jo(e));this._cachedIndexAttr=new ut(s,1,!1)}_c(e,n,this._cachedIndexAttr),this.index.updateFrom(this._cachedIndexAttr)}else this.index.updateFrom(e.index)}dispose(){const{index:t,position:e,bvhBounds:n,bvhContents:s}=this;t&&t.dispose(),e&&e.dispose(),n&&n.dispose(),s&&s.dispose()}}function _c(i,t,e){const n=e.array,s=i.index?i.index.array:null;for(let r=0,a=t.length;r<a;r++){const o=3*r,l=3*t[r];for(let u=0;u<3;u++)n[o+u]=s?s[l+u]:l+u}}function vc(i,t,e){const n=i._roots;if(n.length!==1)throw new Error("MeshBVHUniformStruct: Multi-root BVHs not supported.");const s=n[0],r=new Uint16Array(s),a=new Uint32Array(s),o=new Float32Array(s),l=s.byteLength/Ze,u=2*Math.ceil(Math.sqrt(l/2)),h=new Float32Array(4*u*u),f=Math.ceil(Math.sqrt(l)),c=new Uint32Array(2*f*f);for(let m=0;m<l;m++){const g=m*Ze/4,_=g*2,d=g;for(let p=0;p<3;p++)h[8*m+0+p]=o[d+0+p],h[8*m+4+p]=o[d+3+p];if(Ut(_,r)){const p=$t(_,r),x=Wt(g,a),y=4294901760|p;c[m*2+0]=y,c[m*2+1]=x}else{const p=4*jt(g,a)/Ze,x=ma(g,a);c[m*2+0]=x,c[m*2+1]=p}}t.image.data=h,t.image.width=u,t.image.height=u,t.format=Z0,t.type=nt,t.internalFormat="RGBA32F",t.minFilter=B0,t.magFilter=B0,t.generateMipmaps=!1,t.needsUpdate=!0,t.dispose(),e.image.data=c,e.image.width=f,e.image.height=f,e.format=Gi,e.type=ae,e.internalFormat="RG32UI",e.minFilter=B0,e.magFilter=B0,e.generateMipmaps=!1,e.needsUpdate=!0,e.dispose()}const xc=`

// A stack of uint32 indices can can store the indices for
// a perfectly balanced tree with a depth up to 31. Lower stack
// depth gets higher performance.
//
// However not all trees are balanced. Best value to set this to
// is the trees max depth.
#ifndef BVH_STACK_DEPTH
#define BVH_STACK_DEPTH 60
#endif

#ifndef INFINITY
#define INFINITY 1e20
#endif

// Utilities
uvec4 uTexelFetch1D( usampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

ivec4 iTexelFetch1D( isampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 texelFetch1D( sampler2D tex, uint index ) {

	uint width = uint( textureSize( tex, 0 ).x );
	uvec2 uv;
	uv.x = index % width;
	uv.y = index / width;

	return texelFetch( tex, ivec2( uv ), 0 );

}

vec4 textureSampleBarycoord( sampler2D tex, vec3 barycoord, uvec3 faceIndices ) {

	return
		barycoord.x * texelFetch1D( tex, faceIndices.x ) +
		barycoord.y * texelFetch1D( tex, faceIndices.y ) +
		barycoord.z * texelFetch1D( tex, faceIndices.z );

}

void ndcToCameraRay(
	vec2 coord, mat4 cameraWorld, mat4 invProjectionMatrix,
	out vec3 rayOrigin, out vec3 rayDirection
) {

	// get camera look direction and near plane for camera clipping
	vec4 lookDirection = cameraWorld * vec4( 0.0, 0.0, - 1.0, 0.0 );
	vec4 nearVector = invProjectionMatrix * vec4( 0.0, 0.0, - 1.0, 1.0 );
	float near = abs( nearVector.z / nearVector.w );

	// get the camera direction and position from camera matrices
	vec4 origin = cameraWorld * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec4 direction = invProjectionMatrix * vec4( coord, 0.5, 1.0 );
	direction /= direction.w;
	direction = cameraWorld * direction - origin;

	// slide the origin along the ray until it sits at the near clip plane position
	origin.xyz += direction.xyz * near / dot( direction, lookDirection );

	rayOrigin = origin.xyz;
	rayDirection = direction.xyz;

}
`,yc=`

#ifndef TRI_INTERSECT_EPSILON
#define TRI_INTERSECT_EPSILON 1e-5
#endif

// Raycasting
bool intersectsBounds( vec3 rayOrigin, vec3 rayDirection, vec3 boundsMin, vec3 boundsMax, out float dist ) {

	// https://www.reddit.com/r/opengl/comments/8ntzz5/fast_glsl_ray_box_intersection/
	// https://tavianator.com/2011/ray_box.html
	vec3 invDir = 1.0 / rayDirection;

	// find intersection distances for each plane
	vec3 tMinPlane = invDir * ( boundsMin - rayOrigin );
	vec3 tMaxPlane = invDir * ( boundsMax - rayOrigin );

	// get the min and max distances from each intersection
	vec3 tMinHit = min( tMaxPlane, tMinPlane );
	vec3 tMaxHit = max( tMaxPlane, tMinPlane );

	// get the furthest hit distance
	vec2 t = max( tMinHit.xx, tMinHit.yz );
	float t0 = max( t.x, t.y );

	// get the minimum hit distance
	t = min( tMaxHit.xx, tMaxHit.yz );
	float t1 = min( t.x, t.y );

	// set distance to 0.0 if the ray starts inside the box
	dist = max( t0, 0.0 );

	return t1 >= dist;

}

bool intersectsTriangle(
	vec3 rayOrigin, vec3 rayDirection, vec3 a, vec3 b, vec3 c,
	out vec3 barycoord, out vec3 norm, out float dist, out float side
) {

	// https://stackoverflow.com/questions/42740765/intersection-between-line-and-triangle-in-3d
	vec3 edge1 = b - a;
	vec3 edge2 = c - a;
	norm = cross( edge1, edge2 );

	float det = - dot( rayDirection, norm );
	float invdet = 1.0 / det;

	vec3 AO = rayOrigin - a;
	vec3 DAO = cross( AO, rayDirection );

	vec4 uvt;
	uvt.x = dot( edge2, DAO ) * invdet;
	uvt.y = - dot( edge1, DAO ) * invdet;
	uvt.z = dot( AO, norm ) * invdet;
	uvt.w = 1.0 - uvt.x - uvt.y;

	// set the hit information
	barycoord = uvt.wxy; // arranged in A, B, C order
	dist = uvt.z;
	side = sign( det );
	norm = side * normalize( norm );

	// add an epsilon to avoid misses between triangles
	uvt += vec4( TRI_INTERSECT_EPSILON );

	return all( greaterThanEqual( uvt, vec4( 0.0 ) ) );

}

bool intersectTriangles(
	// geometry info and triangle range
	sampler2D positionAttr, usampler2D indexAttr, uint offset, uint count,

	// ray
	vec3 rayOrigin, vec3 rayDirection,

	// outputs
	inout float minDistance, inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,
	inout float side, inout float dist
) {

	bool found = false;
	vec3 localBarycoord, localNormal;
	float localDist, localSide;
	for ( uint i = offset, l = offset + count; i < l; i ++ ) {

		uvec3 indices = uTexelFetch1D( indexAttr, i ).xyz;
		vec3 a = texelFetch1D( positionAttr, indices.x ).rgb;
		vec3 b = texelFetch1D( positionAttr, indices.y ).rgb;
		vec3 c = texelFetch1D( positionAttr, indices.z ).rgb;

		if (
			intersectsTriangle( rayOrigin, rayDirection, a, b, c, localBarycoord, localNormal, localDist, localSide )
			&& localDist < minDistance
		) {

			found = true;
			minDistance = localDist;

			faceIndices = uvec4( indices.xyz, i );
			faceNormal = localNormal;

			side = localSide;
			barycoord = localBarycoord;
			dist = localDist;

		}

	}

	return found;

}

bool intersectsBVHNodeBounds( vec3 rayOrigin, vec3 rayDirection, sampler2D bvhBounds, uint currNodeIndex, out float dist ) {

	uint cni2 = currNodeIndex * 2u;
	vec3 boundsMin = texelFetch1D( bvhBounds, cni2 ).xyz;
	vec3 boundsMax = texelFetch1D( bvhBounds, cni2 + 1u ).xyz;
	return intersectsBounds( rayOrigin, rayDirection, boundsMin, boundsMax, dist );

}

// use a macro to hide the fact that we need to expand the struct into separate fields
#define	bvhIntersectFirstHit(		bvh,		rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist	)	_bvhIntersectFirstHit(		bvh.position, bvh.index, bvh.bvhBounds, bvh.bvhContents,		rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist	)

bool _bvhIntersectFirstHit(
	// bvh info
	sampler2D bvh_position, usampler2D bvh_index, sampler2D bvh_bvhBounds, usampler2D bvh_bvhContents,

	// ray
	vec3 rayOrigin, vec3 rayDirection,

	// output variables split into separate variables due to output precision
	inout uvec4 faceIndices, inout vec3 faceNormal, inout vec3 barycoord,
	inout float side, inout float dist
) {

	// stack needs to be twice as long as the deepest tree we expect because
	// we push both the left and right child onto the stack every traversal
	int ptr = 0;
	uint stack[ BVH_STACK_DEPTH ];
	stack[ 0 ] = 0u;

	float triangleDistance = INFINITY;
	bool found = false;
	while ( ptr > - 1 && ptr < BVH_STACK_DEPTH ) {

		uint currNodeIndex = stack[ ptr ];
		ptr --;

		// check if we intersect the current bounds
		float boundsHitDistance;
		if (
			! intersectsBVHNodeBounds( rayOrigin, rayDirection, bvh_bvhBounds, currNodeIndex, boundsHitDistance )
			|| boundsHitDistance > triangleDistance
		) {

			continue;

		}

		uvec2 boundsInfo = uTexelFetch1D( bvh_bvhContents, currNodeIndex ).xy;
		bool isLeaf = bool( boundsInfo.x & 0xffff0000u );

		if ( isLeaf ) {

			uint count = boundsInfo.x & 0x0000ffffu;
			uint offset = boundsInfo.y;

			found = intersectTriangles(
				bvh_position, bvh_index, offset, count,
				rayOrigin, rayDirection, triangleDistance,
				faceIndices, faceNormal, barycoord, side, dist
			) || found;

		} else {

			uint leftIndex = currNodeIndex + 1u;
			uint splitAxis = boundsInfo.x & 0x0000ffffu;
			uint rightIndex = boundsInfo.y;

			bool leftToRight = rayDirection[ splitAxis ] >= 0.0;
			uint c1 = leftToRight ? leftIndex : rightIndex;
			uint c2 = leftToRight ? rightIndex : leftIndex;

			// set c2 in the stack so we traverse it later. We need to keep track of a pointer in
			// the stack while we traverse. The second pointer added is the one that will be
			// traversed first
			ptr ++;
			stack[ ptr ] = c2;

			ptr ++;
			stack[ ptr ] = c1;

		}

	}

	return found;

}
`,Mc=`
struct BVH {

	usampler2D index;
	sampler2D position;

	sampler2D bvhBounds;
	usampler2D bvhContents;

};
`;function o3(i,t,e=0){if(i.isInterleavedBufferAttribute){const n=i.itemSize;for(let s=0,r=i.count;s<r;s++){const a=s+e;t.setX(a,i.getX(s)),n>=2&&t.setY(a,i.getY(s)),n>=3&&t.setZ(a,i.getZ(s)),n>=4&&t.setW(a,i.getW(s))}}else{const n=t.array,s=n.constructor,r=n.BYTES_PER_ELEMENT*i.itemSize*e;new s(n.buffer,r,i.array.length).set(i.array)}}function Oi(i,t=null){const e=i.array.constructor,n=i.normalized,s=i.itemSize,r=t===null?i.count:t;return new ut(new e(s*r),s,n)}function Jn(i,t){if(!i&&!t)return!0;if(!!i!=!!t)return!1;const e=i.count===t.count,n=i.normalized===t.normalized,s=i.array.constructor===t.array.constructor,r=i.itemSize===t.itemSize;return!(!e||!n||!s||!r)}function bc(i){const t=i[0].index!==null,e=new Set(Object.keys(i[0].attributes));if(!i[0].getAttribute("position"))throw new Error("StaticGeometryGenerator: position attribute is required.");for(let n=0;n<i.length;++n){const s=i[n];let r=0;if(t!==(s.index!==null))throw new Error("StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.");for(const a in s.attributes){if(!e.has(a))throw new Error('StaticGeometryGenerator: All geometries must have compatible attributes; make sure "'+a+'" attribute exists among all geometries, or in none of them.');r++}if(r!==e.size)throw new Error("StaticGeometryGenerator: All geometries must have the same number of attributes.")}}function Sc(i){let t=0;for(let e=0,n=i.length;e<n;e++)t+=i[e].getIndex().count;return t}function Tc(i){let t=0;for(let e=0,n=i.length;e<n;e++)t+=i[e].getAttribute("position").count;return t}function Ec(i,t,e){i.index&&i.index.count!==t&&i.setIndex(null);const n=i.attributes;for(const s in n)n[s].count!==e&&i.deleteAttribute(s)}function wc(i,t={},e=new St){const{useGroups:n=!1,forceUpdate:s=!1,skipAssigningAttributes:r=[],overwriteIndex:a=!0}=t;bc(i);const o=i[0].index!==null,l=o?Sc(i):-1,u=Tc(i);if(Ec(e,l,u),n){let f=0;for(let c=0,m=i.length;c<m;c++){const g=i[c];let _;o?_=g.getIndex().count:_=g.getAttribute("position").count,e.addGroup(f,_,c),f+=_}}if(o){let f=!1;if(e.index||(e.setIndex(new ut(new Uint32Array(l),1,!1)),f=!0),f||a){let c=0,m=0;const g=e.getIndex();for(let _=0,d=i.length;_<d;_++){const p=i[_],x=p.getIndex();if(!(!s&&!f&&r[_]))for(let v=0;v<x.count;++v)g.setX(c+v,x.getX(v)+m);c+=x.count,m+=p.getAttribute("position").count}}}const h=Object.keys(i[0].attributes);for(let f=0,c=h.length;f<c;f++){let m=!1;const g=h[f];if(!e.getAttribute(g)){const p=i[0].getAttribute(g);e.setAttribute(g,Oi(p,u)),m=!0}let _=0;const d=e.getAttribute(g);for(let p=0,x=i.length;p<x;p++){const y=i[p],v=!s&&!m&&r[p],T=y.getAttribute(g);v||o3(T,d,_),_+=T.count}}}function Ac(i,t,e){const n=i.index,r=i.attributes.position.count,a=n?n.count:r;let o=i.groups;o.length===0&&(o=[{count:a,start:0,materialIndex:0}]);let l=i.getAttribute("materialIndex");if(!l||l.count!==r){let h;e.length<=255?h=new Uint8Array(r):h=new Uint16Array(r),l=new ut(h,1,!1),i.deleteAttribute("materialIndex"),i.setAttribute("materialIndex",l)}const u=l.array;for(let h=0;h<o.length;h++){const f=o[h],c=f.start,m=f.count,g=Math.min(m,a-c),_=Array.isArray(t)?t[f.materialIndex]:t,d=e.indexOf(_);for(let p=0;p<g;p++){let x=c+p;n&&(x=n.getX(x)),u[x]=d}}}function Rc(i,t){if(!i.index){const e=i.attributes.position.count,n=new Array(e);for(let s=0;s<e;s++)n[s]=s;i.setIndex(n)}if(!i.attributes.normal&&t&&t.includes("normal")&&i.computeVertexNormals(),!i.attributes.uv&&t&&t.includes("uv")){const e=i.attributes.position.count;i.setAttribute("uv",new ut(new Float32Array(e*2),2,!1))}if(!i.attributes.uv2&&t&&t.includes("uv2")){const e=i.attributes.position.count;i.setAttribute("uv2",new ut(new Float32Array(e*2),2,!1))}if(!i.attributes.tangent&&t&&t.includes("tangent"))if(i.attributes.uv&&i.attributes.normal)i.computeTangents();else{const e=i.attributes.position.count;i.setAttribute("tangent",new ut(new Float32Array(e*4),4,!1))}if(!i.attributes.color&&t&&t.includes("color")){const e=i.attributes.position.count,n=new Float32Array(e*4);n.fill(1),i.setAttribute("color",new ut(n,4))}}function xa(i){let t=0;if(i.byteLength!==0){const e=new Uint8Array(i);for(let n=0;n<i.byteLength;n++){const s=e[n];t=(t<<5)-t+s,t|=0}}return t}function X2(i){let t=i.uuid;const e=Object.values(i.attributes);i.index&&(e.push(i.index),t+=`index|${i.index.version}`);const n=Object.keys(e).sort();for(const s of n){const r=e[s];t+=`${s}_${r.version}|`}return t}function q2(i){const t=i.skeleton;return t?(t.boneTexture||t.computeBoneTexture(),`${xa(t.boneTexture.image.data.buffer)}_${t.boneTexture.uuid}`):null}class Cc{constructor(t=null){this.matrixWorld=new U0,this.geometryHash=null,this.skeletonHash=null,this.primitiveCount=-1,t!==null&&this.updateFrom(t)}updateFrom(t){const e=t.geometry,n=(e.index?e.index.count:e.attributes.position.count)/3;this.matrixWorld.copy(t.matrixWorld),this.geometryHash=X2(e),this.primitiveCount=n,this.skeletonHash=q2(t)}didChange(t){const e=t.geometry,n=(e.index?e.index.count:e.attributes.position.count)/3;return!(this.matrixWorld.equals(t.matrixWorld)&&this.geometryHash===X2(e)&&this.skeletonHash===q2(t)&&this.primitiveCount===n)}}const fn=new D,dn=new D,pn=new D,Y2=new K0,D1=new D,Qs=new D,$2=new K0,j2=new K0,I1=new U0,K2=new U0;function Z2(i,t,e){const n=i.skeleton,s=i.geometry,r=n.bones,a=n.boneInverses;$2.fromBufferAttribute(s.attributes.skinIndex,t),j2.fromBufferAttribute(s.attributes.skinWeight,t),I1.elements.fill(0);for(let o=0;o<4;o++){const l=j2.getComponent(o);if(l!==0){const u=$2.getComponent(o);K2.multiplyMatrices(r[u].matrixWorld,a[u]),Pc(I1,K2,l)}}return I1.multiply(i.bindMatrix).premultiply(i.bindMatrixInverse),e.transformDirection(I1),e}function tr(i,t,e,n,s){D1.set(0,0,0);for(let r=0,a=i.length;r<a;r++){const o=t[r],l=i[r];o!==0&&(Qs.fromBufferAttribute(l,n),e?D1.addScaledVector(Qs,o):D1.addScaledVector(Qs.sub(s),o))}s.add(D1)}function Pc(i,t,e){const n=i.elements,s=t.elements;for(let r=0,a=s.length;r<a;r++)n[r]+=s[r]*e}function Dc(i){const{index:t,attributes:e}=i;if(t)for(let n=0,s=t.count;n<s;n+=3){const r=t.getX(n),a=t.getX(n+2);t.setX(n,a),t.setX(n+2,r)}else for(const n in e){const s=e[n],r=s.itemSize;for(let a=0,o=s.count;a<o;a+=3)for(let l=0;l<r;l++){const u=s.getComponent(a,l),h=s.getComponent(a+2,l);s.setComponent(a,l,h),s.setComponent(a+2,l,u)}}return i}function Ic(i,t={},e=new St){t={applyWorldTransforms:!0,attributes:[],...t};const n=i.geometry,s=t.applyWorldTransforms,r=t.attributes.includes("normal"),a=t.attributes.includes("tangent"),o=n.attributes,l=e.attributes;for(const x in e.attributes)(!t.attributes.includes(x)||!(x in n.attributes))&&e.deleteAttribute(x);!e.index&&n.index&&(e.index=n.index.clone()),l.position||e.setAttribute("position",Oi(o.position)),r&&!l.normal&&o.normal&&e.setAttribute("normal",Oi(o.normal)),a&&!l.tangent&&o.tangent&&e.setAttribute("tangent",Oi(o.tangent)),Jn(n.index,e.index),Jn(o.position,l.position),r&&Jn(o.normal,l.normal),a&&Jn(o.tangent,l.tangent);const u=o.position,h=r?o.normal:null,f=a?o.tangent:null,c=n.morphAttributes.position,m=n.morphAttributes.normal,g=n.morphAttributes.tangent,_=n.morphTargetsRelative,d=i.morphTargetInfluences,p=new P0;p.getNormalMatrix(i.matrixWorld),n.index&&e.index.array.set(n.index.array);for(let x=0,y=o.position.count;x<y;x++)fn.fromBufferAttribute(u,x),h&&dn.fromBufferAttribute(h,x),f&&(Y2.fromBufferAttribute(f,x),pn.fromBufferAttribute(f,x)),d&&(c&&tr(c,d,_,x,fn),m&&tr(m,d,_,x,dn),g&&tr(g,d,_,x,pn)),i.isSkinnedMesh&&(i.applyBoneTransform(x,fn),h&&Z2(i,x,dn),f&&Z2(i,x,pn)),s&&fn.applyMatrix4(i.matrixWorld),l.position.setXYZ(x,fn.x,fn.y,fn.z),h&&(s&&dn.applyNormalMatrix(p),l.normal.setXYZ(x,dn.x,dn.y,dn.z)),f&&(s&&pn.transformDirection(i.matrixWorld),l.tangent.setXYZW(x,pn.x,pn.y,pn.z,Y2.w));for(const x in t.attributes){const y=t.attributes[x];y==="position"||y==="tangent"||y==="normal"||!(y in o)||(l[y]||e.setAttribute(y,Oi(o[y])),Jn(o[y],l[y]),o3(o[y],l[y]))}return i.matrixWorld.determinant()<0&&Dc(e),e}class Lc extends St{constructor(){super(),this.version=0,this.hash=null,this._diff=new Cc}isCompatible(t,e){const n=t.geometry;for(let s=0;s<e.length;s++){const r=e[s],a=n.attributes[r],o=this.attributes[r];if(a&&!Jn(a,o))return!1}return!0}updateFrom(t,e){const n=this._diff;return n.didChange(t)?(Ic(t,e,this),n.updateFrom(t),this.version++,this.hash=`${this.uuid}_${this.version}`,!0):!1}}const ta=0,l3=1,c3=2;function Fc(i,t){for(let e=0,n=i.length;e<n;e++)i[e].traverseVisible(r=>{r.isMesh&&t(r)})}function Uc(i){const t=[];for(let e=0,n=i.length;e<n;e++){const s=i[e];Array.isArray(s.material)?t.push(...s.material):t.push(s.material)}return t}function Nc(i,t,e){if(i.length===0){t.setIndex(null);const n=t.attributes;for(const s in n)t.deleteAttribute(s);for(const s in e.attributes)t.setAttribute(e.attributes[s],new ut(new Float32Array(0),4,!1))}else wc(i,e,t);for(const n in t.attributes)t.attributes[n].needsUpdate=!0}class Oc{constructor(t){this.objects=null,this.useGroups=!0,this.applyWorldTransforms=!0,this.generateMissingAttributes=!0,this.overwriteIndex=!0,this.attributes=["position","normal","color","tangent","uv","uv2"],this._intermediateGeometry=new Map,this._geometryMergeSets=new WeakMap,this._mergeOrder=[],this._dummyMesh=null,this.setObjects(t||[])}_getDummyMesh(){if(!this._dummyMesh){const t=new ca,e=new St;e.setAttribute("position",new ut(new Float32Array(9),3)),this._dummyMesh=new At(e,t)}return this._dummyMesh}_getMeshes(){const t=[];return Fc(this.objects,e=>{t.push(e)}),t.sort((e,n)=>e.uuid>n.uuid?1:e.uuid<n.uuid?-1:0),t.length===0&&t.push(this._getDummyMesh()),t}_updateIntermediateGeometries(){const{_intermediateGeometry:t}=this,e=this._getMeshes(),n=new Set(t.keys()),s={attributes:this.attributes,applyWorldTransforms:this.applyWorldTransforms};for(let r=0,a=e.length;r<a;r++){const o=e[r],l=o.uuid;n.delete(l);let u=t.get(l);(!u||!u.isCompatible(o,this.attributes))&&(u&&u.dispose(),u=new Lc,t.set(l,u)),u.updateFrom(o,s)&&this.generateMissingAttributes&&Rc(u,this.attributes)}n.forEach(r=>{t.delete(r)})}setObjects(t){Array.isArray(t)?this.objects=[...t]:this.objects=[t]}generate(t=new St){const{useGroups:e,overwriteIndex:n,_intermediateGeometry:s,_geometryMergeSets:r}=this,a=this._getMeshes(),o=[],l=[],u=r.get(t)||[];this._updateIntermediateGeometries();let h=!1;a.length!==u.length&&(h=!0);for(let c=0,m=a.length;c<m;c++){const g=a[c],_=s.get(g.uuid);l.push(_);const d=u[c];!d||d.uuid!==_.uuid?(o.push(!1),h=!0):d.version!==_.version?o.push(!1):o.push(!0)}Nc(l,t,{useGroups:e,forceUpdate:h,skipAssigningAttributes:o,overwriteIndex:n}),h&&t.dispose(),r.set(t,l.map(c=>({version:c.version,uuid:c.uuid})));let f=ta;return h?f=c3:o.includes(!1)&&(f=l3),{changeType:f,materials:Uc(a),geometry:t}}}function Bc(i){const t=new Set;for(let e=0,n=i.length;e<n;e++){const s=i[e];for(const r in s){const a=s[r];a&&a.isTexture&&t.add(a)}}return Array.from(t)}function zc(i){const t=[],e=new Set;for(let s=0,r=i.length;s<r;s++)i[s].traverse(a=>{a.visible&&(a.isRectAreaLight||a.isSpotLight||a.isPointLight||a.isDirectionalLight)&&(t.push(a),a.iesMap&&e.add(a.iesMap))});const n=Array.from(e).sort((s,r)=>s.uuid<r.uuid?1:s.uuid>r.uuid?-1:0);return{lights:t,iesTextures:n}}class kc{get initialized(){return!!this.bvh}constructor(t){this.bvhOptions={},this.attributes=["position","normal","tangent","color","uv","uv2"],this.generateBVH=!0,this.bvh=null,this.geometry=new St,this.staticGeometryGenerator=new Oc(t),this._bvhWorker=null,this._pendingGenerate=null,this._buildAsync=!1}setObjects(t){this.staticGeometryGenerator.setObjects(t)}setBVHWorker(t){this._bvhWorker=t}async generateAsync(t=null){if(!this._bvhWorker)throw new Error('PathTracingSceneGenerator: "setBVHWorker" must be called before "generateAsync" can be called.');if(this.bvh instanceof Promise)return this._pendingGenerate||(this._pendingGenerate=new Promise(async()=>(await this.bvh,this._pendingGenerate=null,this.generateAsync(t)))),this._pendingGenerate;{this._buildAsync=!0;const e=this.generate(t);return this._buildAsync=!1,e.bvh=this.bvh=await e.bvh,e}}generate(t=null){const{staticGeometryGenerator:e,geometry:n,attributes:s}=this,r=e.objects;e.attributes=s,r.forEach(f=>{f.traverse(c=>{c.isSkinnedMesh&&c.skeleton&&c.skeleton.update()})});const a=e.generate(n),o=a.materials,l=Bc(o),{lights:u,iesTextures:h}=zc(r);if(a.changeType!==ta&&Ac(n,o,o),this.generateBVH){if(this.bvh instanceof Promise)throw new Error("PathTracingSceneGenerator: BVH is already building asynchronously.");if(a.changeType===c3){const f={strategy:Zo,maxLeafTris:1,indirect:!0,onProgress:t,...this.bvhOptions};this._buildAsync?this.bvh=this._bvhWorker.generate(n,f):this.bvh=new va(n,f)}else a.changeType===l3&&this.bvh.refit()}return{bvhChanged:a.changeType!==ta,bvh:this.bvh,lights:u,iesTextures:h,geometry:n,materials:o,textures:l,objects:r}}}const Hc=new Go(-1,1,1,-1,0,1);class Vc extends St{constructor(){super(),this.setAttribute("position",new yt([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new yt([0,2,0,0,2,0],2))}}const Gc=new Vc;class vi{constructor(t){this._mesh=new At(Gc,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,Hc)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class ya extends ce{set needsUpdate(t){super.needsUpdate=!0,this.dispatchEvent({type:"recompilation"})}constructor(t){super(t);for(const e in this.uniforms)Object.defineProperty(this,e,{get(){return this.uniforms[e].value},set(n){this.uniforms[e].value=n}})}setDefine(t,e=void 0){if(e==null){if(t in this.defines)return delete this.defines[t],this.needsUpdate=!0,!0}else if(this.defines[t]!==e)return this.defines[t]=e,this.needsUpdate=!0,!0;return!1}}class Wc extends ya{constructor(t){super({blending:Kt,uniforms:{target1:{value:null},target2:{value:null},opacity:{value:1}},vertexShader:`

				varying vec2 vUv;

				void main() {

					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

				}`,fragmentShader:`

				uniform float opacity;

				uniform sampler2D target1;
				uniform sampler2D target2;

				varying vec2 vUv;

				void main() {

					vec4 color1 = texture2D( target1, vUv );
					vec4 color2 = texture2D( target2, vUv );

					float invOpacity = 1.0 - opacity;
					float totalAlpha = color1.a * invOpacity + color2.a * opacity;

					if ( color1.a != 0.0 || color2.a != 0.0 ) {

						gl_FragColor.rgb = color1.rgb * ( invOpacity * color1.a / totalAlpha ) + color2.rgb * ( opacity * color2.a / totalAlpha );
						gl_FragColor.a = totalAlpha;

					} else {

						gl_FragColor = vec4( 0.0 );

					}

				}`}),this.setValues(t)}}function L1(i=1){let t="uint";return i>1&&(t="uvec"+i),`
		${t} sobolReverseBits( ${t} x ) {

			x = ( ( ( x & 0xaaaaaaaau ) >> 1 ) | ( ( x & 0x55555555u ) << 1 ) );
			x = ( ( ( x & 0xccccccccu ) >> 2 ) | ( ( x & 0x33333333u ) << 2 ) );
			x = ( ( ( x & 0xf0f0f0f0u ) >> 4 ) | ( ( x & 0x0f0f0f0fu ) << 4 ) );
			x = ( ( ( x & 0xff00ff00u ) >> 8 ) | ( ( x & 0x00ff00ffu ) << 8 ) );
			return ( ( x >> 16 ) | ( x << 16 ) );

		}

		${t} sobolHashCombine( uint seed, ${t} v ) {

			return seed ^ ( v + ${t}( ( seed << 6 ) + ( seed >> 2 ) ) );

		}

		${t} sobolLaineKarrasPermutation( ${t} x, ${t} seed ) {

			x += seed;
			x ^= x * 0x6c50b47cu;
			x ^= x * 0xb82f1e52u;
			x ^= x * 0xc7afe638u;
			x ^= x * 0x8d22f6e6u;
			return x;

		}

		${t} nestedUniformScrambleBase2( ${t} x, ${t} seed ) {

			x = sobolLaineKarrasPermutation( x, seed );
			x = sobolReverseBits( x );
			return x;

		}
	`}function F1(i=1){let t="uint",e="float",n="",s=".r",r="1u";return i>1&&(t="uvec"+i,e="vec"+i,n=i+"",i===2?(s=".rg",r="uvec2( 1u, 2u )"):i===3?(s=".rgb",r="uvec3( 1u, 2u, 3u )"):(s="",r="uvec4( 1u, 2u, 3u, 4u )")),`

		${e} sobol${n}( int effect ) {

			uint seed = sobolGetSeed( sobolBounceIndex, uint( effect ) );
			uint index = sobolPathIndex;

			uint shuffle_seed = sobolHashCombine( seed, 0u );
			uint shuffled_index = nestedUniformScrambleBase2( sobolReverseBits( index ), shuffle_seed );
			${e} sobol_pt = sobolGetTexturePoint( shuffled_index )${s};
			${t} result = ${t}( sobol_pt * 16777216.0 );

			${t} seed2 = sobolHashCombine( seed, ${r} );
			result = nestedUniformScrambleBase2( result, seed2 );

			return SOBOL_FACTOR * ${e}( result >> 8 );

		}
	`}const u3=`

	// Utils
	const float SOBOL_FACTOR = 1.0 / 16777216.0;
	const uint SOBOL_MAX_POINTS = 256u * 256u;

	${L1(1)}
	${L1(2)}
	${L1(3)}
	${L1(4)}

	uint sobolHash( uint x ) {

		// finalizer from murmurhash3
		x ^= x >> 16;
		x *= 0x85ebca6bu;
		x ^= x >> 13;
		x *= 0xc2b2ae35u;
		x ^= x >> 16;
		return x;

	}

`,Xc=`

	const uint SOBOL_DIRECTIONS_1[ 32 ] = uint[ 32 ](
		0x80000000u, 0xc0000000u, 0xa0000000u, 0xf0000000u,
		0x88000000u, 0xcc000000u, 0xaa000000u, 0xff000000u,
		0x80800000u, 0xc0c00000u, 0xa0a00000u, 0xf0f00000u,
		0x88880000u, 0xcccc0000u, 0xaaaa0000u, 0xffff0000u,
		0x80008000u, 0xc000c000u, 0xa000a000u, 0xf000f000u,
		0x88008800u, 0xcc00cc00u, 0xaa00aa00u, 0xff00ff00u,
		0x80808080u, 0xc0c0c0c0u, 0xa0a0a0a0u, 0xf0f0f0f0u,
		0x88888888u, 0xccccccccu, 0xaaaaaaaau, 0xffffffffu
	);

	const uint SOBOL_DIRECTIONS_2[ 32 ] = uint[ 32 ](
		0x80000000u, 0xc0000000u, 0x60000000u, 0x90000000u,
		0xe8000000u, 0x5c000000u, 0x8e000000u, 0xc5000000u,
		0x68800000u, 0x9cc00000u, 0xee600000u, 0x55900000u,
		0x80680000u, 0xc09c0000u, 0x60ee0000u, 0x90550000u,
		0xe8808000u, 0x5cc0c000u, 0x8e606000u, 0xc5909000u,
		0x6868e800u, 0x9c9c5c00u, 0xeeee8e00u, 0x5555c500u,
		0x8000e880u, 0xc0005cc0u, 0x60008e60u, 0x9000c590u,
		0xe8006868u, 0x5c009c9cu, 0x8e00eeeeu, 0xc5005555u
	);

	const uint SOBOL_DIRECTIONS_3[ 32 ] = uint[ 32 ](
		0x80000000u, 0xc0000000u, 0x20000000u, 0x50000000u,
		0xf8000000u, 0x74000000u, 0xa2000000u, 0x93000000u,
		0xd8800000u, 0x25400000u, 0x59e00000u, 0xe6d00000u,
		0x78080000u, 0xb40c0000u, 0x82020000u, 0xc3050000u,
		0x208f8000u, 0x51474000u, 0xfbea2000u, 0x75d93000u,
		0xa0858800u, 0x914e5400u, 0xdbe79e00u, 0x25db6d00u,
		0x58800080u, 0xe54000c0u, 0x79e00020u, 0xb6d00050u,
		0x800800f8u, 0xc00c0074u, 0x200200a2u, 0x50050093u
	);

	const uint SOBOL_DIRECTIONS_4[ 32 ] = uint[ 32 ](
		0x80000000u, 0x40000000u, 0x20000000u, 0xb0000000u,
		0xf8000000u, 0xdc000000u, 0x7a000000u, 0x9d000000u,
		0x5a800000u, 0x2fc00000u, 0xa1600000u, 0xf0b00000u,
		0xda880000u, 0x6fc40000u, 0x81620000u, 0x40bb0000u,
		0x22878000u, 0xb3c9c000u, 0xfb65a000u, 0xddb2d000u,
		0x78022800u, 0x9c0b3c00u, 0x5a0fb600u, 0x2d0ddb00u,
		0xa2878080u, 0xf3c9c040u, 0xdb65a020u, 0x6db2d0b0u,
		0x800228f8u, 0x400b3cdcu, 0x200fb67au, 0xb00ddb9du
	);

	uint getMaskedSobol( uint index, uint directions[ 32 ] ) {

		uint X = 0u;
		for ( int bit = 0; bit < 32; bit ++ ) {

			uint mask = ( index >> bit ) & 1u;
			X ^= mask * directions[ bit ];

		}
		return X;

	}

	vec4 generateSobolPoint( uint index ) {

		if ( index >= SOBOL_MAX_POINTS ) {

			return vec4( 0.0 );

		}

		// NOTE: this sobol "direction" is also available but we can't write out 5 components
		// uint x = index & 0x00ffffffu;
		uint x = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_1 ) ) & 0x00ffffffu;
		uint y = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_2 ) ) & 0x00ffffffu;
		uint z = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_3 ) ) & 0x00ffffffu;
		uint w = sobolReverseBits( getMaskedSobol( index, SOBOL_DIRECTIONS_4 ) ) & 0x00ffffffu;

		return vec4( x, y, z, w ) * SOBOL_FACTOR;

	}

`,qc=`

	// Seeds
	uniform sampler2D sobolTexture;
	uint sobolPixelIndex = 0u;
	uint sobolPathIndex = 0u;
	uint sobolBounceIndex = 0u;

	uint sobolGetSeed( uint bounce, uint effect ) {

		return sobolHash(
			sobolHashCombine(
				sobolHashCombine(
					sobolHash( bounce ),
					sobolPixelIndex
				),
				effect
			)
		);

	}

	vec4 sobolGetTexturePoint( uint index ) {

		if ( index >= SOBOL_MAX_POINTS ) {

			index = index % SOBOL_MAX_POINTS;

		}

		uvec2 dim = uvec2( textureSize( sobolTexture, 0 ).xy );
		uint y = index / dim.x;
		uint x = index - y * dim.x;
		vec2 uv = vec2( x, y ) / vec2( dim );
		return texture( sobolTexture, uv );

	}

	${F1(1)}
	${F1(2)}
	${F1(3)}
	${F1(4)}

`;class Yc extends ya{constructor(){super({blending:Kt,uniforms:{resolution:{value:new f0}},vertexShader:`

				varying vec2 vUv;
				void main() {

					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

				}
			`,fragmentShader:`

				${u3}
				${Xc}

				varying vec2 vUv;
				uniform vec2 resolution;
				void main() {

					uint index = uint( gl_FragCoord.y ) * uint( resolution.x ) + uint( gl_FragCoord.x );
					gl_FragColor = generateSobolPoint( index );

				}
			`})}}class $c{generate(t,e=256){const n=new Zt(e,e,{type:nt,format:Z0,minFilter:B0,magFilter:B0,generateMipmaps:!1}),s=t.getRenderTarget();t.setRenderTarget(n);const r=new vi(new Yc);return r.material.resolution.set(e,e),r.render(t),t.setRenderTarget(s),r.dispose(),n}}class jc extends Lt{set bokehSize(t){this.fStop=this.getFocalLength()/t}get bokehSize(){return this.getFocalLength()/this.fStop}constructor(...t){super(...t),this.fStop=1.4,this.apertureBlades=0,this.apertureRotation=0,this.focusDistance=25,this.anamorphicRatio=1}copy(t,e){return super.copy(t,e),this.fStop=t.fStop,this.apertureBlades=t.apertureBlades,this.apertureRotation=t.apertureRotation,this.focusDistance=t.focusDistance,this.anamorphicRatio=t.anamorphicRatio,this}}class Kc{constructor(){this.bokehSize=0,this.apertureBlades=0,this.apertureRotation=0,this.focusDistance=10,this.anamorphicRatio=1}updateFrom(t){t instanceof jc?(this.bokehSize=t.bokehSize,this.apertureBlades=t.apertureBlades,this.apertureRotation=t.apertureRotation,this.focusDistance=t.focusDistance,this.anamorphicRatio=t.anamorphicRatio):(this.bokehSize=0,this.apertureRotation=0,this.apertureBlades=0,this.focusDistance=10,this.anamorphicRatio=1)}}function er(i){const t=new Uint16Array(i.length);for(let e=0,n=i.length;e<n;++e)t[e]=Le.toHalfFloat(i[e]);return t}function J2(i,t,e=0,n=i.length){let s=e,r=e+n-1;for(;s<r;){const a=s+r>>1;i[a]<t?s=a+1:r=a}return s-e}function Zc(i,t,e){return .2126*i+.7152*t+.0722*e}function Jc(i,t=Ft){const e=i.clone();e.source=new la({...e.image});const{width:n,height:s,data:r}=e.image;let a=r;if(e.type!==t){t===Ft?a=new Uint16Array(r.length):a=new Float32Array(r.length);let o;r instanceof Int8Array||r instanceof Int16Array||r instanceof Int32Array?o=2**(8*r.BYTES_PER_ELEMENT-1)-1:o=2**(8*r.BYTES_PER_ELEMENT)-1;for(let l=0,u=r.length;l<u;l++){let h=r[l];e.type===Ft&&(h=Le.fromHalfFloat(r[l])),e.type!==nt&&e.type!==Ft&&(h/=o),t===Ft&&(a[l]=Le.toHalfFloat(h))}e.image.data=a,e.type=t}if(e.flipY){const o=a;a=a.slice();for(let l=0;l<s;l++)for(let u=0;u<n;u++){const h=s-l-1,f=4*(l*n+u),c=4*(h*n+u);a[c+0]=o[f+0],a[c+1]=o[f+1],a[c+2]=o[f+2],a[c+3]=o[f+3]}e.flipY=!1,e.image.data=a}return e}class Qc{constructor(){const t=new oe(er(new Float32Array([0,0,0,0])),1,1);t.type=Ft,t.format=Z0,t.minFilter=ft,t.magFilter=ft,t.wrapS=_e,t.wrapT=_e,t.generateMipmaps=!1,t.needsUpdate=!0;const e=new oe(er(new Float32Array([0,1])),1,2);e.type=Ft,e.format=di,e.minFilter=ft,e.magFilter=ft,e.generateMipmaps=!1,e.needsUpdate=!0;const n=new oe(er(new Float32Array([0,0,1,1])),2,2);n.type=Ft,n.format=di,n.minFilter=ft,n.magFilter=ft,n.generateMipmaps=!1,n.needsUpdate=!0,this.map=t,this.marginalWeights=e,this.conditionalWeights=n,this.totalSum=0}dispose(){this.marginalWeights.dispose(),this.conditionalWeights.dispose(),this.map.dispose()}updateFrom(t){const e=Jc(t);e.wrapS=_e,e.wrapT=Nt;const{width:n,height:s,data:r}=e.image,a=new Float32Array(n*s),o=new Float32Array(n*s),l=new Float32Array(s),u=new Float32Array(s);let h=0,f=0;for(let d=0;d<s;d++){let p=0;for(let x=0;x<n;x++){const y=d*n+x,v=Le.fromHalfFloat(r[4*y+0]),T=Le.fromHalfFloat(r[4*y+1]),A=Le.fromHalfFloat(r[4*y+2]),w=Zc(v,T,A);p+=w,h+=w,a[y]=w,o[y]=p}if(p!==0)for(let x=d*n,y=d*n+n;x<y;x++)a[x]/=p,o[x]/=p;f+=p,l[d]=p,u[d]=f}if(f!==0)for(let d=0,p=l.length;d<p;d++)l[d]/=f,u[d]/=f;const c=new Uint16Array(s),m=new Uint16Array(n*s);for(let d=0;d<s;d++){const p=(d+1)/s,x=J2(u,p);c[d]=Le.toHalfFloat((x+.5)/s)}for(let d=0;d<s;d++)for(let p=0;p<n;p++){const x=d*n+p,y=(p+1)/n,v=J2(o,y,d*n,n);m[x]=Le.toHalfFloat((v+.5)/n)}this.dispose();const{marginalWeights:g,conditionalWeights:_}=this;g.image={width:s,height:1,data:c},g.needsUpdate=!0,_.image={width:n,height:s,data:m},_.needsUpdate=!0,this.totalSum=h,this.map=e}}const nr=6,tu=0,eu=1,nu=2,iu=3,su=4,me=new D,Gt=new D,Q2=new U0,Yn=new Je,to=new D,$n=new D,ru=new D(0,1,0);class au{constructor(){const t=new oe(new Float32Array(4),1,1);t.format=Z0,t.type=nt,t.wrapS=Nt,t.wrapT=Nt,t.generateMipmaps=!1,t.minFilter=B0,t.magFilter=B0,this.tex=t,this.count=0}updateFrom(t,e=[]){const n=this.tex,s=Math.max(t.length*nr,1),r=Math.ceil(Math.sqrt(s));n.image.width!==r&&(n.dispose(),n.image.data=new Float32Array(r*r*4),n.image.width=r,n.image.height=r);const a=n.image.data;for(let l=0,u=t.length;l<u;l++){const h=t[l],f=l*nr*4;let c=0;for(let g=0;g<nr*4;g++)a[f+g]=0;h.getWorldPosition(Gt),a[f+c++]=Gt.x,a[f+c++]=Gt.y,a[f+c++]=Gt.z;let m=tu;if(h.isRectAreaLight&&h.isCircular?m=eu:h.isSpotLight?m=nu:h.isDirectionalLight?m=iu:h.isPointLight&&(m=su),a[f+c++]=m,a[f+c++]=h.color.r,a[f+c++]=h.color.g,a[f+c++]=h.color.b,a[f+c++]=h.intensity,h.getWorldQuaternion(Yn),h.isRectAreaLight)me.set(h.width,0,0).applyQuaternion(Yn),a[f+c++]=me.x,a[f+c++]=me.y,a[f+c++]=me.z,c++,Gt.set(0,h.height,0).applyQuaternion(Yn),a[f+c++]=Gt.x,a[f+c++]=Gt.y,a[f+c++]=Gt.z,a[f+c++]=me.cross(Gt).length()*(h.isCircular?Math.PI/4:1);else if(h.isSpotLight){const g=h.radius||0;to.setFromMatrixPosition(h.matrixWorld),$n.setFromMatrixPosition(h.target.matrixWorld),Q2.lookAt(to,$n,ru),Yn.setFromRotationMatrix(Q2),me.set(1,0,0).applyQuaternion(Yn),a[f+c++]=me.x,a[f+c++]=me.y,a[f+c++]=me.z,c++,Gt.set(0,1,0).applyQuaternion(Yn),a[f+c++]=Gt.x,a[f+c++]=Gt.y,a[f+c++]=Gt.z,a[f+c++]=Math.PI*g*g,a[f+c++]=g,a[f+c++]=h.decay,a[f+c++]=h.distance,a[f+c++]=Math.cos(h.angle),a[f+c++]=Math.cos(h.angle*(1-h.penumbra)),a[f+c++]=h.iesMap?e.indexOf(h.iesMap):-1}else if(h.isPointLight){const g=me.setFromMatrixPosition(h.matrixWorld);a[f+c++]=g.x,a[f+c++]=g.y,a[f+c++]=g.z,c++,c+=4,c+=1,a[f+c++]=h.decay,a[f+c++]=h.distance}else if(h.isDirectionalLight){const g=me.setFromMatrixPosition(h.matrixWorld),_=Gt.setFromMatrixPosition(h.target.matrixWorld);$n.subVectors(g,_).normalize(),a[f+c++]=$n.x,a[f+c++]=$n.y,a[f+c++]=$n.z}}this.count=t.length;const o=xa(a.buffer);return this.hash!==o?(this.hash=o,n.needsUpdate=!0,!0):!1}}function eo(i,t,e,n,s){if(t>n)throw new Error;const r=i.length/t,a=i.constructor.BYTES_PER_ELEMENT*8;let o=1;switch(i.constructor){case Uint8Array:case Uint16Array:case Uint32Array:o=2**a-1;break;case Int8Array:case Int16Array:case Int32Array:o=2**(a-1)-1;break}for(let l=0;l<r;l++){const u=4*l,h=t*l;for(let f=0;f<n;f++)e[s+u+f]=t>=f+1?i[h+f]/o:0}}class ou extends ts{constructor(){super(),this._textures=[],this.type=nt,this.format=Z0,this.internalFormat="RGBA32F"}updateAttribute(t,e){const n=this._textures[t];n.updateFrom(e);const s=n.image,r=this.image;if(s.width!==r.width||s.height!==r.height)throw new Error("FloatAttributeTextureArray: Attribute must be the same dimensions when updating single layer.");const{width:a,height:o,data:l}=r,h=a*o*4*t;let f=e.itemSize;f===3&&(f=4),eo(n.image.data,f,l,4,h),this.dispose(),this.needsUpdate=!0}setAttributes(t){const e=t[0].count,n=t.length;for(let f=0,c=n;f<c;f++)if(t[f].count!==e)throw new Error("FloatAttributeTextureArray: All attributes must have the same item count.");const s=this._textures;for(;s.length<n;){const f=new a3;s.push(f)}for(;s.length>n;)s.pop();for(let f=0,c=n;f<c;f++)s[f].updateFrom(t[f]);const a=s[0].image,o=this.image;(a.width!==o.width||a.height!==o.height||a.depth!==n)&&(o.width=a.width,o.height=a.height,o.depth=n,o.data=new Float32Array(o.width*o.height*o.depth*4));const{data:l,width:u,height:h}=o;for(let f=0,c=n;f<c;f++){const m=s[f],_=u*h*4*f;let d=t[f].itemSize;d===3&&(d=4),eo(m.image.data,d,l,4,_)}this.dispose(),this.needsUpdate=!0}}class lu extends ou{updateNormalAttribute(t){this.updateAttribute(0,t)}updateTangentAttribute(t){this.updateAttribute(1,t)}updateUvAttribute(t){this.updateAttribute(2,t)}updateColorAttribute(t){this.updateAttribute(3,t)}updateFrom(t,e,n,s){this.setAttributes([t,e,n,s])}}function Ma(i,t){return i.uuid<t.uuid?1:i.uuid>t.uuid?-1:0}function ea(i){return`${i.source.uuid}:${i.colorSpace}`}function cu(i){const t=new Set,e=[];for(let n=0,s=i.length;n<s;n++){const r=i[n],a=ea(r);t.has(a)||(t.add(a),e.push(r))}return e}function uu(i){const t=i.map(n=>n.iesMap||null).filter(n=>n),e=new Set(t);return Array.from(e).sort(Ma)}function hu(i){const t=new Set;for(let n=0,s=i.length;n<s;n++){const r=i[n];for(const a in r){const o=r[a];o&&o.isTexture&&t.add(o)}}const e=Array.from(t);return cu(e).sort(Ma)}function fu(i){const t=[];return i.traverse(e=>{e.visible&&(e.isRectAreaLight||e.isSpotLight||e.isPointLight||e.isDirectionalLight)&&t.push(e)}),t.sort(Ma)}const h3=45,no=h3*4;class du{constructor(){this._features={}}isUsed(t){return t in this._features}setUsed(t,e=!0){e===!1?delete this._features[t]:this._features[t]=!0}reset(){this._features={}}}class pu extends oe{constructor(){super(new Float32Array(4),1,1),this.format=Z0,this.type=nt,this.wrapS=Nt,this.wrapT=Nt,this.minFilter=B0,this.magFilter=B0,this.generateMipmaps=!1,this.features=new du}updateFrom(t,e){function n(g,_,d=-1){if(_ in g&&g[_]){const p=ea(g[_]);return f[p]}else return d}function s(g,_,d){return _ in g?g[_]:d}function r(g,_,d,p){const x=g[_]&&g[_].isTexture?g[_]:null;if(x){x.matrixAutoUpdate&&x.updateMatrix();const y=x.matrix.elements;let v=0;d[p+v++]=y[0],d[p+v++]=y[3],d[p+v++]=y[6],v++,d[p+v++]=y[1],d[p+v++]=y[4],d[p+v++]=y[7],v++}return 8}let a=0;const o=t.length*h3,l=Math.ceil(Math.sqrt(o))||1,{image:u,features:h}=this,f={};for(let g=0,_=e.length;g<_;g++)f[ea(e[g])]=g;u.width!==l&&(this.dispose(),u.data=new Float32Array(l*l*4),u.width=l,u.height=l);const c=u.data;h.reset();for(let g=0,_=t.length;g<_;g++){const d=t[g];if(d.isFogVolumeMaterial){h.setUsed("FOG");for(let y=0;y<no;y++)c[a+y]=0;c[a+0*4+0]=d.color.r,c[a+0*4+1]=d.color.g,c[a+0*4+2]=d.color.b,c[a+2*4+3]=s(d,"emissiveIntensity",0),c[a+3*4+0]=d.emissive.r,c[a+3*4+1]=d.emissive.g,c[a+3*4+2]=d.emissive.b,c[a+13*4+1]=d.density,c[a+13*4+3]=0,c[a+14*4+2]=4,a+=no;continue}c[a++]=d.color.r,c[a++]=d.color.g,c[a++]=d.color.b,c[a++]=n(d,"map"),c[a++]=s(d,"metalness",0),c[a++]=n(d,"metalnessMap"),c[a++]=s(d,"roughness",0),c[a++]=n(d,"roughnessMap"),c[a++]=s(d,"ior",1.5),c[a++]=s(d,"transmission",0),c[a++]=n(d,"transmissionMap"),c[a++]=s(d,"emissiveIntensity",0),"emissive"in d?(c[a++]=d.emissive.r,c[a++]=d.emissive.g,c[a++]=d.emissive.b):(c[a++]=0,c[a++]=0,c[a++]=0),c[a++]=n(d,"emissiveMap"),c[a++]=n(d,"normalMap"),"normalScale"in d?(c[a++]=d.normalScale.x,c[a++]=d.normalScale.y):(c[a++]=1,c[a++]=1),c[a++]=s(d,"clearcoat",0),c[a++]=n(d,"clearcoatMap"),c[a++]=s(d,"clearcoatRoughness",0),c[a++]=n(d,"clearcoatRoughnessMap"),c[a++]=n(d,"clearcoatNormalMap"),"clearcoatNormalScale"in d?(c[a++]=d.clearcoatNormalScale.x,c[a++]=d.clearcoatNormalScale.y):(c[a++]=1,c[a++]=1),a++,c[a++]=s(d,"sheen",0),"sheenColor"in d?(c[a++]=d.sheenColor.r,c[a++]=d.sheenColor.g,c[a++]=d.sheenColor.b):(c[a++]=0,c[a++]=0,c[a++]=0),c[a++]=n(d,"sheenColorMap"),c[a++]=s(d,"sheenRoughness",0),c[a++]=n(d,"sheenRoughnessMap"),c[a++]=n(d,"iridescenceMap"),c[a++]=n(d,"iridescenceThicknessMap"),c[a++]=s(d,"iridescence",0),c[a++]=s(d,"iridescenceIOR",1.3);const p=s(d,"iridescenceThicknessRange",[100,400]);c[a++]=p[0],c[a++]=p[1],"specularColor"in d?(c[a++]=d.specularColor.r,c[a++]=d.specularColor.g,c[a++]=d.specularColor.b):(c[a++]=1,c[a++]=1,c[a++]=1),c[a++]=n(d,"specularColorMap"),c[a++]=s(d,"specularIntensity",1),c[a++]=n(d,"specularIntensityMap");const x=s(d,"thickness",0)===0&&s(d,"attenuationDistance",1/0)===1/0;if(c[a++]=Number(x),a++,"attenuationColor"in d?(c[a++]=d.attenuationColor.r,c[a++]=d.attenuationColor.g,c[a++]=d.attenuationColor.b):(c[a++]=1,c[a++]=1,c[a++]=1),c[a++]=s(d,"attenuationDistance",1/0),c[a++]=n(d,"alphaMap"),c[a++]=d.opacity,c[a++]=d.alphaTest,!x&&d.transmission>0)c[a++]=0;else switch(d.side){case ve:c[a++]=1;break;case Rt:c[a++]=-1;break;case ie:c[a++]=0;break}c[a++]=Number(s(d,"matte",!1)),c[a++]=Number(s(d,"castShadow",!0)),c[a++]=Number(d.vertexColors)|Number(d.flatShading)<<1,c[a++]=Number(d.transparent),a+=r(d,"map",c,a),a+=r(d,"metalnessMap",c,a),a+=r(d,"roughnessMap",c,a),a+=r(d,"transmissionMap",c,a),a+=r(d,"emissiveMap",c,a),a+=r(d,"normalMap",c,a),a+=r(d,"clearcoatMap",c,a),a+=r(d,"clearcoatNormalMap",c,a),a+=r(d,"clearcoatRoughnessMap",c,a),a+=r(d,"sheenColorMap",c,a),a+=r(d,"sheenRoughnessMap",c,a),a+=r(d,"iridescenceMap",c,a),a+=r(d,"iridescenceThicknessMap",c,a),a+=r(d,"specularColorMap",c,a),a+=r(d,"specularIntensityMap",c,a)}const m=xa(c.buffer);return this.hash!==m?(this.hash=m,this.needsUpdate=!0,!0):!1}}const io=new F0;function mu(i){return i?`${i.uuid}:${i.version}`:null}function gu(i,t){for(const e in t)e in i&&(i[e]=t[e])}class so extends O5{constructor(t,e,n){const s={format:Z0,type:le,minFilter:ft,magFilter:ft,wrapS:_e,wrapT:_e,generateMipmaps:!1,...n};super(t,e,1,s),gu(this.texture,s),this.texture.setTextures=(...a)=>{this.setTextures(...a)},this.hashes=[null];const r=new vi(new _u);this.fsQuad=r}setTextures(t,e,n=this.width,s=this.height){const r=t.getRenderTarget(),a=t.toneMapping,o=t.getClearAlpha();t.getClearColor(io);const l=e.length||1;(n!==this.width||s!==this.height||this.depth!==l)&&(this.setSize(n,s,l),this.hashes=new Array(l).fill(null)),t.setClearColor(0,0),t.toneMapping=Ue;const u=this.fsQuad,h=this.hashes;let f=!1;for(let c=0,m=l;c<m;c++){const g=e[c],_=mu(g);g&&(h[c]!==_||g.isWebGLRenderTarget)&&(g.matrixAutoUpdate=!1,g.matrix.identity(),u.material.map=g,t.setRenderTarget(this,c),u.render(t),g.updateMatrix(),g.matrixAutoUpdate=!0,h[c]=_,f=!0)}return u.material.map=null,t.setClearColor(io,o),t.setRenderTarget(r),t.toneMapping=a,f}dispose(){super.dispose(),this.fsQuad.dispose()}}class _u extends ce{get map(){return this.uniforms.map.value}set map(t){this.uniforms.map.value=t}constructor(){super({uniforms:{map:{value:null}},vertexShader:`
				varying vec2 vUv;
				void main() {

					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

				}
			`,fragmentShader:`
				uniform sampler2D map;
				varying vec2 vUv;
				void main() {

					gl_FragColor = texture2D( map, vUv );

				}
			`})}}function vu(i,t=Math.random()){for(let e=i.length-1;e>0;e--){const n=Math.floor(t()*(e+1)),s=i[e];i[e]=i[n],i[n]=s}return i}class xu{constructor(t,e,n=Math.random){const s=t**e,r=new Uint16Array(s);let a=s;for(let o=0;o<s;o++)r[o]=o;this.samples=new Float32Array(e),this.strataCount=t,this.reset=function(){for(let o=0;o<s;o++)r[o]=o;a=0},this.reshuffle=function(){a=0},this.next=function(){const{samples:o}=this;a>=r.length&&(vu(r,n),this.reshuffle());let l=r[a++];for(let u=0;u<e;u++)o[u]=(l%t+n())/t,l=Math.floor(l/t);return o}}}class yu{constructor(t,e,n=Math.random){let s=0;for(const l of e)s+=l;const r=new Float32Array(s),a=[];let o=0;for(const l of e){const u=new xu(t,l,n);u.samples=new Float32Array(r.buffer,o,u.samples.length),o+=u.samples.length*4,a.push(u)}this.samples=r,this.strataCount=t,this.next=function(){for(const l of a)l.next();return r},this.reshuffle=function(){for(const l of a)l.reshuffle()},this.reset=function(){for(const l of a)l.reset()}}}class Mu{constructor(t=0){this.m=2147483648,this.a=1103515245,this.c=12345,this.seed=t}nextInt(){return this.seed=(this.a*this.seed+this.c)%this.m,this.seed}nextFloat(){return this.nextInt()/(this.m-1)}}class bu extends oe{constructor(t=1,e=1,n=8){super(new Float32Array(1),1,1,Z0,nt),this.minFilter=B0,this.magFilter=B0,this.strata=n,this.sampler=null,this.generator=new Mu,this.stableNoise=!1,this.random=()=>this.stableNoise?this.generator.nextFloat():Math.random(),this.init(t,e,n)}init(t=this.image.height,e=this.image.width,n=this.strata){const{image:s}=this;if(s.width===e&&s.height===t&&this.sampler!==null)return;const r=new Array(t*e).fill(4),a=new yu(n,r,this.random);s.width=e,s.height=t,s.data=a.samples,this.sampler=a,this.dispose(),this.next()}next(){this.sampler.next(),this.needsUpdate=!0}reset(){this.sampler.reset(),this.generator.seed=0}}function Su(i,t=Math.random){for(let e=i.length-1;e>0;e--){const n=~~((t()-1e-6)*e),s=i[e];i[e]=i[n],i[n]=s}}function Tu(i,t){i.fill(0);for(let e=0;e<t;e++)i[e]=1}class ro{constructor(t){this.count=0,this.size=-1,this.sigma=-1,this.radius=-1,this.lookupTable=null,this.score=null,this.binaryPattern=null,this.resize(t),this.setSigma(1.5)}findVoid(){const{score:t,binaryPattern:e}=this;let n=1/0,s=-1;for(let r=0,a=e.length;r<a;r++){if(e[r]!==0)continue;const o=t[r];o<n&&(n=o,s=r)}return s}findCluster(){const{score:t,binaryPattern:e}=this;let n=-1/0,s=-1;for(let r=0,a=e.length;r<a;r++){if(e[r]!==1)continue;const o=t[r];o>n&&(n=o,s=r)}return s}setSigma(t){if(t===this.sigma)return;const e=~~(Math.sqrt(10*2*t**2)+1),n=2*e+1,s=new Float32Array(n*n),r=t*t;for(let a=-e;a<=e;a++)for(let o=-e;o<=e;o++){const l=(e+o)*n+a+e,u=a*a+o*o;s[l]=Math.E**(-u/(2*r))}this.lookupTable=s,this.sigma=t,this.radius=e}resize(t){this.size!==t&&(this.size=t,this.score=new Float32Array(t*t),this.binaryPattern=new Uint8Array(t*t))}invert(){const{binaryPattern:t,score:e,size:n}=this;e.fill(0);for(let s=0,r=t.length;s<r;s++)if(t[s]===0){const a=~~(s/n),o=s-a*n;this.updateScore(o,a,1),t[s]=1}else t[s]=0}updateScore(t,e,n){const{size:s,score:r,lookupTable:a}=this,o=this.radius,l=2*o+1;for(let u=-o;u<=o;u++)for(let h=-o;h<=o;h++){const f=(o+h)*l+u+o,c=a[f];let m=t+u;m=m<0?s+m:m%s;let g=e+h;g=g<0?s+g:g%s;const _=g*s+m;r[_]+=n*c}}addPointIndex(t){this.binaryPattern[t]=1;const e=this.size,n=~~(t/e),s=t-n*e;this.updateScore(s,n,1),this.count++}removePointIndex(t){this.binaryPattern[t]=0;const e=this.size,n=~~(t/e),s=t-n*e;this.updateScore(s,n,-1),this.count--}copy(t){this.resize(t.size),this.score.set(t.score),this.binaryPattern.set(t.binaryPattern),this.setSigma(t.sigma),this.count=t.count}}class Eu{constructor(){this.random=Math.random,this.sigma=1.5,this.size=64,this.majorityPointsRatio=.1,this.samples=new ro(1),this.savedSamples=new ro(1)}generate(){const{samples:t,savedSamples:e,sigma:n,majorityPointsRatio:s,size:r}=this;t.resize(r),t.setSigma(n);const a=Math.floor(r*r*s),o=t.binaryPattern;Tu(o,a),Su(o,this.random);for(let f=0,c=o.length;f<c;f++)o[f]===1&&t.addPointIndex(f);for(;;){const f=t.findCluster();t.removePointIndex(f);const c=t.findVoid();if(f===c){t.addPointIndex(f);break}t.addPointIndex(c)}const l=new Uint32Array(r*r);e.copy(t);let u;for(u=t.count-1;u>=0;){const f=t.findCluster();t.removePointIndex(f),l[f]=u,u--}const h=r*r;for(u=e.count;u<h/2;){const f=e.findVoid();e.addPointIndex(f),l[f]=u,u++}for(e.invert();u<h;){const f=e.findCluster();e.removePointIndex(f),l[f]=u,u++}return{data:l,maxValue:h}}}function wu(i){return i>=3?4:i}function Au(i){switch(i){case 1:return di;case 2:return Q1;default:return Z0}}class Ru extends oe{constructor(t=64,e=1){super(new Float32Array(4),1,1,Z0,nt),this.minFilter=B0,this.magFilter=B0,this.size=t,this.channels=e,this.update()}update(){const t=this.channels,e=this.size,n=new Eu;n.channels=t,n.size=e;const s=wu(t),r=Au(s);(this.image.width!==e||r!==this.format)&&(this.image.width=e,this.image.height=e,this.image.data=new Float32Array(e**2*s),this.format=r,this.dispose());const a=this.image.data;for(let o=0,l=t;o<l;o++){const u=n.generate(),h=u.data,f=u.maxValue;for(let c=0,m=h.length;c<m;c++){const g=h[c]/f;a[c*s+o]=g}}this.needsUpdate=!0}}const Cu=`

	struct PhysicalCamera {

		float focusDistance;
		float anamorphicRatio;
		float bokehSize;
		int apertureBlades;
		float apertureRotation;

	};

`,Pu=`

	struct EquirectHdrInfo {

		sampler2D marginalWeights;
		sampler2D conditionalWeights;
		sampler2D map;

		float totalSum;

	};

`,Du=`

	#define RECT_AREA_LIGHT_TYPE 0
	#define CIRC_AREA_LIGHT_TYPE 1
	#define SPOT_LIGHT_TYPE 2
	#define DIR_LIGHT_TYPE 3
	#define POINT_LIGHT_TYPE 4

	struct LightsInfo {

		sampler2D tex;
		uint count;

	};

	struct Light {

		vec3 position;
		int type;

		vec3 color;
		float intensity;

		vec3 u;
		vec3 v;
		float area;

		// spot light fields
		float radius;
		float near;
		float decay;
		float distance;
		float coneCos;
		float penumbraCos;
		int iesProfile;

	};

	Light readLightInfo( sampler2D tex, uint index ) {

		uint i = index * 6u;

		vec4 s0 = texelFetch1D( tex, i + 0u );
		vec4 s1 = texelFetch1D( tex, i + 1u );
		vec4 s2 = texelFetch1D( tex, i + 2u );
		vec4 s3 = texelFetch1D( tex, i + 3u );

		Light l;
		l.position = s0.rgb;
		l.type = int( round( s0.a ) );

		l.color = s1.rgb;
		l.intensity = s1.a;

		l.u = s2.rgb;
		l.v = s3.rgb;
		l.area = s3.a;

		if ( l.type == SPOT_LIGHT_TYPE || l.type == POINT_LIGHT_TYPE ) {

			vec4 s4 = texelFetch1D( tex, i + 4u );
			vec4 s5 = texelFetch1D( tex, i + 5u );
			l.radius = s4.r;
			l.decay = s4.g;
			l.distance = s4.b;
			l.coneCos = s4.a;

			l.penumbraCos = s5.r;
			l.iesProfile = int( round( s5.g ) );

		} else {

			l.radius = 0.0;
			l.decay = 0.0;
			l.distance = 0.0;

			l.coneCos = 0.0;
			l.penumbraCos = 0.0;
			l.iesProfile = - 1;

		}

		return l;

	}

`,Iu=`

	struct Material {

		vec3 color;
		int map;

		float metalness;
		int metalnessMap;

		float roughness;
		int roughnessMap;

		float ior;
		float transmission;
		int transmissionMap;

		float emissiveIntensity;
		vec3 emissive;
		int emissiveMap;

		int normalMap;
		vec2 normalScale;

		float clearcoat;
		int clearcoatMap;
		int clearcoatNormalMap;
		vec2 clearcoatNormalScale;
		float clearcoatRoughness;
		int clearcoatRoughnessMap;

		int iridescenceMap;
		int iridescenceThicknessMap;
		float iridescence;
		float iridescenceIor;
		float iridescenceThicknessMinimum;
		float iridescenceThicknessMaximum;

		vec3 specularColor;
		int specularColorMap;

		float specularIntensity;
		int specularIntensityMap;
		bool thinFilm;

		vec3 attenuationColor;
		float attenuationDistance;

		int alphaMap;

		bool castShadow;
		float opacity;
		float alphaTest;

		float side;
		bool matte;

		float sheen;
		vec3 sheenColor;
		int sheenColorMap;
		float sheenRoughness;
		int sheenRoughnessMap;

		bool vertexColors;
		bool flatShading;
		bool transparent;
		bool fogVolume;

		mat3 mapTransform;
		mat3 metalnessMapTransform;
		mat3 roughnessMapTransform;
		mat3 transmissionMapTransform;
		mat3 emissiveMapTransform;
		mat3 normalMapTransform;
		mat3 clearcoatMapTransform;
		mat3 clearcoatNormalMapTransform;
		mat3 clearcoatRoughnessMapTransform;
		mat3 sheenColorMapTransform;
		mat3 sheenRoughnessMapTransform;
		mat3 iridescenceMapTransform;
		mat3 iridescenceThicknessMapTransform;
		mat3 specularColorMapTransform;
		mat3 specularIntensityMapTransform;

	};

	mat3 readTextureTransform( sampler2D tex, uint index ) {

		mat3 textureTransform;

		vec4 row1 = texelFetch1D( tex, index );
		vec4 row2 = texelFetch1D( tex, index + 1u );

		textureTransform[0] = vec3(row1.r, row2.r, 0.0);
		textureTransform[1] = vec3(row1.g, row2.g, 0.0);
		textureTransform[2] = vec3(row1.b, row2.b, 1.0);

		return textureTransform;

	}

	Material readMaterialInfo( sampler2D tex, uint index ) {

		uint i = index * 45u;

		vec4 s0 = texelFetch1D( tex, i + 0u );
		vec4 s1 = texelFetch1D( tex, i + 1u );
		vec4 s2 = texelFetch1D( tex, i + 2u );
		vec4 s3 = texelFetch1D( tex, i + 3u );
		vec4 s4 = texelFetch1D( tex, i + 4u );
		vec4 s5 = texelFetch1D( tex, i + 5u );
		vec4 s6 = texelFetch1D( tex, i + 6u );
		vec4 s7 = texelFetch1D( tex, i + 7u );
		vec4 s8 = texelFetch1D( tex, i + 8u );
		vec4 s9 = texelFetch1D( tex, i + 9u );
		vec4 s10 = texelFetch1D( tex, i + 10u );
		vec4 s11 = texelFetch1D( tex, i + 11u );
		vec4 s12 = texelFetch1D( tex, i + 12u );
		vec4 s13 = texelFetch1D( tex, i + 13u );
		vec4 s14 = texelFetch1D( tex, i + 14u );

		Material m;
		m.color = s0.rgb;
		m.map = int( round( s0.a ) );

		m.metalness = s1.r;
		m.metalnessMap = int( round( s1.g ) );
		m.roughness = s1.b;
		m.roughnessMap = int( round( s1.a ) );

		m.ior = s2.r;
		m.transmission = s2.g;
		m.transmissionMap = int( round( s2.b ) );
		m.emissiveIntensity = s2.a;

		m.emissive = s3.rgb;
		m.emissiveMap = int( round( s3.a ) );

		m.normalMap = int( round( s4.r ) );
		m.normalScale = s4.gb;

		m.clearcoat = s4.a;
		m.clearcoatMap = int( round( s5.r ) );
		m.clearcoatRoughness = s5.g;
		m.clearcoatRoughnessMap = int( round( s5.b ) );
		m.clearcoatNormalMap = int( round( s5.a ) );
		m.clearcoatNormalScale = s6.rg;

		m.sheen = s6.a;
		m.sheenColor = s7.rgb;
		m.sheenColorMap = int( round( s7.a ) );
		m.sheenRoughness = s8.r;
		m.sheenRoughnessMap = int( round( s8.g ) );

		m.iridescenceMap = int( round( s8.b ) );
		m.iridescenceThicknessMap = int( round( s8.a ) );
		m.iridescence = s9.r;
		m.iridescenceIor = s9.g;
		m.iridescenceThicknessMinimum = s9.b;
		m.iridescenceThicknessMaximum = s9.a;

		m.specularColor = s10.rgb;
		m.specularColorMap = int( round( s10.a ) );

		m.specularIntensity = s11.r;
		m.specularIntensityMap = int( round( s11.g ) );
		m.thinFilm = bool( s11.b );

		m.attenuationColor = s12.rgb;
		m.attenuationDistance = s12.a;

		m.alphaMap = int( round( s13.r ) );

		m.opacity = s13.g;
		m.alphaTest = s13.b;
		m.side = s13.a;

		m.matte = bool( s14.r );
		m.castShadow = bool( s14.g );
		m.vertexColors = bool( int( s14.b ) & 1 );
		m.flatShading = bool( int( s14.b ) & 2 );
		m.fogVolume = bool( int( s14.b ) & 4 );
		m.transparent = bool( s14.a );

		uint firstTextureTransformIdx = i + 15u;

		// mat3( 1.0 ) is an identity matrix
		m.mapTransform = m.map == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx );
		m.metalnessMapTransform = m.metalnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 2u );
		m.roughnessMapTransform = m.roughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 4u );
		m.transmissionMapTransform = m.transmissionMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 6u );
		m.emissiveMapTransform = m.emissiveMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 8u );
		m.normalMapTransform = m.normalMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 10u );
		m.clearcoatMapTransform = m.clearcoatMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 12u );
		m.clearcoatNormalMapTransform = m.clearcoatNormalMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 14u );
		m.clearcoatRoughnessMapTransform = m.clearcoatRoughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 16u );
		m.sheenColorMapTransform = m.sheenColorMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 18u );
		m.sheenRoughnessMapTransform = m.sheenRoughnessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 20u );
		m.iridescenceMapTransform = m.iridescenceMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 22u );
		m.iridescenceThicknessMapTransform = m.iridescenceThicknessMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 24u );
		m.specularColorMapTransform = m.specularColorMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 26u );
		m.specularIntensityMapTransform = m.specularIntensityMap == - 1 ? mat3( 1.0 ) : readTextureTransform( tex, firstTextureTransformIdx + 28u );

		return m;

	}

`,Lu=`

	struct SurfaceRecord {

		// surface type
		bool volumeParticle;

		// geometry
		vec3 faceNormal;
		bool frontFace;
		vec3 normal;
		mat3 normalBasis;
		mat3 normalInvBasis;

		// cached properties
		float eta;
		float f0;

		// material
		float roughness;
		float filteredRoughness;
		float metalness;
		vec3 color;
		vec3 emission;

		// transmission
		float ior;
		float transmission;
		bool thinFilm;
		vec3 attenuationColor;
		float attenuationDistance;

		// clearcoat
		vec3 clearcoatNormal;
		mat3 clearcoatBasis;
		mat3 clearcoatInvBasis;
		float clearcoat;
		float clearcoatRoughness;
		float filteredClearcoatRoughness;

		// sheen
		float sheen;
		vec3 sheenColor;
		float sheenRoughness;

		// iridescence
		float iridescence;
		float iridescenceIor;
		float iridescenceThickness;

		// specular
		vec3 specularColor;
		float specularIntensity;
	};

	struct ScatterRecord {
		float specularPdf;
		float pdf;
		vec3 direction;
		vec3 color;
	};

`,Fu=`

	// samples the the given environment map in the given direction
	vec3 sampleEquirectColor( sampler2D envMap, vec3 direction ) {

		return texture2D( envMap, equirectDirectionToUv( direction ) ).rgb;

	}

	// gets the pdf of the given direction to sample
	float equirectDirectionPdf( vec3 direction ) {

		vec2 uv = equirectDirectionToUv( direction );
		float theta = uv.y * PI;
		float sinTheta = sin( theta );
		if ( sinTheta == 0.0 ) {

			return 0.0;

		}

		return 1.0 / ( 2.0 * PI * PI * sinTheta );

	}

	// samples the color given env map with CDF and returns the pdf of the direction
	float sampleEquirect( vec3 direction, inout vec3 color ) {

		float totalSum = envMapInfo.totalSum;
		if ( totalSum == 0.0 ) {

			color = vec3( 0.0 );
			return 1.0;

		}

		vec2 uv = equirectDirectionToUv( direction );
		color = texture2D( envMapInfo.map, uv ).rgb;

		float lum = luminance( color );
		ivec2 resolution = textureSize( envMapInfo.map, 0 );
		float pdf = lum / totalSum;

		return float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );

	}

	// samples a direction of the envmap with color and retrieves pdf
	float sampleEquirectProbability( vec2 r, inout vec3 color, inout vec3 direction ) {

		// sample env map cdf
		float v = texture2D( envMapInfo.marginalWeights, vec2( r.x, 0.0 ) ).x;
		float u = texture2D( envMapInfo.conditionalWeights, vec2( r.y, v ) ).x;
		vec2 uv = vec2( u, v );

		vec3 derivedDirection = equirectUvToDirection( uv );
		direction = derivedDirection;
		color = texture2D( envMapInfo.map, uv ).rgb;

		float totalSum = envMapInfo.totalSum;
		float lum = luminance( color );
		ivec2 resolution = textureSize( envMapInfo.map, 0 );
		float pdf = lum / totalSum;

		return float( resolution.x * resolution.y ) * pdf * equirectDirectionPdf( direction );

	}
`,Uu=`

	float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {

		return smoothstep( coneCosine, penumbraCosine, angleCosine );

	}

	float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {

		// based upon Frostbite 3 Moving to Physically-based Rendering
		// page 32, equation 26: E[window1]
		// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), EPSILON );

		if ( cutoffDistance > 0.0 ) {

			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );

		}

		return distanceFalloff;

	}

	float getPhotometricAttenuation( sampler2DArray iesProfiles, int iesProfile, vec3 posToLight, vec3 lightDir, vec3 u, vec3 v ) {

		float cosTheta = dot( posToLight, lightDir );
		float angle = acos( cosTheta ) / PI;

		return texture2D( iesProfiles, vec3( angle, 0.0, iesProfile ) ).r;

	}

	struct LightRecord {

		float dist;
		vec3 direction;
		float pdf;
		vec3 emission;
		int type;

	};

	bool intersectLightAtIndex( sampler2D lights, vec3 rayOrigin, vec3 rayDirection, uint l, inout LightRecord lightRec ) {

		bool didHit = false;
		Light light = readLightInfo( lights, l );

		vec3 u = light.u;
		vec3 v = light.v;

		// check for backface
		vec3 normal = normalize( cross( u, v ) );
		if ( dot( normal, rayDirection ) > 0.0 ) {

			u *= 1.0 / dot( u, u );
			v *= 1.0 / dot( v, v );

			float dist;

			// MIS / light intersection is not supported for punctual lights.
			if(
				( light.type == RECT_AREA_LIGHT_TYPE && intersectsRectangle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) ) ||
				( light.type == CIRC_AREA_LIGHT_TYPE && intersectsCircle( light.position, normal, u, v, rayOrigin, rayDirection, dist ) )
			) {

				float cosTheta = dot( rayDirection, normal );
				didHit = true;
				lightRec.dist = dist;
				lightRec.pdf = ( dist * dist ) / ( light.area * cosTheta );
				lightRec.emission = light.color * light.intensity;
				lightRec.direction = rayDirection;
				lightRec.type = light.type;

			}

		}

		return didHit;

	}

	LightRecord randomAreaLightSample( Light light, vec3 rayOrigin, vec2 ruv ) {

		vec3 randomPos;
		if( light.type == RECT_AREA_LIGHT_TYPE ) {

			// rectangular area light
			randomPos = light.position + light.u * ( ruv.x - 0.5 ) + light.v * ( ruv.y - 0.5 );

		} else if( light.type == CIRC_AREA_LIGHT_TYPE ) {

			// circular area light
			float r = 0.5 * sqrt( ruv.x );
			float theta = ruv.y * 2.0 * PI;
			float x = r * cos( theta );
			float y = r * sin( theta );

			randomPos = light.position + light.u * x + light.v * y;

		}

		vec3 toLight = randomPos - rayOrigin;
		float lightDistSq = dot( toLight, toLight );
		float dist = sqrt( lightDistSq );
		vec3 direction = toLight / dist;
		vec3 lightNormal = normalize( cross( light.u, light.v ) );

		LightRecord lightRec;
		lightRec.type = light.type;
		lightRec.emission = light.color * light.intensity;
		lightRec.dist = dist;
		lightRec.direction = direction;

		// TODO: the denominator is potentially zero
		lightRec.pdf = lightDistSq / ( light.area * dot( direction, lightNormal ) );

		return lightRec;

	}

	LightRecord randomSpotLightSample( Light light, sampler2DArray iesProfiles, vec3 rayOrigin, vec2 ruv ) {

		float radius = light.radius * sqrt( ruv.x );
		float theta = ruv.y * 2.0 * PI;
		float x = radius * cos( theta );
		float y = radius * sin( theta );

		vec3 u = light.u;
		vec3 v = light.v;
		vec3 normal = normalize( cross( u, v ) );

		float angle = acos( light.coneCos );
		float angleTan = tan( angle );
		float startDistance = light.radius / max( angleTan, EPSILON );

		vec3 randomPos = light.position - normal * startDistance + u * x + v * y;
		vec3 toLight = randomPos - rayOrigin;
		float lightDistSq = dot( toLight, toLight );
		float dist = sqrt( lightDistSq );

		vec3 direction = toLight / max( dist, EPSILON );
		float cosTheta = dot( direction, normal );

		float spotAttenuation = light.iesProfile != - 1 ?
			getPhotometricAttenuation( iesProfiles, light.iesProfile, direction, normal, u, v ) :
			getSpotAttenuation( light.coneCos, light.penumbraCos, cosTheta );

		float distanceAttenuation = getDistanceAttenuation( dist, light.distance, light.decay );
		LightRecord lightRec;
		lightRec.type = light.type;
		lightRec.dist = dist;
		lightRec.direction = direction;
		lightRec.emission = light.color * light.intensity * distanceAttenuation * spotAttenuation;
		lightRec.pdf = 1.0;

		return lightRec;

	}

	LightRecord randomLightSample( sampler2D lights, sampler2DArray iesProfiles, uint lightCount, vec3 rayOrigin, vec3 ruv ) {

		LightRecord result;

		// pick a random light
		uint l = uint( ruv.x * float( lightCount ) );
		Light light = readLightInfo( lights, l );

		if ( light.type == SPOT_LIGHT_TYPE ) {

			result = randomSpotLightSample( light, iesProfiles, rayOrigin, ruv.yz );

		} else if ( light.type == POINT_LIGHT_TYPE ) {

			vec3 lightRay = light.u - rayOrigin;
			float lightDist = length( lightRay );
			float cutoffDistance = light.distance;
			float distanceFalloff = 1.0 / max( pow( lightDist, light.decay ), 0.01 );
			if ( cutoffDistance > 0.0 ) {

				distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDist / cutoffDistance ) ) );

			}

			LightRecord rec;
			rec.direction = normalize( lightRay );
			rec.dist = length( lightRay );
			rec.pdf = 1.0;
			rec.emission = light.color * light.intensity * distanceFalloff;
			rec.type = light.type;
			result = rec;

		} else if ( light.type == DIR_LIGHT_TYPE ) {

			LightRecord rec;
			rec.dist = 1e10;
			rec.direction = light.u;
			rec.pdf = 1.0;
			rec.emission = light.color * light.intensity;
			rec.type = light.type;

			result = rec;

		} else {

			// sample the light
			result = randomAreaLightSample( light, rayOrigin, ruv.yz );

		}

		return result;

	}

`,Nu=`

	vec3 sampleHemisphere( vec3 n, vec2 uv ) {

		// https://www.rorydriscoll.com/2009/01/07/better-sampling/
		// https://graphics.pixar.com/library/OrthonormalB/paper.pdf
		float sign = n.z == 0.0 ? 1.0 : sign( n.z );
		float a = - 1.0 / ( sign + n.z );
		float b = n.x * n.y * a;
		vec3 b1 = vec3( 1.0 + sign * n.x * n.x * a, sign * b, - sign * n.x );
		vec3 b2 = vec3( b, sign + n.y * n.y * a, - n.y );

		float r = sqrt( uv.x );
		float theta = 2.0 * PI * uv.y;
		float x = r * cos( theta );
		float y = r * sin( theta );
		return x * b1 + y * b2 + sqrt( 1.0 - uv.x ) * n;

	}

	vec2 sampleTriangle( vec2 a, vec2 b, vec2 c, vec2 r ) {

		// get the edges of the triangle and the diagonal across the
		// center of the parallelogram
		vec2 e1 = a - b;
		vec2 e2 = c - b;
		vec2 diag = normalize( e1 + e2 );

		// pick the point in the parallelogram
		if ( r.x + r.y > 1.0 ) {

			r = vec2( 1.0 ) - r;

		}

		return e1 * r.x + e2 * r.y;

	}

	vec2 sampleCircle( vec2 uv ) {

		float angle = 2.0 * PI * uv.x;
		float radius = sqrt( uv.y );
		return vec2( cos( angle ), sin( angle ) ) * radius;

	}

	vec3 sampleSphere( vec2 uv ) {

		float u = ( uv.x - 0.5 ) * 2.0;
		float t = uv.y * PI * 2.0;
		float f = sqrt( 1.0 - u * u );

		return vec3( f * cos( t ), f * sin( t ), u );

	}

	vec2 sampleRegularPolygon( int sides, vec3 uvw ) {

		sides = max( sides, 3 );

		vec3 r = uvw;
		float anglePerSegment = 2.0 * PI / float( sides );
		float segment = floor( float( sides ) * r.x );

		float angle1 = anglePerSegment * segment;
		float angle2 = angle1 + anglePerSegment;
		vec2 a = vec2( sin( angle1 ), cos( angle1 ) );
		vec2 b = vec2( 0.0, 0.0 );
		vec2 c = vec2( sin( angle2 ), cos( angle2 ) );

		return sampleTriangle( a, b, c, r.yz );

	}

	// samples an aperture shape with the given number of sides. 0 means circle
	vec2 sampleAperture( int blades, vec3 uvw ) {

		return blades == 0 ?
			sampleCircle( uvw.xy ) :
			sampleRegularPolygon( blades, uvw );

	}


`,Ou=`

	bool totalInternalReflection( float cosTheta, float eta ) {

		float sinTheta = sqrt( 1.0 - cosTheta * cosTheta );
		return eta * sinTheta > 1.0;

	}

	// https://google.github.io/filament/Filament.md.html#materialsystem/diffusebrdf
	float schlickFresnel( float cosine, float f0 ) {

		return f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );

	}

	vec3 schlickFresnel( float cosine, vec3 f0 ) {

		return f0 + ( 1.0 - f0 ) * pow( 1.0 - cosine, 5.0 );

	}

	vec3 schlickFresnel( float cosine, vec3 f0, vec3 f90 ) {

		return f0 + ( f90 - f0 ) * pow( 1.0 - cosine, 5.0 );

	}

	float dielectricFresnel( float cosThetaI, float eta ) {

		// https://schuttejoe.github.io/post/disneybsdf/
		float ni = eta;
		float nt = 1.0;

		// Check for total internal reflection
		float sinThetaISq = 1.0f - cosThetaI * cosThetaI;
		float sinThetaTSq = eta * eta * sinThetaISq;
		if( sinThetaTSq >= 1.0 ) {

			return 1.0;

		}

		float sinThetaT = sqrt( sinThetaTSq );

		float cosThetaT = sqrt( max( 0.0, 1.0f - sinThetaT * sinThetaT ) );
		float rParallel = ( ( nt * cosThetaI ) - ( ni * cosThetaT ) ) / ( ( nt * cosThetaI ) + ( ni * cosThetaT ) );
		float rPerpendicular = ( ( ni * cosThetaI ) - ( nt * cosThetaT ) ) / ( ( ni * cosThetaI ) + ( nt * cosThetaT ) );
		return ( rParallel * rParallel + rPerpendicular * rPerpendicular ) / 2.0;

	}

	// https://raytracing.github.io/books/RayTracingInOneWeekend.html#dielectrics/schlickapproximation
	float iorRatioToF0( float eta ) {

		return pow( ( 1.0 - eta ) / ( 1.0 + eta ), 2.0 );

	}

	vec3 evaluateFresnel( float cosTheta, float eta, vec3 f0, vec3 f90 ) {

		if ( totalInternalReflection( cosTheta, eta ) ) {

			return f90;

		}

		return schlickFresnel( cosTheta, f0, f90 );

	}

	// TODO: disney fresnel was removed and replaced with this fresnel function to better align with
	// the glTF but is causing blown out pixels. Should be revisited
	// float evaluateFresnelWeight( float cosTheta, float eta, float f0 ) {

	// 	if ( totalInternalReflection( cosTheta, eta ) ) {

	// 		return 1.0;

	// 	}

	// 	return schlickFresnel( cosTheta, f0 );

	// }

	// https://schuttejoe.github.io/post/disneybsdf/
	float disneyFresnel( vec3 wo, vec3 wi, vec3 wh, float f0, float eta, float metalness ) {

		float dotHV = dot( wo, wh );
		if ( totalInternalReflection( dotHV, eta ) ) {

			return 1.0;

		}

		float dotHL = dot( wi, wh );
		float dielectricFresnel = dielectricFresnel( abs( dotHV ), eta );
		float metallicFresnel = schlickFresnel( dotHL, f0 );

		return mix( dielectricFresnel, metallicFresnel, metalness );

	}

`,Bu=`

	// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.
	// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].
	// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248
	float acosApprox( float x ) {

		x = clamp( x, -1.0, 1.0 );
		return ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;

	}

	// An acos with input values bound to the range [-1, 1].
	float acosSafe( float x ) {

		return acos( clamp( x, -1.0, 1.0 ) );

	}

	float saturateCos( float val ) {

		return clamp( val, 0.001, 1.0 );

	}

	float square( float t ) {

		return t * t;

	}

	vec2 square( vec2 t ) {

		return t * t;

	}

	vec3 square( vec3 t ) {

		return t * t;

	}

	vec4 square( vec4 t ) {

		return t * t;

	}

	vec2 rotateVector( vec2 v, float t ) {

		float ac = cos( t );
		float as = sin( t );
		return vec2(
			v.x * ac - v.y * as,
			v.x * as + v.y * ac
		);

	}

	// forms a basis with the normal vector as Z
	mat3 getBasisFromNormal( vec3 normal ) {

		vec3 other;
		if ( abs( normal.x ) > 0.5 ) {

			other = vec3( 0.0, 1.0, 0.0 );

		} else {

			other = vec3( 1.0, 0.0, 0.0 );

		}

		vec3 ortho = normalize( cross( normal, other ) );
		vec3 ortho2 = normalize( cross( normal, ortho ) );
		return mat3( ortho2, ortho, normal );

	}

`,zu=`

	// Finds the point where the ray intersects the plane defined by u and v and checks if this point
	// falls in the bounds of the rectangle on that same plane.
	// Plane intersection: https://lousodrome.net/blog/light/2020/07/03/intersection-of-a-ray-and-a-plane/
	bool intersectsRectangle( vec3 center, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, inout float dist ) {

		float t = dot( center - rayOrigin, normal ) / dot( rayDirection, normal );

		if ( t > EPSILON ) {

			vec3 p = rayOrigin + rayDirection * t;
			vec3 vi = p - center;

			// check if p falls inside the rectangle
			float a1 = dot( u, vi );
			if ( abs( a1 ) <= 0.5 ) {

				float a2 = dot( v, vi );
				if ( abs( a2 ) <= 0.5 ) {

					dist = t;
					return true;

				}

			}

		}

		return false;

	}

	// Finds the point where the ray intersects the plane defined by u and v and checks if this point
	// falls in the bounds of the circle on that same plane. See above URL for a description of the plane intersection algorithm.
	bool intersectsCircle( vec3 position, vec3 normal, vec3 u, vec3 v, vec3 rayOrigin, vec3 rayDirection, inout float dist ) {

		float t = dot( position - rayOrigin, normal ) / dot( rayDirection, normal );

		if ( t > EPSILON ) {

			vec3 hit = rayOrigin + rayDirection * t;
			vec3 vi = hit - position;

			float a1 = dot( u, vi );
			float a2 = dot( v, vi );

			if( length( vec2( a1, a2 ) ) <= 0.5 ) {

				dist = t;
				return true;

			}

		}

		return false;

	}

`,ku=`

	// add texel fetch functions for texture arrays
	vec4 texelFetch1D( sampler2DArray tex, int layer, uint index ) {

		uint width = uint( textureSize( tex, 0 ).x );
		uvec2 uv;
		uv.x = index % width;
		uv.y = index / width;

		return texelFetch( tex, ivec3( uv, layer ), 0 );

	}

	vec4 textureSampleBarycoord( sampler2DArray tex, int layer, vec3 barycoord, uvec3 faceIndices ) {

		return
			barycoord.x * texelFetch1D( tex, layer, faceIndices.x ) +
			barycoord.y * texelFetch1D( tex, layer, faceIndices.y ) +
			barycoord.z * texelFetch1D( tex, layer, faceIndices.z );

	}

`,f3=`

	// TODO: possibly this should be renamed something related to material or path tracing logic

	#ifndef RAY_OFFSET
	#define RAY_OFFSET 1e-4
	#endif

	// adjust the hit point by the surface normal by a factor of some offset and the
	// maximum component-wise value of the current point to accommodate floating point
	// error as values increase.
	vec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {

		vec3 point = rayOrigin + rayDirection * dist;
		vec3 absPoint = abs( point );
		float maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );
		return point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;

	}

	// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation
	vec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {

		vec3 ot = - log( attColor ) / attDist;
		return exp( - ot * dist );

	}

	vec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {

		// get the half vector - assuming if the light incident vector is on the other side
		// of the that it's transmissive.
		vec3 h;
		if ( wi.z > 0.0 ) {

			h = normalize( wi + wo );

		} else {

			// Scale by the ior ratio to retrieve the appropriate half vector
			// From Section 2.2 on computing the transmission half vector:
			// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf
			h = normalize( wi + wo * eta );

		}

		h *= sign( h.z );
		return h;

	}

	vec3 getHalfVector( vec3 a, vec3 b ) {

		return normalize( a + b );

	}

	// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray
	// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If
	// we find a ray like that we ignore it to avoid artifacts.
	// This function returns if the direction is on the same side of both planes.
	bool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {

		bool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;
		bool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;
		return aboveSurfaceNormal == aboveGeometryNormal;

	}

	// ray sampling x and z are swapped to align with expected background view
	vec2 equirectDirectionToUv( vec3 direction ) {

		// from Spherical.setFromCartesianCoords
		vec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );
		uv /= vec2( 2.0 * PI, PI );

		// apply adjustments to get values in range [0, 1] and y right side up
		uv.x += 0.5;
		uv.y = 1.0 - uv.y;
		return uv;

	}

	vec3 equirectUvToDirection( vec2 uv ) {

		// undo above adjustments
		uv.x -= 0.5;
		uv.y = 1.0 - uv.y;

		// from Vector3.setFromSphericalCoords
		float theta = uv.x * 2.0 * PI;
		float phi = uv.y * PI;

		float sinPhi = sin( phi );

		return vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );

	}

	// power heuristic for multiple importance sampling
	float misHeuristic( float a, float b ) {

		float aa = a * a;
		float bb = b * b;
		return aa / ( aa + bb );

	}

	// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60
	// erichlof/THREE.js-PathTracing-Renderer/
	float tentFilter( float x ) {

		return x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );

	}
`,ao=`

	// https://www.shadertoy.com/view/wltcRS
	uvec4 WHITE_NOISE_SEED;

	void rng_initialize( vec2 p, int frame ) {

		// white noise seed
		WHITE_NOISE_SEED = uvec4( p, uint( frame ), uint( p.x ) + uint( p.y ) );

	}

	// https://www.pcg-random.org/
	void pcg4d( inout uvec4 v ) {

		v = v * 1664525u + 1013904223u;
		v.x += v.y * v.w;
		v.y += v.z * v.x;
		v.z += v.x * v.y;
		v.w += v.y * v.z;
		v = v ^ ( v >> 16u );
		v.x += v.y*v.w;
		v.y += v.z*v.x;
		v.z += v.x*v.y;
		v.w += v.y*v.z;

	}

	// returns [ 0, 1 ]
	float pcgRand() {

		pcg4d( WHITE_NOISE_SEED );
		return float( WHITE_NOISE_SEED.x ) / float( 0xffffffffu );

	}

	vec2 pcgRand2() {

		pcg4d( WHITE_NOISE_SEED );
		return vec2( WHITE_NOISE_SEED.xy ) / float(0xffffffffu);

	}

	vec3 pcgRand3() {

		pcg4d( WHITE_NOISE_SEED );
		return vec3( WHITE_NOISE_SEED.xyz ) / float( 0xffffffffu );

	}

	vec4 pcgRand4() {

		pcg4d( WHITE_NOISE_SEED );
		return vec4( WHITE_NOISE_SEED ) / float( 0xffffffffu );

	}
`,Hu=`

	uniform sampler2D stratifiedTexture;
	uniform sampler2D stratifiedOffsetTexture;

	uint sobolPixelIndex = 0u;
	uint sobolPathIndex = 0u;
	uint sobolBounceIndex = 0u;
	vec4 pixelSeed = vec4( 0 );

	vec4 rand4( int v ) {

		ivec2 uv = ivec2( v, sobolBounceIndex );
		vec4 stratifiedSample = texelFetch( stratifiedTexture, uv, 0 );
		return fract( stratifiedSample + pixelSeed.r ); // blue noise + stratified samples

	}

	vec3 rand3( int v ) {

		return rand4( v ).xyz;

	}

	vec2 rand2( int v ) {

		return rand4( v ).xy;

	}

	float rand( int v ) {

		return rand4( v ).x;

	}

	void rng_initialize( vec2 screenCoord, int frame ) {

		// tile the small noise texture across the entire screen
		ivec2 noiseSize = ivec2( textureSize( stratifiedOffsetTexture, 0 ) );
		ivec2 pixel = ivec2( screenCoord.xy ) % noiseSize;
		vec2 pixelWidth = 1.0 / vec2( noiseSize );
		vec2 uv = vec2( pixel ) * pixelWidth + pixelWidth * 0.5;

		// note that using "texelFetch" here seems to break Android for some reason
		pixelSeed = texture( stratifiedOffsetTexture, uv );

	}

`,Vu=`

	// diffuse
	float diffuseEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {

		// https://schuttejoe.github.io/post/disneybsdf/
		float fl = schlickFresnel( wi.z, 0.0 );
		float fv = schlickFresnel( wo.z, 0.0 );

		float metalFactor = ( 1.0 - surf.metalness );
		float transFactor = ( 1.0 - surf.transmission );
		float rr = 0.5 + 2.0 * surf.roughness * fl * fl;
		float retro = rr * ( fl + fv + fl * fv * ( rr - 1.0f ) );
		float lambert = ( 1.0f - 0.5f * fl ) * ( 1.0f - 0.5f * fv );

		// TODO: subsurface approx?

		// float F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );
		float F = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );
		color = ( 1.0 - F ) * transFactor * metalFactor * wi.z * surf.color * ( retro + lambert ) / PI;

		return wi.z / PI;

	}

	vec3 diffuseDirection( vec3 wo, SurfaceRecord surf ) {

		vec3 lightDirection = sampleSphere( rand2( 11 ) );
		lightDirection.z += 1.0;
		lightDirection = normalize( lightDirection );

		return lightDirection;

	}

	// specular
	float specularEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {

		// if roughness is set to 0 then D === NaN which results in black pixels
		float metalness = surf.metalness;
		float roughness = surf.filteredRoughness;

		float eta = surf.eta;
		float f0 = surf.f0;

		vec3 f0Color = mix( f0 * surf.specularColor * surf.specularIntensity, surf.color, surf.metalness );
		vec3 f90Color = vec3( mix( surf.specularIntensity, 1.0, surf.metalness ) );
		vec3 F = evaluateFresnel( dot( wo, wh ), eta, f0Color, f90Color );

		vec3 iridescenceF = evalIridescence( 1.0, surf.iridescenceIor, dot( wi, wh ), surf.iridescenceThickness, f0Color );
		F = mix( F, iridescenceF,  surf.iridescence );

		// PDF
		// See 14.1.1 Microfacet BxDFs in https://www.pbr-book.org/
		float incidentTheta = acos( wo.z );
		float G = ggxShadowMaskG2( wi, wo, roughness );
		float D = ggxDistribution( wh, roughness );
		float G1 = ggxShadowMaskG1( incidentTheta, roughness );
		float ggxPdf = D * G1 * max( 0.0, abs( dot( wo, wh ) ) ) / abs ( wo.z );

		color = wi.z * F * G * D / ( 4.0 * abs( wi.z * wo.z ) );
		return ggxPdf / ( 4.0 * dot( wo, wh ) );

	}

	vec3 specularDirection( vec3 wo, SurfaceRecord surf ) {

		// sample ggx vndf distribution which gives a new normal
		float roughness = surf.filteredRoughness;
		vec3 halfVector = ggxDirection(
			wo,
			vec2( roughness ),
			rand2( 12 )
		);

		// apply to new ray by reflecting off the new normal
		return - reflect( wo, halfVector );

	}


	// transmission
	/*
	float transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {

		// See section 4.2 in https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf

		float filteredRoughness = surf.filteredRoughness;
		float eta = surf.eta;
		bool frontFace = surf.frontFace;
		bool thinFilm = surf.thinFilm;

		color = surf.transmission * surf.color;

		float denom = pow( eta * dot( wi, wh ) + dot( wo, wh ), 2.0 );
		return ggxPDF( wo, wh, filteredRoughness ) / denom;

	}

	vec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {

		float filteredRoughness = surf.filteredRoughness;
		float eta = surf.eta;
		bool frontFace = surf.frontFace;

		// sample ggx vndf distribution which gives a new normal
		vec3 halfVector = ggxDirection(
			wo,
			vec2( filteredRoughness ),
			rand2( 13 )
		);

		vec3 lightDirection = refract( normalize( - wo ), halfVector, eta );
		if ( surf.thinFilm ) {

			lightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );

		}

		return normalize( lightDirection );

	}
	*/

	// TODO: This is just using a basic cosine-weighted specular distribution with an
	// incorrect PDF value at the moment. Update it to correctly use a GGX distribution
	float transmissionEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {

		color = surf.transmission * surf.color;

		// PDF
		// float F = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );
		// float F = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );
		// if ( F >= 1.0 ) {

		// 	return 0.0;

		// }

		// return 1.0 / ( 1.0 - F );

		// reverted to previous to transmission. The above was causing black pixels
		float eta = surf.eta;
		float f0 = surf.f0;
		float cosTheta = min( wo.z, 1.0 );
		float sinTheta = sqrt( 1.0 - cosTheta * cosTheta );
		float reflectance = schlickFresnel( cosTheta, f0 );
		bool cannotRefract = eta * sinTheta > 1.0;
		if ( cannotRefract ) {

			return 0.0;

		}

		return 1.0 / ( 1.0 - reflectance );

	}

	vec3 transmissionDirection( vec3 wo, SurfaceRecord surf ) {

		float roughness = surf.filteredRoughness;
		float eta = surf.eta;
		vec3 halfVector = normalize( vec3( 0.0, 0.0, 1.0 ) + sampleSphere( rand2( 13 ) ) * roughness );
		vec3 lightDirection = refract( normalize( - wo ), halfVector, eta );

		if ( surf.thinFilm ) {

			lightDirection = - refract( normalize( - lightDirection ), - vec3( 0.0, 0.0, 1.0 ), 1.0 / eta );

		}
		return normalize( lightDirection );

	}

	// clearcoat
	float clearcoatEval( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf, inout vec3 color ) {

		float ior = 1.5;
		float f0 = iorRatioToF0( ior );
		bool frontFace = surf.frontFace;
		float roughness = surf.filteredClearcoatRoughness;

		float eta = frontFace ? 1.0 / ior : ior;
		float G = ggxShadowMaskG2( wi, wo, roughness );
		float D = ggxDistribution( wh, roughness );
		float F = schlickFresnel( dot( wi, wh ), f0 );

		float fClearcoat = F * D * G / ( 4.0 * abs( wi.z * wo.z ) );
		color = color * ( 1.0 - surf.clearcoat * F ) + fClearcoat * surf.clearcoat * wi.z;

		// PDF
		// See equation (27) in http://jcgt.org/published/0003/02/03/
		return ggxPDF( wo, wh, roughness ) / ( 4.0 * dot( wi, wh ) );

	}

	vec3 clearcoatDirection( vec3 wo, SurfaceRecord surf ) {

		// sample ggx vndf distribution which gives a new normal
		float roughness = surf.filteredClearcoatRoughness;
		vec3 halfVector = ggxDirection(
			wo,
			vec2( roughness ),
			rand2( 14 )
		);

		// apply to new ray by reflecting off the new normal
		return - reflect( wo, halfVector );

	}

	// sheen
	vec3 sheenColor( vec3 wo, vec3 wi, vec3 wh, SurfaceRecord surf ) {

		float cosThetaO = saturateCos( wo.z );
		float cosThetaI = saturateCos( wi.z );
		float cosThetaH = wh.z;

		float D = velvetD( cosThetaH, surf.sheenRoughness );
		float G = velvetG( cosThetaO, cosThetaI, surf.sheenRoughness );

		// See equation (1) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
		vec3 color = surf.sheenColor;
		color *= D * G / ( 4.0 * abs( cosThetaO * cosThetaI ) );
		color *= wi.z;

		return color;

	}

	// bsdf
	void getLobeWeights(
		vec3 wo, vec3 wi, vec3 wh, vec3 clearcoatWo, SurfaceRecord surf,
		inout float diffuseWeight, inout float specularWeight, inout float transmissionWeight, inout float clearcoatWeight
	) {

		float metalness = surf.metalness;
		float transmission = surf.transmission;
		// float fEstimate = evaluateFresnelWeight( dot( wo, wh ), surf.eta, surf.f0 );
		float fEstimate = disneyFresnel( wo, wi, wh, surf.f0, surf.eta, surf.metalness );

		float transSpecularProb = mix( max( 0.25, fEstimate ), 1.0, metalness );
		float diffSpecularProb = 0.5 + 0.5 * metalness;

		diffuseWeight = ( 1.0 - transmission ) * ( 1.0 - diffSpecularProb );
		specularWeight = transmission * transSpecularProb + ( 1.0 - transmission ) * diffSpecularProb;
		transmissionWeight = transmission * ( 1.0 - transSpecularProb );
		clearcoatWeight = surf.clearcoat * schlickFresnel( clearcoatWo.z, 0.04 );

		float totalWeight = diffuseWeight + specularWeight + transmissionWeight + clearcoatWeight;
		diffuseWeight /= totalWeight;
		specularWeight /= totalWeight;
		transmissionWeight /= totalWeight;
		clearcoatWeight /= totalWeight;
	}

	float bsdfEval(
		vec3 wo, vec3 clearcoatWo, vec3 wi, vec3 clearcoatWi, SurfaceRecord surf,
		float diffuseWeight, float specularWeight, float transmissionWeight, float clearcoatWeight, inout float specularPdf, inout vec3 color
	) {

		float metalness = surf.metalness;
		float transmission = surf.transmission;

		float spdf = 0.0;
		float dpdf = 0.0;
		float tpdf = 0.0;
		float cpdf = 0.0;
		color = vec3( 0.0 );

		vec3 halfVector = getHalfVector( wi, wo, surf.eta );

		// diffuse
		if ( diffuseWeight > 0.0 && wi.z > 0.0 ) {

			dpdf = diffuseEval( wo, wi, halfVector, surf, color );
			color *= 1.0 - surf.transmission;

		}

		// ggx specular
		if ( specularWeight > 0.0 && wi.z > 0.0 ) {

			vec3 outColor;
			spdf = specularEval( wo, wi, getHalfVector( wi, wo ), surf, outColor );
			color += outColor;

		}

		// transmission
		if ( transmissionWeight > 0.0 && wi.z < 0.0 ) {

			tpdf = transmissionEval( wo, wi, halfVector, surf, color );

		}

		// sheen
		color *= mix( 1.0, sheenAlbedoScaling( wo, wi, surf ), surf.sheen );
		color += sheenColor( wo, wi, halfVector, surf ) * surf.sheen;

		// clearcoat
		if ( clearcoatWi.z >= 0.0 && clearcoatWeight > 0.0 ) {

			vec3 clearcoatHalfVector = getHalfVector( clearcoatWo, clearcoatWi );
			cpdf = clearcoatEval( clearcoatWo, clearcoatWi, clearcoatHalfVector, surf, color );

		}

		float pdf =
			dpdf * diffuseWeight
			+ spdf * specularWeight
			+ tpdf * transmissionWeight
			+ cpdf * clearcoatWeight;

		// retrieve specular rays for the shadows flag
		specularPdf = spdf * specularWeight + cpdf * clearcoatWeight;

		return pdf;

	}

	float bsdfResult( vec3 worldWo, vec3 worldWi, SurfaceRecord surf, inout vec3 color ) {

		if ( surf.volumeParticle ) {

			color = surf.color / ( 4.0 * PI );
			return 1.0 / ( 4.0 * PI );

		}

		vec3 wo = normalize( surf.normalInvBasis * worldWo );
		vec3 wi = normalize( surf.normalInvBasis * worldWi );

		vec3 clearcoatWo = normalize( surf.clearcoatInvBasis * worldWo );
		vec3 clearcoatWi = normalize( surf.clearcoatInvBasis * worldWi );

		vec3 wh = getHalfVector( wo, wi, surf.eta );
		float diffuseWeight;
		float specularWeight;
		float transmissionWeight;
		float clearcoatWeight;
		getLobeWeights( wo, wi, wh, clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );

		float specularPdf;
		return bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, specularPdf, color );

	}

	ScatterRecord bsdfSample( vec3 worldWo, SurfaceRecord surf ) {

		if ( surf.volumeParticle ) {

			ScatterRecord sampleRec;
			sampleRec.specularPdf = 0.0;
			sampleRec.pdf = 1.0 / ( 4.0 * PI );
			sampleRec.direction = sampleSphere( rand2( 16 ) );
			sampleRec.color = surf.color / ( 4.0 * PI );
			return sampleRec;

		}

		vec3 wo = normalize( surf.normalInvBasis * worldWo );
		vec3 clearcoatWo = normalize( surf.clearcoatInvBasis * worldWo );
		mat3 normalBasis = surf.normalBasis;
		mat3 invBasis = surf.normalInvBasis;
		mat3 clearcoatNormalBasis = surf.clearcoatBasis;
		mat3 clearcoatInvBasis = surf.clearcoatInvBasis;

		float diffuseWeight;
		float specularWeight;
		float transmissionWeight;
		float clearcoatWeight;
		// using normal and basically-reflected ray since we don't have proper half vector here
		getLobeWeights( wo, wo, vec3( 0, 0, 1 ), clearcoatWo, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight );

		float pdf[4];
		pdf[0] = diffuseWeight;
		pdf[1] = specularWeight;
		pdf[2] = transmissionWeight;
		pdf[3] = clearcoatWeight;

		float cdf[4];
		cdf[0] = pdf[0];
		cdf[1] = pdf[1] + cdf[0];
		cdf[2] = pdf[2] + cdf[1];
		cdf[3] = pdf[3] + cdf[2];

		if( cdf[3] != 0.0 ) {

			float invMaxCdf = 1.0 / cdf[3];
			cdf[0] *= invMaxCdf;
			cdf[1] *= invMaxCdf;
			cdf[2] *= invMaxCdf;
			cdf[3] *= invMaxCdf;

		} else {

			cdf[0] = 1.0;
			cdf[1] = 0.0;
			cdf[2] = 0.0;
			cdf[3] = 0.0;

		}

		vec3 wi;
		vec3 clearcoatWi;

		float r = rand( 15 );
		if ( r <= cdf[0] ) { // diffuse

			wi = diffuseDirection( wo, surf );
			clearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );

		} else if ( r <= cdf[1] ) { // specular

			wi = specularDirection( wo, surf );
			clearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );

		} else if ( r <= cdf[2] ) { // transmission / refraction

			wi = transmissionDirection( wo, surf );
			clearcoatWi = normalize( clearcoatInvBasis * normalize( normalBasis * wi ) );

		} else if ( r <= cdf[3] ) { // clearcoat

			clearcoatWi = clearcoatDirection( clearcoatWo, surf );
			wi = normalize( invBasis * normalize( clearcoatNormalBasis * clearcoatWi ) );

		}

		ScatterRecord result;
		result.pdf = bsdfEval( wo, clearcoatWo, wi, clearcoatWi, surf, diffuseWeight, specularWeight, transmissionWeight, clearcoatWeight, result.specularPdf, result.color );
		result.direction = normalize( surf.normalBasis * wi );

		return result;

	}

`,Gu=`

	// returns the hit distance given the material density
	float intersectFogVolume( Material material, float u ) {

		// https://raytracing.github.io/books/RayTracingTheNextWeek.html#volumes/constantdensitymediums
		return material.opacity == 0.0 ? INFINITY : ( - 1.0 / material.opacity ) * log( u );

	}

	ScatterRecord sampleFogVolume( SurfaceRecord surf, vec2 uv ) {

		ScatterRecord sampleRec;
		sampleRec.specularPdf = 0.0;
		sampleRec.pdf = 1.0 / ( 2.0 * PI );
		sampleRec.direction = sampleSphere( uv );
		sampleRec.color = surf.color;
		return sampleRec;

	}

`,Wu=`

	// The GGX functions provide sampling and distribution information for normals as output so
	// in order to get probability of scatter direction the half vector must be computed and provided.
	// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf
	// [1] https://hal.archives-ouvertes.fr/hal-01509746/document
	// [2] http://jcgt.org/published/0007/04/01/
	// [4] http://jcgt.org/published/0003/02/03/

	// trowbridge-reitz === GGX === GTR

	vec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {

		// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution
		// function below, as well

		// Implementation from reference [1]
		// stretch view
		vec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );

		// orthonormal basis
		vec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );
		vec3 T2 = cross( T1, V );

		// sample point with polar coordinates (r, phi)
		float a = 1.0 / ( 1.0 + V.z );
		float r = sqrt( uv.x );
		float phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;
		float P1 = r * cos( phi );
		float P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );

		// compute normal
		vec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );

		// unstretch
		N = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );

		return N;

	}

	// Below are PDF and related functions for use in a Monte Carlo path tracer
	// as specified in Appendix B of the following paper
	// See equation (34) from reference [0]
	float ggxLamda( float theta, float roughness ) {

		float tanTheta = tan( theta );
		float tanTheta2 = tanTheta * tanTheta;
		float alpha2 = roughness * roughness;

		float numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );
		return numerator / 2.0;

	}

	// See equation (34) from reference [0]
	float ggxShadowMaskG1( float theta, float roughness ) {

		return 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );

	}

	// See equation (125) from reference [4]
	float ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {

		float incidentTheta = acos( wi.z );
		float scatterTheta = acos( wo.z );
		return 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );

	}

	// See equation (33) from reference [0]
	float ggxDistribution( vec3 halfVector, float roughness ) {

		float a2 = roughness * roughness;
		a2 = max( EPSILON, a2 );
		float cosTheta = halfVector.z;
		float cosTheta4 = pow( cosTheta, 4.0 );

		if ( cosTheta == 0.0 ) return 0.0;

		float theta = acosSafe( halfVector.z );
		float tanTheta = tan( theta );
		float tanTheta2 = pow( tanTheta, 2.0 );

		float denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );
		return ( a2 / denom );

	}

	// See equation (3) from reference [2]
	float ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {

		float incidentTheta = acos( wi.z );
		float D = ggxDistribution( halfVector, roughness );
		float G1 = ggxShadowMaskG1( incidentTheta, roughness );

		return D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;

	}

`,Xu=`

	// XYZ to sRGB color space
	const mat3 XYZ_TO_REC709 = mat3(
		3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);

	vec3 fresnel0ToIor( vec3 fresnel0 ) {

		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );

	}

	// Conversion FO/IOR
	vec3 iorToFresnel0( vec3 transmittedIor, float incidentIor ) {

		return square( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );

	}

	// ior is a value between 1.0 and 3.0. 1.0 is air interface
	float iorToFresnel0( float transmittedIor, float incidentIor ) {

		return square( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ) );

	}

	// Fresnel equations for dielectric/dielectric interfaces. See https://belcour.github.io/blog/research/2017/05/01/brdf-thin-film.html
	vec3 evalSensitivity( float OPD, vec3 shift ) {

		float phase = 2.0 * PI * OPD * 1.0e-9;

		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );

		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - square( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * square( phase ) );
		xyz /= 1.0685e-7;

		vec3 srgb = XYZ_TO_REC709 * xyz;
		return srgb;

	}

	// See Section 4. Analytic Spectral Integration, A Practical Extension to Microfacet Theory for the Modeling of Varying Iridescence, https://hal.archives-ouvertes.fr/hal-01518344/document
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {

		vec3 I;

		// Force iridescenceIor -> outsideIOR when thinFilmThickness -> 0.0
		float iridescenceIor = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );

		// Evaluate the cosTheta on the base layer (Snell law)
		float sinTheta2Sq = square( outsideIOR / iridescenceIor ) * ( 1.0 - square( cosTheta1 ) );

		// Handle TIR:
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {

			return vec3( 1.0 );

		}

		float cosTheta2 = sqrt( cosTheta2Sq );

		// First interface
		float R0 = iorToFresnel0( iridescenceIor, outsideIOR );
		float R12 = schlickFresnel( cosTheta1, R0 );
		float R21 = R12;
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIor < outsideIOR ) {

			phi12 = PI;

		}

		float phi21 = PI - phi12;

		// Second interface
		vec3 baseIOR = fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) ); // guard against 1.0
		vec3 R1 = iorToFresnel0( baseIOR, iridescenceIor );
		vec3 R23 = schlickFresnel( cosTheta2, R1 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[0] < iridescenceIor ) {

			phi23[ 0 ] = PI;

		}

		if ( baseIOR[1] < iridescenceIor ) {

			phi23[ 1 ] = PI;

		}

		if ( baseIOR[2] < iridescenceIor ) {

			phi23[ 2 ] = PI;

		}

		// Phase shift
		float OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;

		// Compound terms
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = square( T121 ) * R23 / ( vec3( 1.0 ) - R123 );

		// Reflectance term for m = 0 (DC term amplitude)
		vec3 C0 = R12 + Rs;
		I = C0;

		// Reflectance term for m > 0 (pairs of diracs)
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {

			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;

		}

		// Since out of gamut colors might be produced, negative color values are clamped to 0.
		return max( I, vec3( 0.0 ) );

	}

`,qu=`

	// See equation (2) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
	float velvetD( float cosThetaH, float roughness ) {

		float alpha = max( roughness, 0.07 );
		alpha = alpha * alpha;

		float invAlpha = 1.0 / alpha;

		float sqrCosThetaH = cosThetaH * cosThetaH;
		float sinThetaH = max( 1.0 - sqrCosThetaH, 0.001 );

		return ( 2.0 + invAlpha ) * pow( sinThetaH, 0.5 * invAlpha ) / ( 2.0 * PI );

	}

	float velvetParamsInterpolate( int i, float oneMinusAlphaSquared ) {

		const float p0[5] = float[5]( 25.3245, 3.32435, 0.16801, -1.27393, -4.85967 );
		const float p1[5] = float[5]( 21.5473, 3.82987, 0.19823, -1.97760, -4.32054 );

		return mix( p1[i], p0[i], oneMinusAlphaSquared );

	}

	float velvetL( float x, float alpha ) {

		float oneMinusAlpha = 1.0 - alpha;
		float oneMinusAlphaSquared = oneMinusAlpha * oneMinusAlpha;

		float a = velvetParamsInterpolate( 0, oneMinusAlphaSquared );
		float b = velvetParamsInterpolate( 1, oneMinusAlphaSquared );
		float c = velvetParamsInterpolate( 2, oneMinusAlphaSquared );
		float d = velvetParamsInterpolate( 3, oneMinusAlphaSquared );
		float e = velvetParamsInterpolate( 4, oneMinusAlphaSquared );

		return a / ( 1.0 + b * pow( abs( x ), c ) ) + d * x + e;

	}

	// See equation (3) in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
	float velvetLambda( float cosTheta, float alpha ) {

		return abs( cosTheta ) < 0.5 ? exp( velvetL( cosTheta, alpha ) ) : exp( 2.0 * velvetL( 0.5, alpha ) - velvetL( 1.0 - cosTheta, alpha ) );

	}

	// See Section 3, Shadowing Term, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
	float velvetG( float cosThetaO, float cosThetaI, float roughness ) {

		float alpha = max( roughness, 0.07 );
		alpha = alpha * alpha;

		return 1.0 / ( 1.0 + velvetLambda( cosThetaO, alpha ) + velvetLambda( cosThetaI, alpha ) );

	}

	float directionalAlbedoSheen( float cosTheta, float alpha ) {

		cosTheta = saturate( cosTheta );

		float c = 1.0 - cosTheta;
		float c3 = c * c * c;

		return 0.65584461 * c3 + 1.0 / ( 4.16526551 + exp( -7.97291361 * sqrt( alpha ) + 6.33516894 ) );

	}

	float sheenAlbedoScaling( vec3 wo, vec3 wi, SurfaceRecord surf ) {

		float alpha = max( surf.sheenRoughness, 0.07 );
		alpha = alpha * alpha;

		float maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );

		float eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );
		float eWi = directionalAlbedoSheen( saturateCos( wi.z ), alpha );

		return min( 1.0 - maxSheenColor * eWo, 1.0 - maxSheenColor * eWi );

	}

	// See Section 5, Layering, in http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf
	float sheenAlbedoScaling( vec3 wo, SurfaceRecord surf ) {

		float alpha = max( surf.sheenRoughness, 0.07 );
		alpha = alpha * alpha;

		float maxSheenColor = max( max( surf.sheenColor.r, surf.sheenColor.g ), surf.sheenColor.b );

		float eWo = directionalAlbedoSheen( saturateCos( wo.z ), alpha );

		return 1.0 - maxSheenColor * eWo;

	}

`,Yu=`

#ifndef FOG_CHECK_ITERATIONS
#define FOG_CHECK_ITERATIONS 30
#endif

// returns whether the given material is a fog material or not
bool isMaterialFogVolume( sampler2D materials, uint materialIndex ) {

	uint i = materialIndex * 45u;
	vec4 s14 = texelFetch1D( materials, i + 14u );
	return bool( int( s14.b ) & 4 );

}

// returns true if we're within the first fog volume we hit
bool bvhIntersectFogVolumeHit(
	vec3 rayOrigin, vec3 rayDirection,
	usampler2D materialIndexAttribute, sampler2D materials,
	inout Material material
) {

	material.fogVolume = false;

	for ( int i = 0; i < FOG_CHECK_ITERATIONS; i ++ ) {

		// find nearest hit
		uvec4 faceIndices = uvec4( 0u );
		vec3 faceNormal = vec3( 0.0, 0.0, 1.0 );
		vec3 barycoord = vec3( 0.0 );
		float side = 1.0;
		float dist = 0.0;
		bool hit = bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist );
		if ( hit ) {

			// if it's a fog volume return whether we hit the front or back face
			uint materialIndex = uTexelFetch1D( materialIndexAttribute, faceIndices.x ).r;
			if ( isMaterialFogVolume( materials, materialIndex ) ) {

				material = readMaterialInfo( materials, materialIndex );
				return side == - 1.0;

			} else {

				// move the ray forward
				rayOrigin = stepRayOrigin( rayOrigin, rayDirection, - faceNormal, dist );

			}

		} else {

			return false;

		}

	}

	return false;

}

`,$u=`

	// step through multiple surface hits and accumulate color attenuation based on transmissive surfaces
	// returns true if a solid surface was hit
	bool attenuateHit(
		RenderState state,
		Ray ray, float rayDist,
		out vec3 color
	) {

		// store the original bounce index so we can reset it after
		uint originalBounceIndex = sobolBounceIndex;

		int traversals = state.traversals;
		int transmissiveTraversals = state.transmissiveTraversals;
		bool isShadowRay = state.isShadowRay;
		Material fogMaterial = state.fogMaterial;

		vec3 startPoint = ray.origin;

		// hit results
		SurfaceHit surfaceHit;

		color = vec3( 1.0 );

		bool result = true;
		for ( int i = 0; i < traversals; i ++ ) {

			sobolBounceIndex ++;

			int hitType = traceScene( ray, fogMaterial, surfaceHit );

			if ( hitType == FOG_HIT ) {

				result = true;
				break;

			} else if ( hitType == SURFACE_HIT ) {

				float totalDist = distance( startPoint, ray.origin + ray.direction * surfaceHit.dist );
				if ( totalDist > rayDist ) {

					result = false;
					break;

				}

				// TODO: attenuate the contribution based on the PDF of the resulting ray including refraction values
				// Should be able to work using the material BSDF functions which will take into account specularity, etc.
				// TODO: should we account for emissive surfaces here?

				uint materialIndex = uTexelFetch1D( materialIndexAttribute, surfaceHit.faceIndices.x ).r;
				Material material = readMaterialInfo( materials, materialIndex );

				// adjust the ray to the new surface
				bool isEntering = surfaceHit.side == 1.0;
				ray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );

				#if FEATURE_FOG

				if ( material.fogVolume ) {

					fogMaterial = material;
					fogMaterial.fogVolume = surfaceHit.side == 1.0;
					i -= sign( transmissiveTraversals );
					transmissiveTraversals --;
					continue;

				}

				#endif

				if ( ! material.castShadow && isShadowRay ) {

					continue;

				}

				vec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, surfaceHit.barycoord, surfaceHit.faceIndices.xyz ).xy;
				vec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, surfaceHit.barycoord, surfaceHit.faceIndices.xyz );

				// albedo
				vec4 albedo = vec4( material.color, material.opacity );
				if ( material.map != - 1 ) {

					vec3 uvPrime = material.mapTransform * vec3( uv, 1 );
					albedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );

				}

				if ( material.vertexColors ) {

					albedo *= vertexColor;

				}

				// alphaMap
				if ( material.alphaMap != - 1 ) {

					albedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;

				}

				// transmission
				float transmission = material.transmission;
				if ( material.transmissionMap != - 1 ) {

					vec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );
					transmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;

				}

				// metalness
				float metalness = material.metalness;
				if ( material.metalnessMap != - 1 ) {

					vec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );
					metalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;

				}

				float alphaTest = material.alphaTest;
				bool useAlphaTest = alphaTest != 0.0;
				float transmissionFactor = ( 1.0 - metalness ) * transmission;
				if (
					transmissionFactor < rand( 9 ) && ! (
						// material sidedness
						material.side != 0.0 && surfaceHit.side == material.side

						// alpha test
						|| useAlphaTest && albedo.a < alphaTest

						// opacity
						|| material.transparent && ! useAlphaTest && albedo.a < rand( 10 )
					)
				) {

					result = true;
					break;

				}

				if ( surfaceHit.side == 1.0 && isEntering ) {

					// only attenuate by surface color on the way in
					color *= mix( vec3( 1.0 ), albedo.rgb, transmissionFactor );

				} else if ( surfaceHit.side == - 1.0 ) {

					// attenuate by medium once we hit the opposite side of the model
					color *= transmissionAttenuation( surfaceHit.dist, material.attenuationColor, material.attenuationDistance );

				}

				bool isTransmissiveRay = dot( ray.direction, surfaceHit.faceNormal * surfaceHit.side ) < 0.0;
				if ( ( isTransmissiveRay || isEntering ) && transmissiveTraversals > 0 ) {

					i -= sign( transmissiveTraversals );
					transmissiveTraversals --;

				}

			} else {

				result = false;
				break;

			}

		}

		// reset the bounce index
		sobolBounceIndex = originalBounceIndex;
		return result;

	}

`,ju=`

	vec3 ndcToRayOrigin( vec2 coord ) {

		vec4 rayOrigin4 = cameraWorldMatrix * invProjectionMatrix * vec4( coord, - 1.0, 1.0 );
		return rayOrigin4.xyz / rayOrigin4.w;
	}

	Ray getCameraRay() {

		vec2 ssd = vec2( 1.0 ) / resolution;

		// Jitter the camera ray by finding a uv coordinate at a random sample
		// around this pixel's UV coordinate for AA
		vec2 ruv = rand2( 0 );
		vec2 jitteredUv = vUv + vec2( tentFilter( ruv.x ) * ssd.x, tentFilter( ruv.y ) * ssd.y );
		Ray ray;

		#if CAMERA_TYPE == 2

			// Equirectangular projection
			vec4 rayDirection4 = vec4( equirectUvToDirection( jitteredUv ), 0.0 );
			vec4 rayOrigin4 = vec4( 0.0, 0.0, 0.0, 1.0 );

			rayDirection4 = cameraWorldMatrix * rayDirection4;
			rayOrigin4 = cameraWorldMatrix * rayOrigin4;

			ray.direction = normalize( rayDirection4.xyz );
			ray.origin = rayOrigin4.xyz / rayOrigin4.w;

		#else

			// get [- 1, 1] normalized device coordinates
			vec2 ndc = 2.0 * jitteredUv - vec2( 1.0 );
			ray.origin = ndcToRayOrigin( ndc );

			#if CAMERA_TYPE == 1

				// Orthographic projection
				ray.direction = ( cameraWorldMatrix * vec4( 0.0, 0.0, - 1.0, 0.0 ) ).xyz;
				ray.direction = normalize( ray.direction );

			#else

				// Perspective projection
				ray.direction = normalize( mat3( cameraWorldMatrix ) * ( invProjectionMatrix * vec4( ndc, 0.0, 1.0 ) ).xyz );

			#endif

		#endif

		#if FEATURE_DOF
		{

			// depth of field
			vec3 focalPoint = ray.origin + normalize( ray.direction ) * physicalCamera.focusDistance;

			// get the aperture sample
			// if blades === 0 then we assume a circle
			vec3 shapeUVW= rand3( 1 );
			int blades = physicalCamera.apertureBlades;
			float anamorphicRatio = physicalCamera.anamorphicRatio;
			vec2 apertureSample = blades == 0 ? sampleCircle( shapeUVW.xy ) : sampleRegularPolygon( blades, shapeUVW );
			apertureSample *= physicalCamera.bokehSize * 0.5 * 1e-3;

			// rotate the aperture shape
			apertureSample =
				rotateVector( apertureSample, physicalCamera.apertureRotation ) *
				saturate( vec2( anamorphicRatio, 1.0 / anamorphicRatio ) );

			// create the new ray
			ray.origin += ( cameraWorldMatrix * vec4( apertureSample, 0.0, 0.0 ) ).xyz;
			ray.direction = focalPoint - ray.origin;

		}
		#endif

		ray.direction = normalize( ray.direction );

		return ray;

	}

`,Ku=`

	vec3 directLightContribution( vec3 worldWo, SurfaceRecord surf, RenderState state, vec3 rayOrigin ) {

		vec3 result = vec3( 0.0 );

		// uniformly pick a light or environment map
		if( lightsDenom != 0.0 && rand( 5 ) < float( lights.count ) / lightsDenom ) {

			// sample a light or environment
			LightRecord lightRec = randomLightSample( lights.tex, iesProfiles, lights.count, rayOrigin, rand3( 6 ) );

			bool isSampleBelowSurface = ! surf.volumeParticle && dot( surf.faceNormal, lightRec.direction ) < 0.0;
			if ( isSampleBelowSurface ) {

				lightRec.pdf = 0.0;

			}

			// check if a ray could even reach the light area
			Ray lightRay;
			lightRay.origin = rayOrigin;
			lightRay.direction = lightRec.direction;
			vec3 attenuatedColor;
			if (
				lightRec.pdf > 0.0 &&
				isDirectionValid( lightRec.direction, surf.normal, surf.faceNormal ) &&
				! attenuateHit( state, lightRay, lightRec.dist, attenuatedColor )
			) {

				// get the material pdf
				vec3 sampleColor;
				float lightMaterialPdf = bsdfResult( worldWo, lightRec.direction, surf, sampleColor );
				bool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );
				if ( lightMaterialPdf > 0.0 && isValidSampleColor ) {

					// weight the direct light contribution
					float lightPdf = lightRec.pdf / lightsDenom;
					float misWeight = lightRec.type == SPOT_LIGHT_TYPE || lightRec.type == DIR_LIGHT_TYPE || lightRec.type == POINT_LIGHT_TYPE ? 1.0 : misHeuristic( lightPdf, lightMaterialPdf );
					result = attenuatedColor * lightRec.emission * state.throughputColor * sampleColor * misWeight / lightPdf;

				}

			}

		} else if ( envMapInfo.totalSum != 0.0 && environmentIntensity != 0.0 ) {

			// find a sample in the environment map to include in the contribution
			vec3 envColor, envDirection;
			float envPdf = sampleEquirectProbability( rand2( 7 ), envColor, envDirection );
			envDirection = invEnvRotation3x3 * envDirection;

			// this env sampling is not set up for transmissive sampling and yields overly bright
			// results so we ignore the sample in this case.
			// TODO: this should be improved but how? The env samples could traverse a few layers?
			bool isSampleBelowSurface = ! surf.volumeParticle && dot( surf.faceNormal, envDirection ) < 0.0;
			if ( isSampleBelowSurface ) {

				envPdf = 0.0;

			}

			// check if a ray could even reach the surface
			Ray envRay;
			envRay.origin = rayOrigin;
			envRay.direction = envDirection;
			vec3 attenuatedColor;
			if (
				envPdf > 0.0 &&
				isDirectionValid( envDirection, surf.normal, surf.faceNormal ) &&
				! attenuateHit( state, envRay, INFINITY, attenuatedColor )
			) {

				// get the material pdf
				vec3 sampleColor;
				float envMaterialPdf = bsdfResult( worldWo, envDirection, surf, sampleColor );
				bool isValidSampleColor = all( greaterThanEqual( sampleColor, vec3( 0.0 ) ) );
				if ( envMaterialPdf > 0.0 && isValidSampleColor ) {

					// weight the direct light contribution
					envPdf /= lightsDenom;
					float misWeight = misHeuristic( envPdf, envMaterialPdf );
					result = attenuatedColor * environmentIntensity * envColor * state.throughputColor * sampleColor * misWeight / envPdf;

				}

			}

		}

		// Function changed to have a single return statement to potentially help with crashes on Mac OS.
		// See issue #470
		return result;

	}

`,Zu=`

	#define SKIP_SURFACE 0
	#define HIT_SURFACE 1
	int getSurfaceRecord(
		Material material, SurfaceHit surfaceHit, sampler2DArray attributesArray,
		float accumulatedRoughness,
		inout SurfaceRecord surf
	) {

		if ( material.fogVolume ) {

			vec3 normal = vec3( 0, 0, 1 );

			SurfaceRecord fogSurface;
			fogSurface.volumeParticle = true;
			fogSurface.color = material.color;
			fogSurface.emission = material.emissiveIntensity * material.emissive;
			fogSurface.normal = normal;
			fogSurface.faceNormal = normal;
			fogSurface.clearcoatNormal = normal;

			surf = fogSurface;
			return HIT_SURFACE;

		}

		// uv coord for textures
		vec2 uv = textureSampleBarycoord( attributesArray, ATTR_UV, surfaceHit.barycoord, surfaceHit.faceIndices.xyz ).xy;
		vec4 vertexColor = textureSampleBarycoord( attributesArray, ATTR_COLOR, surfaceHit.barycoord, surfaceHit.faceIndices.xyz );

		// albedo
		vec4 albedo = vec4( material.color, material.opacity );
		if ( material.map != - 1 ) {

			vec3 uvPrime = material.mapTransform * vec3( uv, 1 );
			albedo *= texture2D( textures, vec3( uvPrime.xy, material.map ) );

		}

		if ( material.vertexColors ) {

			albedo *= vertexColor;

		}

		// alphaMap
		if ( material.alphaMap != - 1 ) {

			albedo.a *= texture2D( textures, vec3( uv, material.alphaMap ) ).x;

		}

		// possibly skip this sample if it's transparent, alpha test is enabled, or we hit the wrong material side
		// and it's single sided.
		// - alpha test is disabled when it === 0
		// - the material sidedness test is complicated because we want light to pass through the back side but still
		// be able to see the front side. This boolean checks if the side we hit is the front side on the first ray
		// and we're rendering the other then we skip it. Do the opposite on subsequent bounces to get incoming light.
		float alphaTest = material.alphaTest;
		bool useAlphaTest = alphaTest != 0.0;
		if (
			// material sidedness
			material.side != 0.0 && surfaceHit.side != material.side

			// alpha test
			|| useAlphaTest && albedo.a < alphaTest

			// opacity
			|| material.transparent && ! useAlphaTest && albedo.a < rand( 3 )
		) {

			return SKIP_SURFACE;

		}

		// fetch the interpolated smooth normal
		vec3 normal = normalize( textureSampleBarycoord(
			attributesArray,
			ATTR_NORMAL,
			surfaceHit.barycoord,
			surfaceHit.faceIndices.xyz
		).xyz );

		// roughness
		float roughness = material.roughness;
		if ( material.roughnessMap != - 1 ) {

			vec3 uvPrime = material.roughnessMapTransform * vec3( uv, 1 );
			roughness *= texture2D( textures, vec3( uvPrime.xy, material.roughnessMap ) ).g;

		}

		// metalness
		float metalness = material.metalness;
		if ( material.metalnessMap != - 1 ) {

			vec3 uvPrime = material.metalnessMapTransform * vec3( uv, 1 );
			metalness *= texture2D( textures, vec3( uvPrime.xy, material.metalnessMap ) ).b;

		}

		// emission
		vec3 emission = material.emissiveIntensity * material.emissive;
		if ( material.emissiveMap != - 1 ) {

			vec3 uvPrime = material.emissiveMapTransform * vec3( uv, 1 );
			emission *= texture2D( textures, vec3( uvPrime.xy, material.emissiveMap ) ).xyz;

		}

		// transmission
		float transmission = material.transmission;
		if ( material.transmissionMap != - 1 ) {

			vec3 uvPrime = material.transmissionMapTransform * vec3( uv, 1 );
			transmission *= texture2D( textures, vec3( uvPrime.xy, material.transmissionMap ) ).r;

		}

		// normal
		if ( material.flatShading ) {

			// if we're rendering a flat shaded object then use the face normals - the face normal
			// is provided based on the side the ray hits the mesh so flip it to align with the
			// interpolated vertex normals.
			normal = surfaceHit.faceNormal * surfaceHit.side;

		}

		vec3 baseNormal = normal;
		if ( material.normalMap != - 1 ) {

			vec4 tangentSample = textureSampleBarycoord(
				attributesArray,
				ATTR_TANGENT,
				surfaceHit.barycoord,
				surfaceHit.faceIndices.xyz
			);

			// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate
			// resulting in NaNs and slow path tracing.
			if ( length( tangentSample.xyz ) > 0.0 ) {

				vec3 tangent = normalize( tangentSample.xyz );
				vec3 bitangent = normalize( cross( normal, tangent ) * tangentSample.w );
				mat3 vTBN = mat3( tangent, bitangent, normal );

				vec3 uvPrime = material.normalMapTransform * vec3( uv, 1 );
				vec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.normalMap ) ).xyz * 2.0 - 1.0;
				texNormal.xy *= material.normalScale;
				normal = vTBN * texNormal;

			}

		}

		normal *= surfaceHit.side;

		// clearcoat
		float clearcoat = material.clearcoat;
		if ( material.clearcoatMap != - 1 ) {

			vec3 uvPrime = material.clearcoatMapTransform * vec3( uv, 1 );
			clearcoat *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatMap ) ).r;

		}

		// clearcoatRoughness
		float clearcoatRoughness = material.clearcoatRoughness;
		if ( material.clearcoatRoughnessMap != - 1 ) {

			vec3 uvPrime = material.clearcoatRoughnessMapTransform * vec3( uv, 1 );
			clearcoatRoughness *= texture2D( textures, vec3( uvPrime.xy, material.clearcoatRoughnessMap ) ).g;

		}

		// clearcoatNormal
		vec3 clearcoatNormal = baseNormal;
		if ( material.clearcoatNormalMap != - 1 ) {

			vec4 tangentSample = textureSampleBarycoord(
				attributesArray,
				ATTR_TANGENT,
				surfaceHit.barycoord,
				surfaceHit.faceIndices.xyz
			);

			// some provided tangents can be malformed (0, 0, 0) causing the normal to be degenerate
			// resulting in NaNs and slow path tracing.
			if ( length( tangentSample.xyz ) > 0.0 ) {

				vec3 tangent = normalize( tangentSample.xyz );
				vec3 bitangent = normalize( cross( clearcoatNormal, tangent ) * tangentSample.w );
				mat3 vTBN = mat3( tangent, bitangent, clearcoatNormal );

				vec3 uvPrime = material.clearcoatNormalMapTransform * vec3( uv, 1 );
				vec3 texNormal = texture2D( textures, vec3( uvPrime.xy, material.clearcoatNormalMap ) ).xyz * 2.0 - 1.0;
				texNormal.xy *= material.clearcoatNormalScale;
				clearcoatNormal = vTBN * texNormal;

			}

		}

		clearcoatNormal *= surfaceHit.side;

		// sheenColor
		vec3 sheenColor = material.sheenColor;
		if ( material.sheenColorMap != - 1 ) {

			vec3 uvPrime = material.sheenColorMapTransform * vec3( uv, 1 );
			sheenColor *= texture2D( textures, vec3( uvPrime.xy, material.sheenColorMap ) ).rgb;

		}

		// sheenRoughness
		float sheenRoughness = material.sheenRoughness;
		if ( material.sheenRoughnessMap != - 1 ) {

			vec3 uvPrime = material.sheenRoughnessMapTransform * vec3( uv, 1 );
			sheenRoughness *= texture2D( textures, vec3( uvPrime.xy, material.sheenRoughnessMap ) ).a;

		}

		// iridescence
		float iridescence = material.iridescence;
		if ( material.iridescenceMap != - 1 ) {

			vec3 uvPrime = material.iridescenceMapTransform * vec3( uv, 1 );
			iridescence *= texture2D( textures, vec3( uvPrime.xy, material.iridescenceMap ) ).r;

		}

		// iridescence thickness
		float iridescenceThickness = material.iridescenceThicknessMaximum;
		if ( material.iridescenceThicknessMap != - 1 ) {

			vec3 uvPrime = material.iridescenceThicknessMapTransform * vec3( uv, 1 );
			float iridescenceThicknessSampled = texture2D( textures, vec3( uvPrime.xy, material.iridescenceThicknessMap ) ).g;
			iridescenceThickness = mix( material.iridescenceThicknessMinimum, material.iridescenceThicknessMaximum, iridescenceThicknessSampled );

		}

		iridescence = iridescenceThickness == 0.0 ? 0.0 : iridescence;

		// specular color
		vec3 specularColor = material.specularColor;
		if ( material.specularColorMap != - 1 ) {

			vec3 uvPrime = material.specularColorMapTransform * vec3( uv, 1 );
			specularColor *= texture2D( textures, vec3( uvPrime.xy, material.specularColorMap ) ).rgb;

		}

		// specular intensity
		float specularIntensity = material.specularIntensity;
		if ( material.specularIntensityMap != - 1 ) {

			vec3 uvPrime = material.specularIntensityMapTransform * vec3( uv, 1 );
			specularIntensity *= texture2D( textures, vec3( uvPrime.xy, material.specularIntensityMap ) ).a;

		}

		surf.volumeParticle = false;

		surf.faceNormal = surfaceHit.faceNormal;
		surf.normal = normal;

		surf.metalness = metalness;
		surf.color = albedo.rgb;
		surf.emission = emission;

		surf.ior = material.ior;
		surf.transmission = transmission;
		surf.thinFilm = material.thinFilm;
		surf.attenuationColor = material.attenuationColor;
		surf.attenuationDistance = material.attenuationDistance;

		surf.clearcoatNormal = clearcoatNormal;
		surf.clearcoat = clearcoat;

		surf.sheen = material.sheen;
		surf.sheenColor = sheenColor;

		surf.iridescence = iridescence;
		surf.iridescenceIor = material.iridescenceIor;
		surf.iridescenceThickness = iridescenceThickness;

		surf.specularColor = specularColor;
		surf.specularIntensity = specularIntensity;

		// apply perceptual roughness factor from gltf. sheen perceptual roughness is
		// applied by its brdf function
		// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#microfacet-surfaces
		surf.roughness = roughness * roughness;
		surf.clearcoatRoughness = clearcoatRoughness * clearcoatRoughness;
		surf.sheenRoughness = sheenRoughness;

		// frontFace is used to determine transmissive properties and PDF. If no transmission is used
		// then we can just always assume this is a front face.
		surf.frontFace = surfaceHit.side == 1.0 || transmission == 0.0;
		surf.eta = material.thinFilm || surf.frontFace ? 1.0 / material.ior : material.ior;
		surf.f0 = iorRatioToF0( surf.eta );

		// Compute the filtered roughness value to use during specular reflection computations.
		// The accumulated roughness value is scaled by a user setting and a "magic value" of 5.0.
		// If we're exiting something transmissive then scale the factor down significantly so we can retain
		// sharp internal reflections
		surf.filteredRoughness = applyFilteredGlossy( surf.roughness, accumulatedRoughness );
		surf.filteredClearcoatRoughness = applyFilteredGlossy( surf.clearcoatRoughness, accumulatedRoughness );

		// get the normal frames
		surf.normalBasis = getBasisFromNormal( surf.normal );
		surf.normalInvBasis = inverse( surf.normalBasis );

		surf.clearcoatBasis = getBasisFromNormal( surf.clearcoatNormal );
		surf.clearcoatInvBasis = inverse( surf.clearcoatBasis );

		return HIT_SURFACE;

	}
`,Ju=`

	struct Ray {

		vec3 origin;
		vec3 direction;

	};

	struct SurfaceHit {

		uvec4 faceIndices;
		vec3 barycoord;
		vec3 faceNormal;
		float side;
		float dist;

	};

	struct RenderState {

		bool firstRay;
		bool transmissiveRay;
		bool isShadowRay;
		float accumulatedRoughness;
		int transmissiveTraversals;
		int traversals;
		uint depth;
		vec3 throughputColor;
		Material fogMaterial;

	};

	RenderState initRenderState() {

		RenderState result;
		result.firstRay = true;
		result.transmissiveRay = true;
		result.isShadowRay = false;
		result.accumulatedRoughness = 0.0;
		result.transmissiveTraversals = 0;
		result.traversals = 0;
		result.throughputColor = vec3( 1.0 );
		result.depth = 0u;
		result.fogMaterial.fogVolume = false;
		return result;

	}

`,Qu=`

	#define NO_HIT 0
	#define SURFACE_HIT 1
	#define LIGHT_HIT 2
	#define FOG_HIT 3

	// Passing the global variable 'lights' into this function caused shader program errors.
	// So global variables like 'lights' and 'bvh' were moved out of the function parameters.
	// For more information, refer to: https://github.com/gkjohnson/three-gpu-pathtracer/pull/457
	int traceScene(
		Ray ray, Material fogMaterial, inout SurfaceHit surfaceHit
	) {

		int result = NO_HIT;
		bool hit = bvhIntersectFirstHit( bvh, ray.origin, ray.direction, surfaceHit.faceIndices, surfaceHit.faceNormal, surfaceHit.barycoord, surfaceHit.side, surfaceHit.dist );

		#if FEATURE_FOG

		if ( fogMaterial.fogVolume ) {

			// offset the distance so we don't run into issues with particles on the same surface
			// as other objects
			float particleDist = intersectFogVolume( fogMaterial, rand( 1 ) );
			if ( particleDist + RAY_OFFSET < surfaceHit.dist ) {

				surfaceHit.side = 1.0;
				surfaceHit.faceNormal = normalize( - ray.direction );
				surfaceHit.dist = particleDist;
				return FOG_HIT;

			}

		}

		#endif

		if ( hit ) {

			result = SURFACE_HIT;

		}

		return result;

	}

`;class th extends ya{onBeforeRender(){this.setDefine("FEATURE_DOF",this.physicalCamera.bokehSize===0?0:1),this.setDefine("FEATURE_BACKGROUND_MAP",this.backgroundMap?1:0),this.setDefine("FEATURE_FOG",this.materials.features.isUsed("FOG")?1:0)}constructor(t){super({transparent:!0,depthWrite:!1,defines:{FEATURE_MIS:1,FEATURE_RUSSIAN_ROULETTE:1,FEATURE_DOF:1,FEATURE_BACKGROUND_MAP:0,FEATURE_FOG:1,RANDOM_TYPE:2,CAMERA_TYPE:0,DEBUG_MODE:0,ATTR_NORMAL:0,ATTR_TANGENT:1,ATTR_UV:2,ATTR_COLOR:3},uniforms:{resolution:{value:new f0},opacity:{value:1},bounces:{value:10},transmissiveBounces:{value:10},filterGlossyFactor:{value:0},physicalCamera:{value:new Kc},cameraWorldMatrix:{value:new U0},invProjectionMatrix:{value:new U0},bvh:{value:new gc},attributesArray:{value:new lu},materialIndexAttribute:{value:new r3},materials:{value:new pu},textures:{value:new so().texture},lights:{value:new au},iesProfiles:{value:new so(360,180,{type:Ft,wrapS:Nt,wrapT:Nt}).texture},environmentIntensity:{value:1},environmentRotation:{value:new U0},envMapInfo:{value:new Qc},backgroundBlur:{value:0},backgroundMap:{value:null},backgroundAlpha:{value:1},backgroundIntensity:{value:1},backgroundRotation:{value:new U0},seed:{value:0},sobolTexture:{value:null},stratifiedTexture:{value:new bu},stratifiedOffsetTexture:{value:new Ru(64,1)}},vertexShader:`

				varying vec2 vUv;
				void main() {

					vec4 mvPosition = vec4( position, 1.0 );
					mvPosition = modelViewMatrix * mvPosition;
					gl_Position = projectionMatrix * mvPosition;

					vUv = uv;

				}

			`,fragmentShader:`
				#define RAY_OFFSET 1e-4
				#define INFINITY 1e20

				precision highp isampler2D;
				precision highp usampler2D;
				precision highp sampler2DArray;
				vec4 envMapTexelToLinear( vec4 a ) { return a; }
				#include <common>

				// bvh intersection
				${xc}
				${Mc}
				${yc}

				// uniform structs
				${Cu}
				${Du}
				${Pu}
				${Iu}
				${Lu}

				// random
				#if RANDOM_TYPE == 2 	// Stratified List

					${Hu}

				#elif RANDOM_TYPE == 1 	// Sobol

					${ao}
					${u3}
					${qc}

					#define rand(v) sobol(v)
					#define rand2(v) sobol2(v)
					#define rand3(v) sobol3(v)
					#define rand4(v) sobol4(v)

				#else 					// PCG

				${ao}

					// Using the sobol functions seems to break the the compiler on MacOS
					// - specifically the "sobolReverseBits" function.
					uint sobolPixelIndex = 0u;
					uint sobolPathIndex = 0u;
					uint sobolBounceIndex = 0u;

					#define rand(v) pcgRand()
					#define rand2(v) pcgRand2()
					#define rand3(v) pcgRand3()
					#define rand4(v) pcgRand4()

				#endif

				// common
				${ku}
				${Ou}
				${f3}
				${Bu}
				${zu}

				// environment
				uniform EquirectHdrInfo envMapInfo;
				uniform mat4 environmentRotation;
				uniform float environmentIntensity;

				// lighting
				uniform sampler2DArray iesProfiles;
				uniform LightsInfo lights;

				// background
				uniform float backgroundBlur;
				uniform float backgroundAlpha;
				#if FEATURE_BACKGROUND_MAP

				uniform sampler2D backgroundMap;
				uniform mat4 backgroundRotation;
				uniform float backgroundIntensity;

				#endif

				// camera
				uniform mat4 cameraWorldMatrix;
				uniform mat4 invProjectionMatrix;
				#if FEATURE_DOF

				uniform PhysicalCamera physicalCamera;

				#endif

				// geometry
				uniform sampler2DArray attributesArray;
				uniform usampler2D materialIndexAttribute;
				uniform sampler2D materials;
				uniform sampler2DArray textures;
				uniform BVH bvh;

				// path tracer
				uniform int bounces;
				uniform int transmissiveBounces;
				uniform float filterGlossyFactor;
				uniform int seed;

				// image
				uniform vec2 resolution;
				uniform float opacity;

				varying vec2 vUv;

				// globals
				mat3 envRotation3x3;
				mat3 invEnvRotation3x3;
				float lightsDenom;

				// sampling
				${Nu}
				${Fu}
				${Uu}

				${Yu}
				${Wu}
				${qu}
				${Xu}
				${Gu}
				${Vu}

				float applyFilteredGlossy( float roughness, float accumulatedRoughness ) {

					return clamp(
						max(
							roughness,
							accumulatedRoughness * filterGlossyFactor * 5.0 ),
						0.0,
						1.0
					);

				}

				vec3 sampleBackground( vec3 direction, vec2 uv ) {

					vec3 sampleDir = sampleHemisphere( direction, uv ) * 0.5 * backgroundBlur;

					#if FEATURE_BACKGROUND_MAP

					sampleDir = normalize( mat3( backgroundRotation ) * direction + sampleDir );
					return backgroundIntensity * sampleEquirectColor( backgroundMap, sampleDir );

					#else

					sampleDir = normalize( envRotation3x3 * direction + sampleDir );
					return environmentIntensity * sampleEquirectColor( envMapInfo.map, sampleDir );

					#endif

				}

				${Ju}
				${ju}
				${Qu}
				${$u}
				${Ku}
				${Zu}

				void main() {

					// init
					rng_initialize( gl_FragCoord.xy, seed );
					sobolPixelIndex = ( uint( gl_FragCoord.x ) << 16 ) | uint( gl_FragCoord.y );
					sobolPathIndex = uint( seed );

					// get camera ray
					Ray ray = getCameraRay();

					// inverse environment rotation
					envRotation3x3 = mat3( environmentRotation );
					invEnvRotation3x3 = inverse( envRotation3x3 );
					lightsDenom =
						( environmentIntensity == 0.0 || envMapInfo.totalSum == 0.0 ) && lights.count != 0u ?
							float( lights.count ) :
							float( lights.count + 1u );

					// final color
					gl_FragColor = vec4( 0, 0, 0, 1 );

					// surface results
					SurfaceHit surfaceHit;
					ScatterRecord scatterRec;

					// path tracing state
					RenderState state = initRenderState();
					state.transmissiveTraversals = transmissiveBounces;
					#if FEATURE_FOG

					state.fogMaterial.fogVolume = bvhIntersectFogVolumeHit(
						ray.origin, - ray.direction,
						materialIndexAttribute, materials,
						state.fogMaterial
					);

					#endif

					for ( int i = 0; i < bounces; i ++ ) {

						sobolBounceIndex ++;

						state.depth ++;
						state.traversals = bounces - i;
						state.firstRay = i == 0 && state.transmissiveTraversals == transmissiveBounces;

						int hitType = traceScene( ray, state.fogMaterial, surfaceHit );

						// check if we intersect any lights and accumulate the light contribution
						// TODO: we can add support for light surface rendering in the else condition if we
						// add the ability to toggle visibility of the the light
						if ( ! state.firstRay && ! state.transmissiveRay ) {

							LightRecord lightRec;
							float lightDist = hitType == NO_HIT ? INFINITY : surfaceHit.dist;
							for ( uint i = 0u; i < lights.count; i ++ ) {

								if (
									intersectLightAtIndex( lights.tex, ray.origin, ray.direction, i, lightRec ) &&
									lightRec.dist < lightDist
								) {

									#if FEATURE_MIS

									// weight the contribution
									// NOTE: Only area lights are supported for forward sampling and can be hit
									float misWeight = misHeuristic( scatterRec.pdf, lightRec.pdf / lightsDenom );
									gl_FragColor.rgb += lightRec.emission * state.throughputColor * misWeight;

									#else

									gl_FragColor.rgb += lightRec.emission * state.throughputColor;

									#endif

								}

							}

						}

						if ( hitType == NO_HIT ) {

							if ( state.firstRay || state.transmissiveRay ) {

								gl_FragColor.rgb += sampleBackground( ray.direction, rand2( 2 ) ) * state.throughputColor;
								gl_FragColor.a = backgroundAlpha;

							} else {

								#if FEATURE_MIS

								// get the PDF of the hit envmap point
								vec3 envColor;
								float envPdf = sampleEquirect( envRotation3x3 * ray.direction, envColor );
								envPdf /= lightsDenom;

								// and weight the contribution
								float misWeight = misHeuristic( scatterRec.pdf, envPdf );
								gl_FragColor.rgb += environmentIntensity * envColor * state.throughputColor * misWeight;

								#else

								gl_FragColor.rgb +=
									environmentIntensity *
									sampleEquirectColor( envMapInfo.map, envRotation3x3 * ray.direction ) *
									state.throughputColor;

								#endif

							}
							break;

						}

						uint materialIndex = uTexelFetch1D( materialIndexAttribute, surfaceHit.faceIndices.x ).r;
						Material material = readMaterialInfo( materials, materialIndex );

						#if FEATURE_FOG

						if ( hitType == FOG_HIT ) {

							material = state.fogMaterial;
							state.accumulatedRoughness += 0.2;

						} else if ( material.fogVolume ) {

							state.fogMaterial = material;
							state.fogMaterial.fogVolume = surfaceHit.side == 1.0;

							ray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );

							i -= sign( state.transmissiveTraversals );
							state.transmissiveTraversals -= sign( state.transmissiveTraversals );
							continue;

						}

						#endif

						// early out if this is a matte material
						if ( material.matte && state.firstRay ) {

							gl_FragColor = vec4( 0.0 );
							break;

						}

						// if we've determined that this is a shadow ray and we've hit an item with no shadow casting
						// then skip it
						if ( ! material.castShadow && state.isShadowRay ) {

							ray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );
							continue;

						}

						SurfaceRecord surf;
						if (
							getSurfaceRecord(
								material, surfaceHit, attributesArray, state.accumulatedRoughness,
								surf
							) == SKIP_SURFACE
						) {

							// only allow a limited number of transparency discards otherwise we could
							// crash the context with too long a loop.
							i -= sign( state.transmissiveTraversals );
							state.transmissiveTraversals -= sign( state.transmissiveTraversals );

							ray.origin = stepRayOrigin( ray.origin, ray.direction, - surfaceHit.faceNormal, surfaceHit.dist );
							continue;

						}

						scatterRec = bsdfSample( - ray.direction, surf );
						state.isShadowRay = scatterRec.specularPdf < rand( 4 );

						bool isBelowSurface = ! surf.volumeParticle && dot( scatterRec.direction, surf.faceNormal ) < 0.0;
						vec3 hitPoint = stepRayOrigin( ray.origin, ray.direction, isBelowSurface ? - surf.faceNormal : surf.faceNormal, surfaceHit.dist );

						// next event estimation
						#if FEATURE_MIS

						gl_FragColor.rgb += directLightContribution( - ray.direction, surf, state, hitPoint );

						#endif

						// accumulate a roughness value to offset diffuse, specular, diffuse rays that have high contribution
						// to a single pixel resulting in fireflies
						// TODO: handle transmissive surfaces
						if ( ! surf.volumeParticle && ! isBelowSurface ) {

							// determine if this is a rough normal or not by checking how far off straight up it is
							vec3 halfVector = normalize( - ray.direction + scatterRec.direction );
							state.accumulatedRoughness += max(
								sin( acosApprox( dot( halfVector, surf.normal ) ) ),
								sin( acosApprox( dot( halfVector, surf.clearcoatNormal ) ) )
							);

							state.transmissiveRay = false;

						}

						// accumulate emissive color
						gl_FragColor.rgb += ( surf.emission * state.throughputColor );

						// skip the sample if our PDF or ray is impossible
						if ( scatterRec.pdf <= 0.0 || ! isDirectionValid( scatterRec.direction, surf.normal, surf.faceNormal ) ) {

							break;

						}

						// if we're bouncing around the inside a transmissive material then decrement
						// perform this separate from a bounce
						bool isTransmissiveRay = ! surf.volumeParticle && dot( scatterRec.direction, surf.faceNormal * surfaceHit.side ) < 0.0;
						if ( ( isTransmissiveRay || isBelowSurface ) && state.transmissiveTraversals > 0 ) {

							state.transmissiveTraversals --;
							i --;

						}

						//

						// handle throughput color transformation
						// attenuate the throughput color by the medium color
						if ( ! surf.frontFace ) {

							state.throughputColor *= transmissionAttenuation( surfaceHit.dist, surf.attenuationColor, surf.attenuationDistance );

						}

						#if FEATURE_RUSSIAN_ROULETTE

						// russian roulette path termination
						// https://www.arnoldrenderer.com/research/physically_based_shader_design_in_arnold.pdf
						uint minBounces = 3u;
						float depthProb = float( state.depth < minBounces );

						float rrProb = luminance( state.throughputColor * scatterRec.color / scatterRec.pdf );
						rrProb /= luminance( state.throughputColor );
						rrProb = sqrt( rrProb );
						rrProb = max( rrProb, depthProb );
						rrProb = min( rrProb, 1.0 );
						if ( rand( 8 ) > rrProb ) {

							break;

						}

						// perform sample clamping here to avoid bright pixels
						state.throughputColor *= min( 1.0 / rrProb, 20.0 );

						#endif

						// adjust the throughput and discard and exit if we find discard the sample if there are any NaNs
						state.throughputColor *= scatterRec.color / scatterRec.pdf;
						if ( any( isnan( state.throughputColor ) ) || any( isinf( state.throughputColor ) ) ) {

							break;

						}

						//

						// prepare for next ray
						ray.direction = scatterRec.direction;
						ray.origin = hitPoint;

					}

					gl_FragColor.a *= opacity;

					#if DEBUG_MODE == 1

					// output the number of rays checked in the path and number of
					// transmissive rays encountered.
					gl_FragColor.rgb = vec3(
						float( state.depth ),
						transmissiveBounces - state.transmissiveTraversals,
						0.0
					);
					gl_FragColor.a = 1.0;

					#endif

				}

			`}),this.setValues(t)}}function*eh(){const{_renderer:i,_fsQuad:t,_blendQuad:e,_primaryTarget:n,_blendTargets:s,_sobolTarget:r,_subframe:a,alpha:o,material:l}=this,u=new K0,h=new K0,f=e.material;let[c,m]=s;for(;;){o?(f.opacity=this._opacityFactor/(this.samples+1),l.blending=Kt,l.opacity=1):(l.opacity=this._opacityFactor/(this.samples+1),l.blending=Ke);const[g,_,d,p]=a,x=n.width,y=n.height;l.resolution.set(x*d,y*p),l.sobolTexture=r.texture,l.stratifiedTexture.init(20,l.bounces+l.transmissiveBounces+5),l.stratifiedTexture.next(),l.seed++;const v=this.tiles.x||1,T=this.tiles.y||1,A=v*T,w=Math.ceil(x*d),P=Math.ceil(y*p),b=Math.floor(g*x),M=Math.floor(_*y),C=Math.ceil(w/v),F=Math.ceil(P/T);for(let L=0;L<T;L++)for(let B=0;B<v;B++){const G=i.getRenderTarget(),H=i.autoClear,q=i.getScissorTest();i.getScissor(u),i.getViewport(h);let W=B,t0=L;if(!this.stableTiles){const _0=this._currentTile%(v*T);W=_0%v,t0=~~(_0/v),this._currentTile=_0+1}const c0=T-t0-1;n.scissor.set(b+W*C,M+c0*F,Math.min(C,w-W*C),Math.min(F,P-c0*F)),n.viewport.set(b,M,w,P),i.setRenderTarget(n),i.setScissorTest(!0),i.autoClear=!1,t.render(i),i.setViewport(h),i.setScissor(u),i.setScissorTest(q),i.setRenderTarget(G),i.autoClear=H,o&&(f.target1=c.texture,f.target2=n.texture,i.setRenderTarget(m),e.render(i),i.setRenderTarget(G)),this.samples+=1/A,B===v-1&&L===T-1&&(this.samples=Math.round(this.samples)),yield}[c,m]=[m,c]}}const oo=new F0;class lo{get material(){return this._fsQuad.material}set material(t){this._fsQuad.material.removeEventListener("recompilation",this._compileFunction),t.addEventListener("recompilation",this._compileFunction),this._fsQuad.material=t}get target(){return this._alpha?this._blendTargets[1]:this._primaryTarget}set alpha(t){this._alpha!==t&&(t||(this._blendTargets[0].dispose(),this._blendTargets[1].dispose()),this._alpha=t,this.reset())}get alpha(){return this._alpha}get isCompiling(){return!!this._compilePromise}constructor(t){this.camera=null,this.tiles=new f0(3,3),this.stableNoise=!1,this.stableTiles=!0,this.samples=0,this._subframe=new K0(0,0,1,1),this._opacityFactor=1,this._renderer=t,this._alpha=!1,this._fsQuad=new vi(new th),this._blendQuad=new vi(new Wc),this._task=null,this._currentTile=0,this._compilePromise=null,this._sobolTarget=new $c().generate(t),this._primaryTarget=new Zt(1,1,{format:Z0,type:nt,magFilter:B0,minFilter:B0}),this._blendTargets=[new Zt(1,1,{format:Z0,type:nt,magFilter:B0,minFilter:B0}),new Zt(1,1,{format:Z0,type:nt,magFilter:B0,minFilter:B0})],this._compileFunction=()=>{const e=this.compileMaterial(this._fsQuad._mesh);e.then(()=>{this._compilePromise===e&&(this._compilePromise=null)}),this._compilePromise=e},this.material.addEventListener("recompilation",this._compileFunction)}compileMaterial(){return this._renderer.compileAsync(this._fsQuad._mesh)}setCamera(t){const{material:e}=this;e.cameraWorldMatrix.copy(t.matrixWorld),e.invProjectionMatrix.copy(t.projectionMatrixInverse),e.physicalCamera.updateFrom(t);let n=0;t.projectionMatrix.elements[15]>0&&(n=1),t.isEquirectCamera&&(n=2),e.setDefine("CAMERA_TYPE",n),this.camera=t}setSize(t,e){t=Math.ceil(t),e=Math.ceil(e),!(this._primaryTarget.width===t&&this._primaryTarget.height===e)&&(this._primaryTarget.setSize(t,e),this._blendTargets[0].setSize(t,e),this._blendTargets[1].setSize(t,e),this.reset())}getSize(t){t.x=this._primaryTarget.width,t.y=this._primaryTarget.height}dispose(){this._primaryTarget.dispose(),this._blendTargets[0].dispose(),this._blendTargets[1].dispose(),this._sobolTarget.dispose(),this._fsQuad.dispose(),this._blendQuad.dispose(),this._task=null}reset(){const{_renderer:t,_primaryTarget:e,_blendTargets:n}=this,s=t.getRenderTarget(),r=t.getClearAlpha();t.getClearColor(oo),t.setRenderTarget(e),t.setClearColor(0,0),t.clearColor(),t.setRenderTarget(n[0]),t.setClearColor(0,0),t.clearColor(),t.setRenderTarget(n[1]),t.setClearColor(0,0),t.clearColor(),t.setClearColor(oo,r),t.setRenderTarget(s),this.samples=0,this._task=null,this.material.stratifiedTexture.stableNoise=this.stableNoise,this.stableNoise&&(this.material.seed=0,this.material.stratifiedTexture.reset())}update(){this.material.onBeforeRender(),!this.isCompiling&&(this._task||(this._task=eh.call(this)),this._task.next())}}const mn=new f0,co=new f0,U1=new Gr,N1=new F0;class nh extends oe{constructor(t=512,e=512){super(new Float32Array(t*e*4),t,e,Z0,nt,Hi,_e,Nt,ft,ft),this.generationCallback=null}update(){this.dispose(),this.needsUpdate=!0;const{data:t,width:e,height:n}=this.image;for(let s=0;s<e;s++)for(let r=0;r<n;r++){co.set(e,n),mn.set(s/e,r/n),mn.x-=.5,mn.y=1-mn.y,U1.theta=mn.x*2*Math.PI,U1.phi=mn.y*Math.PI,U1.radius=1,this.generationCallback(U1,mn,co,N1);const o=4*(r*e+s);t[o+0]=N1.r,t[o+1]=N1.g,t[o+2]=N1.b,t[o+3]=1}}copy(t){return super.copy(t),this.generationCallback=t.generationCallback,this}}const uo=new D;class d3 extends nh{constructor(t=512){super(t,t),this.topColor=new F0().set(16777215),this.bottomColor=new F0().set(0),this.exponent=2,this.generationCallback=(e,n,s,r)=>{uo.setFromSpherical(e);const a=uo.y*.5+.5;r.lerpColors(this.bottomColor,this.topColor,a**this.exponent)}}copy(t){return super.copy(t),this.topColor.copy(t.topColor),this.bottomColor.copy(t.bottomColor),this}}class ih extends ce{get map(){return this.uniforms.map.value}set map(t){this.uniforms.map.value=t}get opacity(){return this.uniforms.opacity.value}set opacity(t){this.uniforms&&(this.uniforms.opacity.value=t)}constructor(t){super({uniforms:{map:{value:null},opacity:{value:1}},vertexShader:`
				varying vec2 vUv;
				void main() {

					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

				}
			`,fragmentShader:`
				uniform sampler2D map;
				uniform float opacity;
				varying vec2 vUv;

				vec4 clampedTexelFatch( sampler2D map, ivec2 px, int lod ) {

					vec4 res = texelFetch( map, ivec2( px.x, px.y ), 0 );

					#if defined( TONE_MAPPING )

					res.xyz = toneMapping( res.xyz );

					#endif

			  		return linearToOutputTexel( res );

				}

				void main() {

					vec2 size = vec2( textureSize( map, 0 ) );
					vec2 pxUv = vUv * size;
					vec2 pxCurr = floor( pxUv );
					vec2 pxFrac = fract( pxUv ) - 0.5;
					vec2 pxOffset;
					pxOffset.x = pxFrac.x > 0.0 ? 1.0 : - 1.0;
					pxOffset.y = pxFrac.y > 0.0 ? 1.0 : - 1.0;

					vec2 pxNext = clamp( pxOffset + pxCurr, vec2( 0.0 ), size - 1.0 );
					vec2 alpha = abs( pxFrac );

					vec4 p1 = mix(
						clampedTexelFatch( map, ivec2( pxCurr.x, pxCurr.y ), 0 ),
						clampedTexelFatch( map, ivec2( pxNext.x, pxCurr.y ), 0 ),
						alpha.x
					);

					vec4 p2 = mix(
						clampedTexelFatch( map, ivec2( pxCurr.x, pxNext.y ), 0 ),
						clampedTexelFatch( map, ivec2( pxNext.x, pxNext.y ), 0 ),
						alpha.x
					);

					gl_FragColor = mix( p1, p2, alpha.y );
					gl_FragColor.a *= opacity;
					#include <premultiplied_alpha_fragment>

				}
			`}),this.setValues(t)}}class sh extends ce{constructor(){super({uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:`
				varying vec2 vUv;
				void main() {

					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

				}`,fragmentShader:`
				#define ENVMAP_TYPE_CUBE_UV

				uniform samplerCube envMap;
				uniform float flipEnvMap;
				varying vec2 vUv;

				#include <common>
				#include <cube_uv_reflection_fragment>

				${f3}

				void main() {

					vec3 rayDirection = equirectUvToDirection( vUv );
					rayDirection.x *= flipEnvMap;
					gl_FragColor = textureCube( envMap, rayDirection );

				}`}),this.depthWrite=!1,this.depthTest=!1}}class ho{constructor(t){this._renderer=t,this._quad=new vi(new sh)}generate(t,e=null,n=null){if(!t.isCubeTexture)throw new Error("CubeToEquirectMaterial: Source can only be cube textures.");const s=t.images[0],r=this._renderer,a=this._quad;e===null&&(e=4*s.height),n===null&&(n=2*s.height);const o=new Zt(e,n,{type:nt,colorSpace:s.colorSpace}),l=s.height,u=Math.log2(l)-2,h=1/l,f=1/(3*Math.max(Math.pow(2,u),7*16));a.material.defines.CUBEUV_MAX_MIP=`${u}.0`,a.material.defines.CUBEUV_TEXEL_WIDTH=f,a.material.defines.CUBEUV_TEXEL_HEIGHT=h,a.material.uniforms.envMap.value=t,a.material.uniforms.flipEnvMap.value=t.isRenderTargetTexture?1:-1,a.material.needsUpdate=!0;const c=r.getRenderTarget(),m=r.autoClear;r.autoClear=!0,r.setRenderTarget(o),a.render(r),r.setRenderTarget(c),r.autoClear=m;const g=new Uint16Array(e*n*4),_=new Float32Array(e*n*4);r.readRenderTargetPixels(o,0,0,e,n,_),o.dispose();for(let p=0,x=_.length;p<x;p++)g[p]=Le.toHalfFloat(_[p]);const d=new oe(g,e,n,Z0,Ft);return d.minFilter=t5,d.magFilter=ft,d.wrapS=_e,d.wrapT=_e,d.mapping=Hi,d.needsUpdate=!0,d}dispose(){this._quad.dispose()}}function rh(i){return i.extensions.get("EXT_float_blend")}const jn=new f0;class ah{get multipleImportanceSampling(){return!!this._pathTracer.material.defines.FEATURE_MIS}set multipleImportanceSampling(t){this._pathTracer.material.setDefine("FEATURE_MIS",t?1:0)}get transmissiveBounces(){return this._pathTracer.material.transmissiveBounces}set transmissiveBounces(t){this._pathTracer.material.transmissiveBounces=t}get bounces(){return this._pathTracer.material.bounces}set bounces(t){this._pathTracer.material.bounces=t}get filterGlossyFactor(){return this._pathTracer.material.filterGlossyFactor}set filterGlossyFactor(t){this._pathTracer.material.filterGlossyFactor=t}get samples(){return this._pathTracer.samples}get target(){return this._pathTracer.target}get tiles(){return this._pathTracer.tiles}get stableNoise(){return this._pathTracer.stableNoise}set stableNoise(t){this._pathTracer.stableNoise=t}get isCompiling(){return!!this._pathTracer.isCompiling}constructor(t){this._renderer=t,this._generator=new kc,this._pathTracer=new lo(t),this._queueReset=!1,this._clock=new m4,this._compilePromise=null,this._lowResPathTracer=new lo(t),this._lowResPathTracer.tiles.set(1,1),this._quad=new vi(new ih({map:null,transparent:!0,blending:Kt,premultipliedAlpha:t.getContextAttributes().premultipliedAlpha})),this._materials=null,this._previousEnvironment=null,this._previousBackground=null,this._internalBackground=null,this.renderDelay=100,this.minSamples=5,this.fadeDuration=500,this.enablePathTracing=!0,this.pausePathTracing=!1,this.dynamicLowRes=!1,this.lowResScale=.25,this.renderScale=1,this.synchronizeRenderSize=!0,this.rasterizeScene=!0,this.renderToCanvas=!0,this.textureSize=new f0(1024,1024),this.rasterizeSceneCallback=(e,n)=>{this._renderer.render(e,n)},this.renderToCanvasCallback=(e,n,s)=>{const r=n.autoClear;n.autoClear=!1,s.render(n),n.autoClear=r},this.setScene(new ko,new Lt)}setBVHWorker(t){this._generator.setBVHWorker(t)}setScene(t,e,n={}){t.updateMatrixWorld(!0),e.updateMatrixWorld();const s=this._generator;if(s.setObjects(t),this._buildAsync)return s.generateAsync(n.onProgress).then(r=>this._updateFromResults(t,e,r));{const r=s.generate();return this._updateFromResults(t,e,r)}}setSceneAsync(...t){this._buildAsync=!0;const e=this.setScene(...t);return this._buildAsync=!1,e}setCamera(t){this.camera=t,this.updateCamera()}updateCamera(){const t=this.camera;t.updateMatrixWorld(),this._pathTracer.setCamera(t),this._lowResPathTracer.setCamera(t),this.reset()}updateMaterials(){const t=this._pathTracer.material,e=this._renderer,n=this._materials,s=this.textureSize,r=hu(n);t.textures.setTextures(e,r,s.x,s.y),t.materials.updateFrom(n,r),this.reset()}updateLights(){const t=this.scene,e=this._renderer,n=this._pathTracer.material,s=fu(t),r=uu(s);n.lights.updateFrom(s,r),n.iesProfiles.setTextures(e,r),this.reset()}updateEnvironment(){const t=this.scene,e=this._pathTracer.material;if(this._internalBackground&&(this._internalBackground.dispose(),this._internalBackground=null),e.backgroundBlur=t.backgroundBlurriness,e.backgroundIntensity=t.backgroundIntensity??1,e.backgroundRotation.makeRotationFromEuler(t.backgroundRotation).invert(),t.background===null)e.backgroundMap=null,e.backgroundAlpha=0;else if(t.background.isColor){this._colorBackground=this._colorBackground||new d3(16);const n=this._colorBackground;n.topColor.equals(t.background)||(n.topColor.set(t.background),n.bottomColor.set(t.background),n.update()),e.backgroundMap=n,e.backgroundAlpha=1}else if(t.background.isCubeTexture){if(t.background!==this._previousBackground){const n=new ho(this._renderer).generate(t.background);this._internalBackground=n,e.backgroundMap=n,e.backgroundAlpha=1}}else e.backgroundMap=t.background,e.backgroundAlpha=1;if(e.environmentIntensity=t.environmentIntensity??1,e.environmentRotation.makeRotationFromEuler(t.environmentRotation).invert(),this._previousEnvironment!==t.environment)if(t.environment!==null)if(t.environment.isCubeTexture){const n=new ho(this._renderer).generate(t.environment);e.envMapInfo.updateFrom(n)}else e.envMapInfo.updateFrom(t.environment);else e.environmentIntensity=0;this._previousEnvironment=t.environment,this._previousBackground=t.background,this.reset()}_updateFromResults(t,e,n){const{materials:s,geometry:r,bvh:a,bvhChanged:o}=n;this._materials=s;const u=this._pathTracer.material;return o&&(u.bvh.updateFrom(a),u.attributesArray.updateFrom(r.attributes.normal,r.attributes.tangent,r.attributes.uv,r.attributes.color),u.materialIndexAttribute.updateFrom(r.attributes.materialIndex)),this._previousScene=t,this.scene=t,this.camera=e,this.updateCamera(),this.updateMaterials(),this.updateEnvironment(),this.updateLights(),n}renderSample(){const t=this._lowResPathTracer,e=this._pathTracer,n=this._renderer,s=this._clock,r=this._quad;this._updateScale(),this._queueReset&&(e.reset(),t.reset(),this._queueReset=!1,r.material.opacity=0,s.start());const a=s.getDelta()*1e3,o=s.getElapsedTime()*1e3;if(!this.pausePathTracing&&this.enablePathTracing&&this.renderDelay<=o&&!this.isCompiling&&e.update(),e.alpha=e.material.backgroundAlpha!==1||!rh(n),t.alpha=e.alpha,this.renderToCanvas){const l=this._renderer,u=this.minSamples;if(o>=this.renderDelay&&this.samples>=this.minSamples&&(this.fadeDuration!==0?r.material.opacity=Math.min(r.material.opacity+a/this.fadeDuration,1):r.material.opacity=1),!this.enablePathTracing||this.samples<u||r.material.opacity<1){if(this.dynamicLowRes&&!this.isCompiling){t.samples<1&&(t.material=e.material,t.update());const h=r.material.opacity;r.material.opacity=1-r.material.opacity,r.material.map=t.target.texture,r.render(l),r.material.opacity=h}(!this.dynamicLowRes&&this.rasterizeScene||this.dynamicLowRes&&this.isCompiling)&&this.rasterizeSceneCallback(this.scene,this.camera)}this.enablePathTracing&&r.material.opacity>0&&(r.material.opacity<1&&(r.material.blending=this.dynamicLowRes?sr:Ke),r.material.map=e.target.texture,this.renderToCanvasCallback(e.target,l,r),r.material.blending=Kt)}}reset(){this._queueReset=!0,this._pathTracer.samples=0}dispose(){this._renderQuad.dispose(),this._renderQuad.material.dispose(),this._pathTracer.dispose()}_updateScale(){if(this.synchronizeRenderSize){this._renderer.getDrawingBufferSize(jn);const t=Math.floor(this.renderScale*jn.x),e=Math.floor(this.renderScale*jn.y);if(this._pathTracer.getSize(jn),jn.x!==t||jn.y!==e){const n=this.lowResScale;this._pathTracer.setSize(t,e),this._lowResPathTracer.setSize(Math.floor(t*n),Math.floor(e*n))}}}}class oh extends d4{constructor(...t){super(...t),this.iesMap=null,this.radius=0}copy(t,e){return super.copy(t,e),this.iesMap=t.iesMap,this.radius=t.radius,this}}/**
 * lil-gui
 * https://lil-gui.georgealways.com
 * @version 0.17.0
 * @author George Michael Brower
 * @license MIT
 */class be{constructor(t,e,n,s,r="div"){this.parent=t,this.object=e,this.property=n,this._disabled=!1,this._hidden=!1,this.initialValue=this.getValue(),this.domElement=document.createElement("div"),this.domElement.classList.add("controller"),this.domElement.classList.add(s),this.$name=document.createElement("div"),this.$name.classList.add("name"),be.nextNameID=be.nextNameID||0,this.$name.id="lil-gui-name-"+ ++be.nextNameID,this.$widget=document.createElement(r),this.$widget.classList.add("widget"),this.$disable=this.$widget,this.domElement.appendChild(this.$name),this.domElement.appendChild(this.$widget),this.parent.children.push(this),this.parent.controllers.push(this),this.parent.$children.appendChild(this.domElement),this._listenCallback=this._listenCallback.bind(this),this.name(n)}name(t){return this._name=t,this.$name.innerHTML=t,this}onChange(t){return this._onChange=t,this}_callOnChange(){this.parent._callOnChange(this),this._onChange!==void 0&&this._onChange.call(this,this.getValue()),this._changed=!0}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(){this._changed&&(this.parent._callOnFinishChange(this),this._onFinishChange!==void 0&&this._onFinishChange.call(this,this.getValue())),this._changed=!1}reset(){return this.setValue(this.initialValue),this._callOnFinishChange(),this}enable(t=!0){return this.disable(!t)}disable(t=!0){return t===this._disabled||(this._disabled=t,this.domElement.classList.toggle("disabled",t),this.$disable.toggleAttribute("disabled",t)),this}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}options(t){const e=this.parent.add(this.object,this.property,t);return e.name(this._name),this.destroy(),e}min(t){return this}max(t){return this}step(t){return this}decimals(t){return this}listen(t=!0){return this._listening=t,this._listenCallbackID!==void 0&&(cancelAnimationFrame(this._listenCallbackID),this._listenCallbackID=void 0),this._listening&&this._listenCallback(),this}_listenCallback(){this._listenCallbackID=requestAnimationFrame(this._listenCallback);const t=this.save();t!==this._listenPrevValue&&this.updateDisplay(),this._listenPrevValue=t}getValue(){return this.object[this.property]}setValue(t){return this.object[this.property]=t,this._callOnChange(),this.updateDisplay(),this}updateDisplay(){return this}load(t){return this.setValue(t),this._callOnFinishChange(),this}save(){return this.getValue()}destroy(){this.listen(!1),this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.controllers.splice(this.parent.controllers.indexOf(this),1),this.parent.$children.removeChild(this.domElement)}}class lh extends be{constructor(t,e,n){super(t,e,n,"boolean","label"),this.$input=document.createElement("input"),this.$input.setAttribute("type","checkbox"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$input.addEventListener("change",()=>{this.setValue(this.$input.checked),this._callOnFinishChange()}),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.checked=this.getValue(),this}}function na(i){let t,e;return(t=i.match(/(#|0x)?([a-f0-9]{6})/i))?e=t[2]:(t=i.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/))?e=parseInt(t[1]).toString(16).padStart(2,0)+parseInt(t[2]).toString(16).padStart(2,0)+parseInt(t[3]).toString(16).padStart(2,0):(t=i.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i))&&(e=t[1]+t[1]+t[2]+t[2]+t[3]+t[3]),!!e&&"#"+e}const ch={isPrimitive:!0,match:i=>typeof i=="string",fromHexString:na,toHexString:na},Vi={isPrimitive:!0,match:i=>typeof i=="number",fromHexString:i=>parseInt(i.substring(1),16),toHexString:i=>"#"+i.toString(16).padStart(6,0)},uh={isPrimitive:!1,match:Array.isArray,fromHexString(i,t,e=1){const n=Vi.fromHexString(i);t[0]=(n>>16&255)/255*e,t[1]=(n>>8&255)/255*e,t[2]=(255&n)/255*e},toHexString:([i,t,e],n=1)=>Vi.toHexString(i*(n=255/n)<<16^t*n<<8^e*n<<0)},hh={isPrimitive:!1,match:i=>Object(i)===i,fromHexString(i,t,e=1){const n=Vi.fromHexString(i);t.r=(n>>16&255)/255*e,t.g=(n>>8&255)/255*e,t.b=(255&n)/255*e},toHexString:({r:i,g:t,b:e},n=1)=>Vi.toHexString(i*(n=255/n)<<16^t*n<<8^e*n<<0)},fh=[ch,Vi,uh,hh];class dh extends be{constructor(t,e,n,s){var r;super(t,e,n,"color"),this.$input=document.createElement("input"),this.$input.setAttribute("type","color"),this.$input.setAttribute("tabindex",-1),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$text=document.createElement("input"),this.$text.setAttribute("type","text"),this.$text.setAttribute("spellcheck","false"),this.$text.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this.$display.appendChild(this.$input),this.$widget.appendChild(this.$display),this.$widget.appendChild(this.$text),this._format=(r=this.initialValue,fh.find(a=>a.match(r))),this._rgbScale=s,this._initialValueHexString=this.save(),this._textFocused=!1,this.$input.addEventListener("input",()=>{this._setValueFromHexString(this.$input.value)}),this.$input.addEventListener("blur",()=>{this._callOnFinishChange()}),this.$text.addEventListener("input",()=>{const a=na(this.$text.value);a&&this._setValueFromHexString(a)}),this.$text.addEventListener("focus",()=>{this._textFocused=!0,this.$text.select()}),this.$text.addEventListener("blur",()=>{this._textFocused=!1,this.updateDisplay(),this._callOnFinishChange()}),this.$disable=this.$text,this.updateDisplay()}reset(){return this._setValueFromHexString(this._initialValueHexString),this}_setValueFromHexString(t){if(this._format.isPrimitive){const e=this._format.fromHexString(t);this.setValue(e)}else this._format.fromHexString(t,this.getValue(),this._rgbScale),this._callOnChange(),this.updateDisplay()}save(){return this._format.toHexString(this.getValue(),this._rgbScale)}load(t){return this._setValueFromHexString(t),this._callOnFinishChange(),this}updateDisplay(){return this.$input.value=this._format.toHexString(this.getValue(),this._rgbScale),this._textFocused||(this.$text.value=this.$input.value.substring(1)),this.$display.style.backgroundColor=this.$input.value,this}}class ir extends be{constructor(t,e,n){super(t,e,n,"function"),this.$button=document.createElement("button"),this.$button.appendChild(this.$name),this.$widget.appendChild(this.$button),this.$button.addEventListener("click",s=>{s.preventDefault(),this.getValue().call(this.object)}),this.$button.addEventListener("touchstart",()=>{},{passive:!0}),this.$disable=this.$button}}class ph extends be{constructor(t,e,n,s,r,a){super(t,e,n,"number"),this._initInput(),this.min(s),this.max(r);const o=a!==void 0;this.step(o?a:this._getImplicitStep(),o),this.updateDisplay()}decimals(t){return this._decimals=t,this.updateDisplay(),this}min(t){return this._min=t,this._onUpdateMinMax(),this}max(t){return this._max=t,this._onUpdateMinMax(),this}step(t,e=!0){return this._step=t,this._stepExplicit=e,this}updateDisplay(){const t=this.getValue();if(this._hasSlider){let e=(t-this._min)/(this._max-this._min);e=Math.max(0,Math.min(e,1)),this.$fill.style.width=100*e+"%"}return this._inputFocused||(this.$input.value=this._decimals===void 0?t:t.toFixed(this._decimals)),this}_initInput(){this.$input=document.createElement("input"),this.$input.setAttribute("type","number"),this.$input.setAttribute("step","any"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$widget.appendChild(this.$input),this.$disable=this.$input;const t=h=>{const f=parseFloat(this.$input.value);isNaN(f)||(this._snapClampSetValue(f+h),this.$input.value=this.getValue())};let e,n,s,r,a,o=!1;const l=h=>{if(o){const f=h.clientX-e,c=h.clientY-n;Math.abs(c)>5?(h.preventDefault(),this.$input.blur(),o=!1,this._setDraggingStyle(!0,"vertical")):Math.abs(f)>5&&u()}if(!o){const f=h.clientY-s;a-=f*this._step*this._arrowKeyMultiplier(h),r+a>this._max?a=this._max-r:r+a<this._min&&(a=this._min-r),this._snapClampSetValue(r+a)}s=h.clientY},u=()=>{this._setDraggingStyle(!1,"vertical"),this._callOnFinishChange(),window.removeEventListener("mousemove",l),window.removeEventListener("mouseup",u)};this.$input.addEventListener("input",()=>{let h=parseFloat(this.$input.value);isNaN(h)||(this._stepExplicit&&(h=this._snap(h)),this.setValue(this._clamp(h)))}),this.$input.addEventListener("keydown",h=>{h.code==="Enter"&&this.$input.blur(),h.code==="ArrowUp"&&(h.preventDefault(),t(this._step*this._arrowKeyMultiplier(h))),h.code==="ArrowDown"&&(h.preventDefault(),t(this._step*this._arrowKeyMultiplier(h)*-1))}),this.$input.addEventListener("wheel",h=>{this._inputFocused&&(h.preventDefault(),t(this._step*this._normalizeMouseWheel(h)))},{passive:!1}),this.$input.addEventListener("mousedown",h=>{e=h.clientX,n=s=h.clientY,o=!0,r=this.getValue(),a=0,window.addEventListener("mousemove",l),window.addEventListener("mouseup",u)}),this.$input.addEventListener("focus",()=>{this._inputFocused=!0}),this.$input.addEventListener("blur",()=>{this._inputFocused=!1,this.updateDisplay(),this._callOnFinishChange()})}_initSlider(){this._hasSlider=!0,this.$slider=document.createElement("div"),this.$slider.classList.add("slider"),this.$fill=document.createElement("div"),this.$fill.classList.add("fill"),this.$slider.appendChild(this.$fill),this.$widget.insertBefore(this.$slider,this.$input),this.domElement.classList.add("hasSlider");const t=c=>{const m=this.$slider.getBoundingClientRect();let g=(_=c,d=m.left,p=m.right,x=this._min,y=this._max,(_-d)/(p-d)*(y-x)+x);var _,d,p,x,y;this._snapClampSetValue(g)},e=c=>{t(c.clientX)},n=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("mousemove",e),window.removeEventListener("mouseup",n)};let s,r,a=!1;const o=c=>{c.preventDefault(),this._setDraggingStyle(!0),t(c.touches[0].clientX),a=!1},l=c=>{if(a){const m=c.touches[0].clientX-s,g=c.touches[0].clientY-r;Math.abs(m)>Math.abs(g)?o(c):(window.removeEventListener("touchmove",l),window.removeEventListener("touchend",u))}else c.preventDefault(),t(c.touches[0].clientX)},u=()=>{this._callOnFinishChange(),this._setDraggingStyle(!1),window.removeEventListener("touchmove",l),window.removeEventListener("touchend",u)},h=this._callOnFinishChange.bind(this);let f;this.$slider.addEventListener("mousedown",c=>{this._setDraggingStyle(!0),t(c.clientX),window.addEventListener("mousemove",e),window.addEventListener("mouseup",n)}),this.$slider.addEventListener("touchstart",c=>{c.touches.length>1||(this._hasScrollBar?(s=c.touches[0].clientX,r=c.touches[0].clientY,a=!0):o(c),window.addEventListener("touchmove",l,{passive:!1}),window.addEventListener("touchend",u))},{passive:!1}),this.$slider.addEventListener("wheel",c=>{if(Math.abs(c.deltaX)<Math.abs(c.deltaY)&&this._hasScrollBar)return;c.preventDefault();const m=this._normalizeMouseWheel(c)*this._step;this._snapClampSetValue(this.getValue()+m),this.$input.value=this.getValue(),clearTimeout(f),f=setTimeout(h,400)},{passive:!1})}_setDraggingStyle(t,e="horizontal"){this.$slider&&this.$slider.classList.toggle("active",t),document.body.classList.toggle("lil-gui-dragging",t),document.body.classList.toggle("lil-gui-"+e,t)}_getImplicitStep(){return this._hasMin&&this._hasMax?(this._max-this._min)/1e3:.1}_onUpdateMinMax(){!this._hasSlider&&this._hasMin&&this._hasMax&&(this._stepExplicit||this.step(this._getImplicitStep(),!1),this._initSlider(),this.updateDisplay())}_normalizeMouseWheel(t){let{deltaX:e,deltaY:n}=t;return Math.floor(t.deltaY)!==t.deltaY&&t.wheelDelta&&(e=0,n=-t.wheelDelta/120,n*=this._stepExplicit?1:10),e+-n}_arrowKeyMultiplier(t){let e=this._stepExplicit?1:10;return t.shiftKey?e*=10:t.altKey&&(e/=10),e}_snap(t){const e=Math.round(t/this._step)*this._step;return parseFloat(e.toPrecision(15))}_clamp(t){return t<this._min&&(t=this._min),t>this._max&&(t=this._max),t}_snapClampSetValue(t){this.setValue(this._clamp(this._snap(t)))}get _hasScrollBar(){const t=this.parent.root.$children;return t.scrollHeight>t.clientHeight}get _hasMin(){return this._min!==void 0}get _hasMax(){return this._max!==void 0}}class mh extends be{constructor(t,e,n,s){super(t,e,n,"option"),this.$select=document.createElement("select"),this.$select.setAttribute("aria-labelledby",this.$name.id),this.$display=document.createElement("div"),this.$display.classList.add("display"),this._values=Array.isArray(s)?s:Object.values(s),this._names=Array.isArray(s)?s:Object.keys(s),this._names.forEach(r=>{const a=document.createElement("option");a.innerHTML=r,this.$select.appendChild(a)}),this.$select.addEventListener("change",()=>{this.setValue(this._values[this.$select.selectedIndex]),this._callOnFinishChange()}),this.$select.addEventListener("focus",()=>{this.$display.classList.add("focus")}),this.$select.addEventListener("blur",()=>{this.$display.classList.remove("focus")}),this.$widget.appendChild(this.$select),this.$widget.appendChild(this.$display),this.$disable=this.$select,this.updateDisplay()}updateDisplay(){const t=this.getValue(),e=this._values.indexOf(t);return this.$select.selectedIndex=e,this.$display.innerHTML=e===-1?t:this._names[e],this}}class gh extends be{constructor(t,e,n){super(t,e,n,"string"),this.$input=document.createElement("input"),this.$input.setAttribute("type","text"),this.$input.setAttribute("aria-labelledby",this.$name.id),this.$input.addEventListener("input",()=>{this.setValue(this.$input.value)}),this.$input.addEventListener("keydown",s=>{s.code==="Enter"&&this.$input.blur()}),this.$input.addEventListener("blur",()=>{this._callOnFinishChange()}),this.$widget.appendChild(this.$input),this.$disable=this.$input,this.updateDisplay()}updateDisplay(){return this.$input.value=this.getValue(),this}}let fo=!1;class ba{constructor({parent:t,autoPlace:e=t===void 0,container:n,width:s,title:r="Controls",injectStyles:a=!0,touchStyles:o=!0}={}){if(this.parent=t,this.root=t?t.root:this,this.children=[],this.controllers=[],this.folders=[],this._closed=!1,this._hidden=!1,this.domElement=document.createElement("div"),this.domElement.classList.add("lil-gui"),this.$title=document.createElement("div"),this.$title.classList.add("title"),this.$title.setAttribute("role","button"),this.$title.setAttribute("aria-expanded",!0),this.$title.setAttribute("tabindex",0),this.$title.addEventListener("click",()=>this.openAnimated(this._closed)),this.$title.addEventListener("keydown",l=>{l.code!=="Enter"&&l.code!=="Space"||(l.preventDefault(),this.$title.click())}),this.$title.addEventListener("touchstart",()=>{},{passive:!0}),this.$children=document.createElement("div"),this.$children.classList.add("children"),this.domElement.appendChild(this.$title),this.domElement.appendChild(this.$children),this.title(r),o&&this.domElement.classList.add("allow-touch-styles"),this.parent)return this.parent.children.push(this),this.parent.folders.push(this),void this.parent.$children.appendChild(this.domElement);this.domElement.classList.add("root"),!fo&&a&&(function(l){const u=document.createElement("style");u.innerHTML=l;const h=document.querySelector("head link[rel=stylesheet], head style");h?document.head.insertBefore(u,h):document.head.appendChild(u)}('.lil-gui{--background-color:#1f1f1f;--text-color:#ebebeb;--title-background-color:#111;--title-text-color:#ebebeb;--widget-color:#424242;--hover-color:#4f4f4f;--focus-color:#595959;--number-color:#2cc9ff;--string-color:#a2db3c;--font-size:11px;--input-font-size:11px;--font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Arial,sans-serif;--font-family-mono:Menlo,Monaco,Consolas,"Droid Sans Mono",monospace;--padding:4px;--spacing:4px;--widget-height:20px;--name-width:45%;--slider-knob-width:2px;--slider-input-width:27%;--color-input-width:27%;--slider-input-min-width:45px;--color-input-min-width:45px;--folder-indent:7px;--widget-padding:0 0 0 3px;--widget-border-radius:2px;--checkbox-size:calc(var(--widget-height)*0.75);--scrollbar-width:5px;background-color:var(--background-color);color:var(--text-color);font-family:var(--font-family);font-size:var(--font-size);font-style:normal;font-weight:400;line-height:1;text-align:left;touch-action:manipulation;user-select:none;-webkit-user-select:none}.lil-gui,.lil-gui *{box-sizing:border-box;margin:0;padding:0}.lil-gui.root{display:flex;flex-direction:column;width:var(--width,245px)}.lil-gui.root>.title{background:var(--title-background-color);color:var(--title-text-color)}.lil-gui.root>.children{overflow-x:hidden;overflow-y:auto}.lil-gui.root>.children::-webkit-scrollbar{background:var(--background-color);height:var(--scrollbar-width);width:var(--scrollbar-width)}.lil-gui.root>.children::-webkit-scrollbar-thumb{background:var(--focus-color);border-radius:var(--scrollbar-width)}.lil-gui.force-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}.lil-gui.autoPlace{max-height:100%;position:fixed;right:15px;top:0;z-index:1001}.lil-gui .controller{align-items:center;display:flex;margin:var(--spacing) 0;padding:0 var(--padding)}.lil-gui .controller.disabled{opacity:.5}.lil-gui .controller.disabled,.lil-gui .controller.disabled *{pointer-events:none!important}.lil-gui .controller>.name{flex-shrink:0;line-height:var(--widget-height);min-width:var(--name-width);padding-right:var(--spacing);white-space:pre}.lil-gui .controller .widget{align-items:center;display:flex;min-height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.string input{color:var(--string-color)}.lil-gui .controller.boolean .widget{cursor:pointer}.lil-gui .controller.color .display{border-radius:var(--widget-border-radius);height:var(--widget-height);position:relative;width:100%}.lil-gui .controller.color input[type=color]{cursor:pointer;height:100%;opacity:0;width:100%}.lil-gui .controller.color input[type=text]{flex-shrink:0;font-family:var(--font-family-mono);margin-left:var(--spacing);min-width:var(--color-input-min-width);width:var(--color-input-width)}.lil-gui .controller.option select{max-width:100%;opacity:0;position:absolute;width:100%}.lil-gui .controller.option .display{background:var(--widget-color);border-radius:var(--widget-border-radius);height:var(--widget-height);line-height:var(--widget-height);max-width:100%;overflow:hidden;padding-left:.55em;padding-right:1.75em;pointer-events:none;position:relative;word-break:break-all}.lil-gui .controller.option .display.active{background:var(--focus-color)}.lil-gui .controller.option .display:after{bottom:0;content:"↕";font-family:lil-gui;padding-right:.375em;position:absolute;right:0;top:0}.lil-gui .controller.option .widget,.lil-gui .controller.option select{cursor:pointer}.lil-gui .controller.number input{color:var(--number-color)}.lil-gui .controller.number.hasSlider input{flex-shrink:0;margin-left:var(--spacing);min-width:var(--slider-input-min-width);width:var(--slider-input-width)}.lil-gui .controller.number .slider{background-color:var(--widget-color);border-radius:var(--widget-border-radius);cursor:ew-resize;height:var(--widget-height);overflow:hidden;padding-right:var(--slider-knob-width);touch-action:pan-y;width:100%}.lil-gui .controller.number .slider.active{background-color:var(--focus-color)}.lil-gui .controller.number .slider.active .fill{opacity:.95}.lil-gui .controller.number .fill{border-right:var(--slider-knob-width) solid var(--number-color);box-sizing:content-box;height:100%}.lil-gui-dragging .lil-gui{--hover-color:var(--widget-color)}.lil-gui-dragging *{cursor:ew-resize!important}.lil-gui-dragging.lil-gui-vertical *{cursor:ns-resize!important}.lil-gui .title{--title-height:calc(var(--widget-height) + var(--spacing)*1.25);-webkit-tap-highlight-color:transparent;text-decoration-skip:objects;cursor:pointer;font-weight:600;height:var(--title-height);line-height:calc(var(--title-height) - 4px);outline:none;padding:0 var(--padding)}.lil-gui .title:before{content:"▾";display:inline-block;font-family:lil-gui;padding-right:2px}.lil-gui .title:active{background:var(--title-background-color);opacity:.75}.lil-gui.root>.title:focus{text-decoration:none!important}.lil-gui.closed>.title:before{content:"▸"}.lil-gui.closed>.children{opacity:0;transform:translateY(-7px)}.lil-gui.closed:not(.transition)>.children{display:none}.lil-gui.transition>.children{overflow:hidden;pointer-events:none;transition-duration:.3s;transition-property:height,opacity,transform;transition-timing-function:cubic-bezier(.2,.6,.35,1)}.lil-gui .children:empty:before{content:"Empty";display:block;font-style:italic;height:var(--widget-height);line-height:var(--widget-height);margin:var(--spacing) 0;opacity:.5;padding:0 var(--padding)}.lil-gui.root>.children>.lil-gui>.title{border-width:0;border-bottom:1px solid var(--widget-color);border-left:0 solid var(--widget-color);border-right:0 solid var(--widget-color);border-top:1px solid var(--widget-color);transition:border-color .3s}.lil-gui.root>.children>.lil-gui.closed>.title{border-bottom-color:transparent}.lil-gui+.controller{border-top:1px solid var(--widget-color);margin-top:0;padding-top:var(--spacing)}.lil-gui .lil-gui .lil-gui>.title{border:none}.lil-gui .lil-gui .lil-gui>.children{border:none;border-left:2px solid var(--widget-color);margin-left:var(--folder-indent)}.lil-gui .lil-gui .controller{border:none}.lil-gui input{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:0;border-radius:var(--widget-border-radius);color:var(--text-color);font-family:var(--font-family);font-size:var(--input-font-size);height:var(--widget-height);outline:none;width:100%}.lil-gui input:disabled{opacity:1}.lil-gui input[type=number],.lil-gui input[type=text]{padding:var(--widget-padding)}.lil-gui input[type=number]:focus,.lil-gui input[type=text]:focus{background:var(--focus-color)}.lil-gui input::-webkit-inner-spin-button,.lil-gui input::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.lil-gui input[type=number]{-moz-appearance:textfield}.lil-gui input[type=checkbox]{appearance:none;-webkit-appearance:none;border-radius:var(--widget-border-radius);cursor:pointer;height:var(--checkbox-size);text-align:center;width:var(--checkbox-size)}.lil-gui input[type=checkbox]:checked:before{content:"✓";font-family:lil-gui;font-size:var(--checkbox-size);line-height:var(--checkbox-size)}.lil-gui button{-webkit-tap-highlight-color:transparent;background:var(--widget-color);border:1px solid var(--widget-color);border-radius:var(--widget-border-radius);color:var(--text-color);cursor:pointer;font-family:var(--font-family);font-size:var(--font-size);height:var(--widget-height);line-height:calc(var(--widget-height) - 4px);outline:none;text-align:center;text-transform:none;width:100%}.lil-gui button:active{background:var(--focus-color)}@font-face{font-family:lil-gui;src:url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff")}@media (pointer:coarse){.lil-gui.allow-touch-styles{--widget-height:28px;--padding:6px;--spacing:6px;--font-size:13px;--input-font-size:16px;--folder-indent:10px;--scrollbar-width:7px;--slider-input-min-width:50px;--color-input-min-width:65px}}@media (hover:hover){.lil-gui .controller.color .display:hover:before{border:1px solid #fff9;border-radius:var(--widget-border-radius);bottom:0;content:" ";display:block;left:0;position:absolute;right:0;top:0}.lil-gui .controller.option .display.focus{background:var(--focus-color)}.lil-gui .controller.option .widget:hover .display{background:var(--hover-color)}.lil-gui .controller.number .slider:hover{background-color:var(--hover-color)}body:not(.lil-gui-dragging) .lil-gui .title:hover{background:var(--title-background-color);opacity:.85}.lil-gui .title:focus{text-decoration:underline var(--focus-color)}.lil-gui input:hover{background:var(--hover-color)}.lil-gui input:active{background:var(--focus-color)}.lil-gui input[type=checkbox]:focus{box-shadow:inset 0 0 0 1px var(--focus-color)}.lil-gui button:hover{background:var(--hover-color);border-color:var(--hover-color)}.lil-gui button:focus{border-color:var(--focus-color)}}'),fo=!0),n?n.appendChild(this.domElement):e&&(this.domElement.classList.add("autoPlace"),document.body.appendChild(this.domElement)),s&&this.domElement.style.setProperty("--width",s+"px"),this.domElement.addEventListener("keydown",l=>l.stopPropagation()),this.domElement.addEventListener("keyup",l=>l.stopPropagation())}add(t,e,n,s,r){if(Object(n)===n)return new mh(this,t,e,n);const a=t[e];switch(typeof a){case"number":return new ph(this,t,e,n,s,r);case"boolean":return new lh(this,t,e);case"string":return new gh(this,t,e);case"function":return new ir(this,t,e)}console.error(`gui.add failed
	property:`,e,`
	object:`,t,`
	value:`,a)}addColor(t,e,n=1){return new dh(this,t,e,n)}addFolder(t){return new ba({parent:this,title:t})}load(t,e=!0){return t.controllers&&this.controllers.forEach(n=>{n instanceof ir||n._name in t.controllers&&n.load(t.controllers[n._name])}),e&&t.folders&&this.folders.forEach(n=>{n._title in t.folders&&n.load(t.folders[n._title])}),this}save(t=!0){const e={controllers:{},folders:{}};return this.controllers.forEach(n=>{if(!(n instanceof ir)){if(n._name in e.controllers)throw new Error(`Cannot save GUI with duplicate property "${n._name}"`);e.controllers[n._name]=n.save()}}),t&&this.folders.forEach(n=>{if(n._title in e.folders)throw new Error(`Cannot save GUI with duplicate folder "${n._title}"`);e.folders[n._title]=n.save()}),e}open(t=!0){return this._closed=!t,this.$title.setAttribute("aria-expanded",!this._closed),this.domElement.classList.toggle("closed",this._closed),this}close(){return this.open(!1)}show(t=!0){return this._hidden=!t,this.domElement.style.display=this._hidden?"none":"",this}hide(){return this.show(!1)}openAnimated(t=!0){return this._closed=!t,this.$title.setAttribute("aria-expanded",!this._closed),requestAnimationFrame(()=>{const e=this.$children.clientHeight;this.$children.style.height=e+"px",this.domElement.classList.add("transition");const n=r=>{r.target===this.$children&&(this.$children.style.height="",this.domElement.classList.remove("transition"),this.$children.removeEventListener("transitionend",n))};this.$children.addEventListener("transitionend",n);const s=t?this.$children.scrollHeight:0;this.domElement.classList.toggle("closed",!t),requestAnimationFrame(()=>{this.$children.style.height=s+"px"})}),this}title(t){return this._title=t,this.$title.innerHTML=t,this}reset(t=!0){return(t?this.controllersRecursive():this.controllers).forEach(e=>e.reset()),this}onChange(t){return this._onChange=t,this}_callOnChange(t){this.parent&&this.parent._callOnChange(t),this._onChange!==void 0&&this._onChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}onFinishChange(t){return this._onFinishChange=t,this}_callOnFinishChange(t){this.parent&&this.parent._callOnFinishChange(t),this._onFinishChange!==void 0&&this._onFinishChange.call(this,{object:t.object,property:t.property,value:t.getValue(),controller:t})}destroy(){this.parent&&(this.parent.children.splice(this.parent.children.indexOf(this),1),this.parent.folders.splice(this.parent.folders.indexOf(this),1)),this.domElement.parentElement&&this.domElement.parentElement.removeChild(this.domElement),Array.from(this.children).forEach(t=>t.destroy())}controllersRecursive(){let t=Array.from(this.controllers);return this.folders.forEach(e=>{t=t.concat(e.controllersRecursive())}),t}foldersRecursive(){let t=Array.from(this.folders);return this.folders.forEach(e=>{t=t.concat(e.foldersRecursive())}),t}}let po=function(i,t,e){let n=Math.cos(i)*Math.sin(e),s=Math.sin(i)*Math.sin(e),r=Math.cos(t)*Math.cos(e),a=Math.sin(t)*Math.cos(e);return new K0(n,r,-s,a)},mo=function(i){return new D(i.x,i.y,i.z).divideScalar(1-i.w)},O1=function(i=glassColor,t=!1){let e={color:i,clearcoat:1,roughness:.1,metalness:0};return t&&(e.transparent=!0,e.opacity=1,e.transmission=.5,e.ior=1.05,e.thickness=.2),new Vo(e)},gn={red:13908795,orange:12737323,yellow:15248426,green:4432699,blue:4360181,purple:8210109,pink:13584575,glass:13232895},_h={dark:998533,medium:3438819,light:6134780};class go extends St{constructor(t=(s,r,a)=>a.set(s,r,Math.cos(s)*Math.sin(r)),e=8,n=8){super(),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n};const s=[],r=[],a=[],o=[],l=1e-5,u=new D,h=new D,f=new D,c=new D,m=new D,g=e+1;for(let _=0;_<=n;_++){const d=_/n;for(let p=0;p<=e;p++){const x=p/e;t(x,d,h),r.push(h.x,h.y,h.z),x-l>=0?(t(x-l,d,f),c.subVectors(h,f)):(t(x+l,d,f),c.subVectors(f,h)),d-l>=0?(t(x,d-l,f),m.subVectors(h,f)):(t(x,d+l,f),m.subVectors(f,h)),u.crossVectors(c,m).normalize(),a.push(u.x,u.y,u.z),o.push(x,d)}}for(let _=0;_<n;_++)for(let d=0;d<e;d++){const p=_*g+d,x=_*g+d+1,y=(_+1)*g+d+1,v=(_+1)*g+d;s.push(p,x,v),s.push(x,y,v)}this.setIndex(s),this.setAttribute("position",new yt(r,3)),this.setAttribute("normal",new yt(a,3)),this.setAttribute("uv",new yt(o,2))}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}const _o=new Vr([new D(-1,-1,0),new D(-1,1,0),new D(1,1,0)]);class vh extends St{constructor(t=_o,e=_o,n=64,s=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:n,radii:e,radialSegments:s,closed:r};const a=t.computeFrenetFrames(n,r);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;const o=new D,l=new D,u=new f0;let h=new D,f;const c=[],m=[],g=[],_=[];d(),this.setIndex(_),this.setAttribute("position",new yt(c,3)),this.setAttribute("normal",new yt(m,3)),this.setAttribute("uv",new yt(g,2));function d(){for(let v=0;v<n;v++)p(v);p(r===!1?n:0),y(),x()}function p(v){h=t.getPointAt(v/n,h),f=e.getPointAt(v/n,f);const T=a.normals[v],A=a.binormals[v];for(let w=0;w<=s;w++){const P=w/s*Math.PI*2,b=Math.sin(P),M=-Math.cos(P);l.x=M*T.x+b*A.x,l.y=M*T.y+b*A.y,l.z=M*T.z+b*A.z,l.normalize(),m.push(l.x,l.y,l.z),o.x=h.x+f.x*l.x,o.y=h.y+f.x*l.y,o.z=h.z+f.x*l.z,c.push(o.x,o.y,o.z)}}function x(){for(let v=1;v<=n;v++)for(let T=1;T<=s;T++){const A=(s+1)*(v-1)+(T-1),w=(s+1)*v+(T-1),P=(s+1)*v+T,b=(s+1)*(v-1)+T;_.push(A,w,b),_.push(w,P,b)}}function y(){for(let v=0;v<=n;v++)for(let T=0;T<=s;T++)u.x=v/n,u.y=T/s,g.push(u.x,u.y)}}copy(t){return super.copy(t),this.parameters=Object.assign({},t.parameters),this}}class xh{constructor(t,e){this.coordCurve=t,this.length=e.length,this.area=e.area,this.tau=e.tau,this.fromTauCoords=e.fromTauCoords,this.res=256;let n=function(o){let l=25e-5,u=Math.floor(o/l),h=0,f=0;for(let c=0;c<u;c++){let m=t(f),g=t(f+l),_=Math.sin(m.phi/2),d=g.theta-m.theta;h+=_*_*d,f+=l}return h},s=function(o){let l=0,u=0,h=3e3,f=2*Math.PI/h;for(let c=0;c<h;c++){let m=t(l),g=t(l+f),_=Math.sin(m.phi),d=g.theta-m.theta,p=g.phi-m.phi,x=_*_*d*d+p*p,y=Math.sqrt(x);if(u+=y,u>o)break;l+=f}return l},r=function(o){let l=new f0(e.area/2,e.length/2);for(;o.y>e.length/2;)o=o.sub(l);return o};this.toFundamentalDomain=r;let a=function(o){o=r(o);let l=o.x,u=o.y,h=s(2*u),f=t(h),c=f.phi,m=f.theta,g=n(h),_=po(m+l-g,l-g,c/2);return mo(_)};this.isometricImage=a}getSurface(t=gn.glass,e=!1){let n=this.coordCurve,s=function(o,l,u){let h=2*Math.PI*o,f=2*Math.PI*l,c=n(f),m=c.phi,g=c.theta,_=po(g+h,h,m/2),d=mo(_);u.set(d.x,d.y,d.z)},r=new go(s,this.res,this.res),a=O1(t,e);return new At(r,a)}getSubSurface(t,e=gn.glass,n=!1){let s=this.isometricImage,r=function(l,u,h){let f=t(l,u),c=s(f);h.set(c.x,c.y,c.z)},a=new go(r,512,512);a.computeVertexNormals();let o=O1(e,n);return o.side=ie,new At(a,o)}getLift(t,e=gn.red,n=.05,s=!1){let r=[],a=[];for(let f=0;f<this.res+1;f++){let c=f/this.res,m=t(c),g=this.isometricImage(m);r.push(g);let _=n*(1+g.lengthSq());a.push(new D(_,_,_))}console.log(r);let o=new Vr(r),l=new Vr(a),u=new vh(o,l,2*this.res,16,closed),h=O1(e,s);return new At(u,h)}getFiberAt(t,e=gn.blue,n=.025,s=!1){let a=new f0(this.area/2,this.length/2).multiplyScalar(t),o=new f0(2*Math.PI,0),l=function(u){return a.clone().add(o.clone().multiplyScalar(u))};return this.getLift(l,e,n,s)}getEdgeAt(t,e=gn.blue,n=.025,s=!1){let r=new f0(this.area/2,this.length/2),a=new f0(2*Math.PI,0).multiplyScalar(t),o=function(l){return a.clone().add(r.clone().multiplyScalar(l))};return this.getLift(o,e,n,s)}getGridlines(t,e=gn.blue,n=.025,s=!1){let r=new ti;for(let a=0;a<t+1;a++){let o=this.getFiberAt(a/t,e,n,s),l=this.getEdgeAt(a/t,e,n,s);r.add(o),r.add(l)}return r}getPoint(t,e=gn.red,n=.05,s=!1){let r=this.isometricImage(t),a=1+r.lengthSq(),o=new fa(n*a),l=O1(e,s),u=new At(o,l);return u.position.set(r.x,r.y,r.z),u}}const Sa=new f0(1/2,Math.sqrt(7)/2);let yh=4*Math.PI*Sa.x,Mh=4*Math.PI*Sa.y,bh=function(i){let t=.1179,e=3.89,n=7;return{phi:Math.PI/2+t*e*Math.cos(n*i),theta:i+t*Math.sin(2*n*i)}},Sh=function(i){let t=i[0],e=i[1];return new f0(t,e).multiplyScalar(2*Math.PI)},Th={area:yh,length:Mh,tau:Sa,fromTauCoords:Sh};const vo=[[.71012931,.29365558],[-.275862,.96364649],[.50377155,.9308597],[.19719827,.6927991],[.0307112,1.20170708],[-.0942887,1.03634763],[.87176724,.26514533],[-.0328663,.13257266],[.70528017,.77405331],[-.1993534,.64148065],[.27370689,.37063326],[.58028017,.60869386],[-.3658405,1.15038863],[.10721982,.87954124],[.23221982,1.0449007],[.00215517,.48467427],[.47521551,.21382688],[.78178879,.45188748],[.30872844,.72273486],[.61530172,.96079546],[.67672413,.0570205],[.0387931,.29080456],[-.1276939,.79971254],[-.294181,1.30862052],[.07381465,.64290616],[.546875,.37205877],[.38038793,.88096676],[.015625,1.28153579],[.74838362,.21525239],[.15032327,.32074032],[.21713362,1.1247294],[-.2144396,.72130935],[-.3809267,1.23021733],[.46012931,.29365558],[-.1794181,1.07341095],[.29364224,.80256357],[-.0845905,.24091162],[.49515086,.64575718],[-.0177801,1.0449007],[.2887931,1.2829613],[-.1427801,.87954124],[.65678879,.61724693],[.22521551,.21382688],[.49030172,1.12615492],[.53178879,.45188748],[.05872844,.72273486],[.36530172,.96079546],[-.1077586,1.23164285],[.42672413,.0570205],[.73329741,.29508109],[.26023706,.56592848],[.56681034,.80398908],[.13523706,.40056902],[.20204741,1.20455811],[.40032327,1.31289706],[.93480603,.13827471],[.03017241,.00570205],[.33674568,.24376264],[-.3426724,1.15181414],[-.1411637,.99500776],[-.0996767,.32074032],[.33189655,.72416038],[.16540948,1.23306836],[.80495689,.45331299],[.53340517,.56735399],[.10183189,.16393394],[.64170258,.69707564],[.47521551,1.20598362],[.04364224,.80256357],[.41163793,.1368492],[.24515086,.64575718],[.7182112,.3749098],[.07866379,1.15466517],[.55172413,.88381778],[.24030172,1.12615492],[-.3577586,1.23164285],[.375,.16535945],[.17672413,.0570205],[.01023706,.56592848],[-.15625,1.07483647],[.31681034,.80398908],[.15032327,1.31289706],[-.28125,.90947701],[-.1147629,.40056902],[.68480603,.13827471],[.21174568,.4091221],[.04525862,.91803008],[.51831896,.6471827],[.35183189,1.15609068],[-.0797413,.75267063],[.39331896,.48182324],[.08674568,.24376264],[.28825431,.08695626],[.59482758,.32501686],[-.0845905,1.23306836],[.1169181,1.07626198],[.58997844,.80541459],[.05334051,.00712756],[-.1131465,.51603554],[.35991379,.24518816],[.19342672,.75409614],[.42672413,1.04917724],[-.1713362,1.15466517],[.56142241,.08838177],[.66971982,.21810342],[.86799568,.32644237],[.03017241,.99785879],[.50323275,.7270114],[.33674568,1.23591938],[.70474137,.57020502],[.53825431,1.079113],[-.40625,1.07483647],[-.0996767,1.31289706],[-.0382543,.4091221],[-.2047413,.91803008],[.26831896,.6471827],[.10183189,1.15609068],[.57489224,.88524329],[.46982758,.49037632],[.03825431,.08695626],[.30334051,.9992843],[-.1282327,.59586425],[.34482758,.32501686],[-.2947198,1.10477223],[.17834051,.83392484],[.07327586,.43905786],[.5463362,.16821048],[.37984913,.67711846],[.10991379,.24518816],[.375,1.15751619],[-.0565732,.75409614],[.31142241,.08838177],[.14493534,.59728976],[.61799568,.32644237],[-.2198275,.99785879],[.08674568,1.23591938],[.81950431,.16963599],[.45474137,.57020502],[.22144396,.27512392],[.28825431,1.079113],[.21982758,.49037632],[-.4197198,1.27013169],[.05334051,.9992843],[.35991379,1.2373449],[-.0716594,.83392484],[.89439655,.06272255],[.25484913,.84247792],[.2963362,.16821048],[.72790948,.57163053],[-.3432112,.94796585],[.12984913,.67711846],[-.0366379,1.18602644],[.60290948,.40627107],[.43642241,.91517906],[.56142241,1.08053852],[.49784482,.0114041],[.33135775,.52031208],[.8044181,.24946469],[.63793103,.75837268],[.47144396,1.26728066],[.06142241,.08838177],[-.1050646,.59728976],[-.2715517,1.10619774],[.56950431,.16963599],[.09644396,.44048338],[.40301724,.67854397],[-.0700431,.94939136],[.03825431,1.079113],[.23653017,1.18745196],[.77101293,.01282961],[.60452586,.52173759],[.17295258,.11831754],[.71282327,.65145923],[.5463362,1.16036722],[.00484913,.84247792],[.31142241,1.08053852],[-.2866379,1.18602644],[.6794181,.41482415],[.24784482,.0114041],[.44612068,.11974305],[.08135775,.52031208],[.5544181,.24946469],[-.0851293,1.02922006],[.38793103,.75837268],[.51293103,.92373213],[.22144396,1.26728066],[.28286637,.3635057],[.75592672,.09265831],[.58943965,.6015663],[.42295258,1.11047428],[-.153556,.44048338],[.15301724,.67854397],[-.3200431,.94939136],[.52101293,.01282961],[.04795258,.28367699],[.35452586,.52173759],[.8275862,.25089021],[.18803879,1.03064558],[.66109913,.75979819],[-.1185344,.79258498],[.55603448,.36493121],[.43103448,.19957175],[.49784482,1.00356084],[-.0420258,.47041914],[-.2101293,1.19457952],[.26293103,.92373213],[-.3351293,1.02922006],[-.028556,1.26728066],[.03286637,.3635057],[.29795258,1.27583374],[-.1336206,.87241368],[.33943965,.6015663],[.64601293,.83962689],[.17295258,1.11047428],[.06788793,.7156073],[.109375,.04133986],[.54094827,.44475991],[.3744612,.9536679],[.10452586,.52173759],[-.0619612,1.03064558],[.30603448,.36493121],[.77909482,.09408382],[.13954741,.87383919],[.18103448,.19957175],[.61260775,.60299181],[.44612068,1.11189979],[-.1670258,.6357786],[.5075431,.20812483],[.81411637,.44618543],[.3825431,.04276537],[-.0905172,.31361276],[.21605603,.55167336],[.890625,.12401959],[.21443965,.76692575],[-.0188577,.47184465],[.04795258,1.27583374],[-.0770474,1.11047428],[.6557112,.04419088],[-.182112,.7156073],[.29094827,.44475991],[.59752155,.68282051],[-.3485991,1.22451528],[.43103448,1.1917285],[.1244612,.9536679],[.96551724,.01710615],[.49245689,.28795353],[.79903017,.52601413],[-.1056034,.39344146],[.32596982,.79686152],[.05603448,.36493121],[.09590517,.23663508],[-.1104525,.87383919],[.19612068,1.11189979],[.09105603,.71703281],[.1325431,.04276537],[-.075431,1.2259408],[-.0339439,.55167336],[.56411637,.44618543],[-.200431,1.06058134],[.39762931,.95509341],[.765625,.28937904],[.59913793,.79828703],[.16756465,.39486697],[.640625,.12401959],[.47413793,.63292757],[-.3636853,1.30434399],[.31088362,.87669022],[-.0673491,.31503827],[.4057112,.04419088],[-.2338362,.82394625],[.24245689,.28795353],[.5075431,1.20028157],[.07596982,.79686152],[.44073275,.39629249],[.3825431,1.03492211],[-.0905172,1.3057695],[.75053879,.36920775],[.58405172,.87811573],[.15247844,.47469568],[.11099137,1.14896312],[.82704741,.04704191],[.35398706,.3178893],[-.325431,1.2259408],[.14762931,.95509341],[-.1239224,1.06913441],[-.0824353,.39486697],[.34913793,.79828703],[-.2489224,.90377496],[.18265086,1.30719501],[.55064655,.64148065],[.11907327,.23806059],[-.0474137,.74696858],[-.0059267,.07270114],[.42564655,.47612119],[.25915948,.98502917],[.89870689,.2052738],[.62715517,.31931481],[.73545258,.44903645],[.09590517,1.22879182],[.56896551,.95794444],[.19073275,.39629249],[-.3405172,1.3057695],[.69881465,.4775467],[.02747844,.64005513],[.33405172,.87811573],[-.1390086,1.14896312],[-.2640086,.98360366],[.53556034,.72130935],[.10398706,.3178893],[.36907327,1.23021733],[-.0625,.82679728],[.41056034,.55594989],[.30549568,.16108291],[.13900862,.6699909],[.61206896,.39914351],[.44558189,.9080515],[-.0673491,1.30719501],[.13415948,1.15038863],[.17564655,.47612119],[.60721982,.87954124],[-.4639008,1.25587656],[.00915948,.98502917],[.07058189,.08125421],[-.0959051,.59016219],[.37715517,.31931481],[.2106681,.82822279],[.85021551,.04846742],[-.1540948,1.22879182],[.68372844,.55737541],[.57866379,.16250843],[-.0193965,.26799636],[.52047413,.80113805],[.28717672,.50605695],[.35398706,1.31004604],[.96174568,.07840319],[-.1907327,1.25730207],[-.3890086,1.14896312],[.28556034,.72130935],[.4838362,.8296483],[.11907327,1.23021733],[-.3125,.82679728],[-.0059267,1.06485788],[.05549568,.16108291],[.32058189,1.07341095],[-.1109913,.6699909],[.36206896,.39914351],[-.2774784,1.17889888],[.19558189,.9080515],[.66864224,.63720411],[.56357758,.24233713],[.39709051,.75124511],[.12715517,.31931481],[.39224137,1.23164285],[-.0393318,.82822279],[-.1443965,.43335581],[.32866379,.16250843],[.16217672,.67141641],[.63523706,.40056902],[.46875,.90947701],[.03717672,.50605695],[-.0043103,1.18032439],[.10398706,1.31004604],[.53017241,.00570205],[.83674568,.24376264],[.67025862,.75267063],[.23868534,.34925057],[.71174568,.07840319],[.00377155,.26942187],[.07058189,1.07341095],[-.1627155,.77832985],[.37715517,1.31147155],[.74515086,.64575718],[.31357758,.24233713],[.51185344,.35067608],[-.3259698,1.0220925],[.14709051,.75124511],[-.0193965,1.2601531],[.45366379,.98930571],[.34859913,.59443873],[.82165948,.32359135],[.65517241,.83249933],[.07866379,.16250843],[-.0878232,.67141641],[.21875,.90947701],[-.2543103,1.18032439],[.28017241,.00570205],[.11368534,.51461003],[.58674568,.24376264],[.42025862,.75267063],[-.0113146,.34925057],[.25377155,1.26157861],[-.1778017,.85815856],[-.0528017,1.02351801],[.78825431,.08695626],[.62176724,.59586425],[.19019396,.19244419],[.49676724,.43050479],[.02370689,.70135217],[.33028017,.93941277],[.69827586,.27369841],[-.2112068,.62152347],[.26185344,.35067608],[.32866379,1.15466517],[-.2693965,1.2601531],[.46336206,.1938697],[.09859913,.59443873],[-.0678879,1.10334672],[.40517241,.83249933],[.7731681,.16678496],[.60668103,.67569295],[.44019396,1.18460093],[-.1363146,.51461003],[.17025862,.75267063],[-.3028017,1.02351801],[.00377155,1.26157861],[.53825431,.08695626],[.37176724,.59586425],[.84482758,.32501686],[.20528017,1.10477223],[.24676724,.43050479],[.67834051,.83392484],[-.059806,.19244419],[-.2262931,.70135217],[-.1012931,.86671163],[.57327586,.43905786],[.14170258,.03563781],[-.3927801,1.21026016],[.44827586,.27369841],[.9213362,.00285102],[.28178879,.78260639],[.75484913,.511759],[-.0247844,.54454579],[.64978448,.11689202],[.21336206,.1938697],[.28017241,.99785879],[.046875,.70277769],[-.3178879,1.10334672],[.41487068,.03706332],[.72144396,.27512392],[-.1163793,.94654033],[.35668103,.67569295],[.19019396,1.18460093],[.55495689,.7840319],[.12661637,.11546651],[.39170258,1.02779455],[.12176724,.59586425],[-.0447198,1.10477223],[.32327586,.43905786],[.7963362,.16821048],[.15678879,.94796585],[.19827586,.27369841],[.62984913,.67711846],[.03178879,.78260639],[.46336206,1.18602644],[-.1346982,1.29151437],[.39978448,.11689202],[-.0732758,.38773941],[.23329741,.62580001],[.70635775,.35495262],[.53987068,.86386061],[.90786637,.19814624],[-.0366379,.1938697],[.00323275,.06557357],[-.203125,.70277769],[.16487068,.03706332],[-.0016163,.54597131],[.47144396,.27512392],[-.1681034,1.05487929],[.67295258,.11831754],[.30818965,.51888657],[.07489224,.22380547],[.14170258,1.02779455],[.50646551,.62722552],[.44827586,1.26585515],[-.088362,.46756811],[.38469827,.19672073],[.58620689,.03991435],[-.0932112,.94796585],[.21336206,1.18602644],[-.3846982,1.29151437],[.10829741,.79115947],[.14978448,.11689202],[-.0581896,1.30006745],[-.0167025,.62580001],[.58135775,.52031208],[-.1831896,1.13470799],[.28987068,.86386061],[.41487068,1.02922006],[.78286637,.3635057],[.61637931,.87241368],[.18480603,.46899363],[.65786637,.19814624],[.01831896,.97790161],[.49137931,.70705422],[.32489224,1.21596221],[.859375,.04133986],[.69288793,.55024784],[-.0501077,.38916492],[.42295258,.11831754],[-.2165948,.89807291],[.25646551,.62722552],[.08997844,1.13613351],[.45797413,.47041914],[.02640086,.06699909],[-.1400862,.57590707],[.39978448,1.10904877],[.33620689,.03991435],[.6012931,.95224238],[.16971982,.54882233],[.53448275,.1482533],[.84428879,.12116856],[-.3081896,1.30006745],[.16487068,1.02922006],[.20474137,.90092393],[.29956896,.0684246],[.36637931,.87241368],[-.0651939,.46899363],[-.231681,.97790161],[.24137931,.70705422],[.07489224,1.21596221],[.13631465,.31218725],[.609375,.04133986],[-.0301724,.82109523],[.01131465,.14682779],[.44288793,.55024784],[.27640086,1.05915583],[.64439655,.39344146],[.0463362,.49892939],[.00646551,.62722552],[.68103448,.19957175],[.72090517,.07127562],[.51454741,.70847974],[.20797413,.47041914],[.04148706,.97932712],[.8825431,.04276537],[.71605603,.55167336],[.28448275,.1482533],[.3512931,.95224238],[.54956896,1.06058134],[-.2467672,1.05773031],[.79256465,.22950752],[.12122844,.39201595],[.42780172,.63007655],[-.0452586,.90092393],[.62931034,.47327016],[.46282327,.98217815],[-.1136853,.31218725],[.6244612,.9536679],[-.2801724,.82109523],[.19288793,.55024784],[.02640086,1.05915583],[-.0786637,.66428885],[.39439655,.39344146],[.22790948,.90234945],[.26939655,.228082],[.86745689,.12259408],[-.3701508,1.00783737],[.70096982,.63150206],[.53448275,1.14041004],[-.0021551,.34212301],[.47090517,.07127562],[.3044181,.58018361],[-.2085129,.97932712],[.46605603,.55167336],[.03448275,.1482533],[.29956896,1.06058134],[.50107758,.90377496],[.06950431,.5003549],[.13631465,1.30434399],[-.0969827,1.00926289],[-.2952586,.90092393],[.74407327,.07270114],[.37931034,.47327016],[.5775862,.58160912],[-.260237,1.25302554],[.21282327,.98217815],[.41433189,.82537177],[.14439655,.39344146],[-.0220905,.90234945],[.28448275,1.14041004],[.34590517,.23663508],[.1794181,.74554306],[.22090517,.07127562],[.01293103,1.25445105],[.0544181,.58018361],[.65247844,.47469568],[-.1120689,1.08909159],[.48599137,.98360366],[.85398706,.3178893],[-.0506465,.18531663],[.25592672,.42337723],[.72898706,.15252984],[.5625,.66143782],[.04956896,1.06058134],[.08943965,.93228521],[.76400862,.50463144],[-.1804956,.5003549],[.72413793,.63292757],[-.3469827,1.00926289],[.02101293,.34354852],[.49407327,.07270114],[-.1454741,.85245651],[.3275862,.58160912],[.52909482,.42480274],[.09752155,.02138268],[.16433189,.82537177],[-.0689655,.53029067],[.47090517,1.06343236],[.83890086,.397718],[.60560344,.1026369],[-.0705818,.74554306],[-.2370689,1.25445105],[.23599137,.98360366],[-.3620689,1.08909159],[.60398706,.3178893],[.4375,.82679728],[.00592672,.42337723],[-.0355603,1.09764467],[.3125,.66143782],[-.1605603,.93228521],[.14601293,1.17034581],[.63900862,.6699909],[.20743534,.26657084],[.51400862,.50463144],[.04094827,.77547883],[.34752155,1.01353943],[.71551724,.34782506],[.0775862,.58160912],[-.0274784,.18674214],[-.1939655,.69565012],[.27909482,.42480274],[.11260775,.93371072],[.75215517,.15395535],[.17403017,.02993576],[.48060344,.26799636],[.78717672,.50605695],[-.1174568,.37348429],[.35560344,.1026369],[.42241379,.90662598],[.45743534,1.25872759],[.1875,.82679728],[-.2855603,1.09764467],[.38900862,.6699909],[-.0425646,.26657084],[.22252155,1.17889888],[.26400862,.50463144],[-.2090517,.77547883],[.09752155,1.01353943],[-.3755387,1.28438681],[.46551724,.34782506],[.93857758,.07697767],[.29903017,.85673304],[.77209051,.58588566],[-.0075431,.61867245],[.66702586,.19101868],[.02909482,.42480274],[-.1373922,.93371072],[.23060344,.26799636],[.06411637,.77690434],[.53717672,.50605695],[-.3006465,1.17747337],[-.1023706,1.28581232],[.37068965,1.01496494],[.43211206,.11118997],[.73868534,.34925057],[.37392241,.7498196],[.140625,.4547385],[.20743534,1.25872759],[.57219827,.85815856],[.81519396,.02708473],[.64870689,.53599272],[-.0274784,1.17889888],[.81357758,.24233713],[.17403017,1.0220925],[.21551724,.34782506],[.64709051,.75124511],[.04903017,.85673304],[.48060344,1.2601531],[.35560344,1.09479364],[-.4240301,1.12758043],[.41702586,.19101868],[.25053879,.69992666],[.72359913,.42907928],[.08405172,1.20883465],[.55711206,.93798726],[.02047413,.13970023],[-.1858836,.77690434],[-.3523706,1.28581232],[.18211206,.11118997],[.015625,.62009796],[.48868534,.34925057],[-.150862,1.12900594],[-.109375,.4547385],[.32219827,.85815856],[.21713362,.46329158],[.69019396,.19244419],[.52370689,.70135217],[.09213362,.29793212],[.56519396,.02708473],[-.0743534,.8068401],[.40193965,.27084738],[.60021551,.37918634],[-.0759698,1.0220925],[.23060344,1.2601531],[.05872844,.06129704],[.59859913,.59443873],[.36530172,.29935763],[.43211206,1.10334672],[53879e-8,.69992666],[-.1659482,1.20883465],[.30711206,.93798726],[.20204741,.54312028],[.67510775,.27227289],[.03556034,1.05202826],[.50862068,.78118088],[.34213362,1.29008886],[.87661637,.11546651],[.71012931,.6243745],[.27855603,.22095444],[-.234375,.62009796],[-.400862,1.12900594],[.07219827,.85815856],[.44019396,.19244419],[.74676724,.43050479],[-.1993534,.97219956],[.58028017,.93941277],[.27370689,.70135217],[.10721982,1.21026016],[-.4908405,1.31574809],[.47521551,.54454579],[.04364224,.14112574],[-.1228448,.65003372],[.41702586,1.18317542],[.35021551,.37918634],[.18372844,.88809432],[.55172413,.22237995],[.11530172,.29935763],[.6950431,.7042032],[.18211206,1.10334672],[-.4159482,1.20883465],[.31681034,.14255125],[-.0479525,.54312028],[-.2144396,1.05202826],[.25862068,.78118088],[.09213362,1.29008886],[.62661637,.11546651],[.46012931,.6243745],[.02855603,.22095444],[.29364224,1.13328248],[-.137931,.72986243],[.23006465,.06414806],[.06357758,.57305604],[.53663793,.30220866],[-.1427801,1.21026016],[.73814655,.14540228],[.53178879,.78260639],[.10021551,.37918634],[.36530172,1.29151437],[.05872844,1.05345378],[.73329741,.62580001],[-.1713362,.49322734],[.56681034,1.13470799],[.60829741,.46044055],[.30172413,.22237995],[-.03125,1.24019592],[-.2295258,1.13185697],[.13523706,.73128794],[.50323275,.06557357],[.80980603,.30363417],[.4450431,.7042032],[.64331896,.81254215],[-.0996767,.65145923],[.10183189,.49465285],[.57489224,.22380547],[-.262931,.89522188],[.21012931,.6243745],[.04364224,1.13328248],[.40840517,.73271345],[.77640086,.06699909],[.88469827,.19672073],[-.0199353,.06414806],[.24515086,.9764761],[-.1864224,.57305604],[.28663793,.30220866],[-.3529094,1.08196403],[.12015086,.81111664],[.7182112,.70562871],[.0150862,.41624966],[.48814655,.14540228],[.32165948,.65431026],[.79471982,.38346287],[.11530172,1.29151437],[.31681034,1.13470799],[-.1147629,.73128794],[-.28125,1.24019592],[.25323275,.06557357],[.51831896,.97790161],[.55980603,.30363417],[.08674568,.57448156],[-.0797413,1.08338954],[.39331896,.81254215],[.76131465,.14682779],[.59482758,.65573577],[.16325431,.25231572],[.23006465,1.0563048],[-.3146551,1.00356084],[.35991379,.57590707],[.83297413,.30505968],[-.0048491,.9764761],[.30172413,1.2145367],[-.2963362,1.32002463],[.12984913,.01568063],[.66971982,.54882233],[.23814655,.14540228],[.50323275,1.05773031],[.07165948,.65431026],[-.0948275,1.16321824],[.37823275,.89237086],[.2731681,.49750388],[.74622844,.22665649],[.10668103,1.00641186],[.57974137,.73556448],[.94773706,.06985011],[-.1632543,.57448156],[-.3297413,1.08338954],[.14331896,.81254215],[.03825431,.41767518],[.51131465,.14682779],[.34482758,.65573577],[-.1282327,.92658316],[-.0867456,.25231572],[-.2532327,.7612237],[.17834051,1.16464376],[.81788793,.38488839],[.23976293,.26086879],[.5463362,.49892939],[.11476293,.09550934],[-.0517241,.60441732],[.4213362,.33356993],[.48814655,1.13755902],[.62284482,.17676355],[-.0565732,1.08481505],[.61799568,.65716129],[.25323275,1.05773031],[-.3448275,1.16321824],[.38793103,.09693485],[.45474137,.90092393],[.0231681,.49750388],[-.1433189,1.00641186],[.32974137,.73556448],[.16325431,1.24447246],[.69773706,.06985011],[.53125,.57875809],[.05818965,.84960548],[.36476293,1.08766608],[.73275862,.42195171],[.09482758,.65573577],[-.0716594,1.16464376],[-.010237,.26086879],[-.1767241,.76977678],[.2963362,.49892939],[.12984913,1.00783737],[.1713362,.33356993],[.76939655,.228082],[.60290948,.73698999],[.43642241,1.24589797],[.49784482,.34212301],[.97090517,.07127562],[-.1002155,.44761094],[.37284482,.17676355],[.20635775,.68567154],[.03987068,1.19457952],[.57435344,.01995717],[.88092672,.25801777],[.13793103,.09693485],[-.028556,.60584283],[.64601293,.17818906],[.28125,.57875809],[-.1918103,.84960548],[.11476293,1.08766608],[.48275862,.42195171],[.31627155,.9308597],[-.1201508,1.00783737],[.24784482,.34212301],[-.3917025,1.12187838],[.12284482,.17676355],[.08135775,.85103099],[-.0436422,.68567154],[.5544181,.58018361],[.38793103,1.08909159],[.28286637,.69422461],[.32435344,.01995717],[.75592672,.42337723],[.15786637,.52886515],[.63092672,.25801777],[-.0086206,1.03777314],[.46443965,.76692575],[.58943965,.93228521],[.83243534,.10121139],[.66594827,.61011937],[-.0770474,.44903645],[-.010237,1.25302554],[-.2435344,.95794444],[.59752155,.02138268],[.1244612,.29223007],[.43103448,.53029067],[.06627155,.9308597],[-.4067887,1.20170708],[.37284482,1.16892029],[.26778017,.77405331],[.74084051,.50320593],[.1012931,1.2829613],[.57435344,1.01211391],[-.1686422,.85103099],[.13793103,1.08909159],[.19935344,.18531663],[.03286637,.69422461],[.50592672,.42337723],[-.1336206,1.2031326],[-.0921336,.52886515],[.33943965,.93228521],[-.2586206,1.03777314],[.70743534,.26657084],[.54094827,.77547883],[.109375,.37205877],[.58243534,.10121139],[-.057112,.88096676],[.41594827,.61011937],[.2494612,1.11902735],[.31088362,.21525239],[.61745689,.45331299],[.34752155,.02138268],[.18103448,.53029067],[-.2920258,.80113805],[.07596982,.13542369],[.3825431,.37348429],[.85560344,.1026369],[.01778017,.77405331],[-.1487068,1.2829613],[.32435344,1.01211391],[.69234913,.34639955],[.45905172,.05131845],[.52586206,.85530753],[.29579741,.29508109],[-.2171336,.69422461],[-.3836206,1.2031326],[.45743534,.26657084],[-.182112,1.04632621],[-.140625,.37205877],[.59752155,1.01353943],[-.307112,.88096676],[.16594827,.61011937],[.29094827,.77547883],[-5387e-7,1.11902735],[.1244612,1.28438681],[.49245689,.61867245],[.06088362,.21525239],[.84051724,.1824656],[-.1056034,.72416038],[.67403017,.69137359],[.36745689,.45331299],[.20096982,.96222097],[.56896551,.29650661],[.1325431,.37348429],[-.0339439,.88239227],[.33405172,.2166779],[.16756465,.72558589],[.20905172,.05131845],[.27586206,.85530753],[.640625,.4547385],[.47413793,.96364649],[.84213362,.29793212],[.04579741,.29508109],[.31088362,1.20740913],[-.1206896,.80398908],[.55387931,.37633531],[-.1255387,1.28438681],[.00915948,.32359135],[.54903017,.85673304],[.07596982,1.12758043],[-.0490301,.96222097],[-.1540948,.56735399],[.31896551,.29650661],[.62553879,.5345672],[-.3205818,1.07626198],[.45905172,1.04347519],[.19396551,.13114715],[.15247844,.80541459],[-.0140086,1.31432258],[.52047413,.13970023],[.82704741,.37776082],[-.0775862,.24518816],[.66056034,.88666881],[-.2839439,.88239227],[-.0824353,.72558589],[.390625,.4547385],[-.2489224,1.23449387],[.22413793,.96364649],[.59213362,.29793212],[.42564655,.8068401],[-.0059267,.40342005],[.06088362,1.20740913],[.19558189,.24661367],[-.169181,.6471827],[.30387931,.37633531],[-.3356681,1.15609068],[.13739224,.88524329],[.50215517,.48467427],[.33890086,.72843691],[.8119612,.45758953],[.33405172,1.20883465],[-.0975215,.80541459],[.20905172,1.04347519],[-.2640086,1.31432258],[.27047413,.13970023],[.53556034,1.05202826],[.57704741,.37776082],[.10398706,.64860821],[-.0625,1.15751619],[.41056034,.88666881],[-.0210129,.48324875],[.77855603,.22095444],[.61206896,.72986243],[.65355603,.05559498],[.18049568,.32644237],[.01400862,.83535036],[.68857758,.40769659],[.17564655,.8068401],[.00915948,1.31574809],[.85021551,.37918634],[-.0544181,.24661367],[-.2209051,.75552165],[.31896551,1.28866335],[.14709051,.08980729],[.45366379,.32786788],[.92672413,.0570205],[.08890086,.72843691],[-.0775862,1.2373449],[.39547413,.96649751],[.76346982,.30078315],[.12392241,1.08053852],[.59698275,.80969113],[-.1460129,.64860821],[-.3125,1.15751619],[.16056034,.88666881],[.52855603,.22095444],[.72683189,.3292934],[-.1109913,1.00070981],[.36206896,.72986243],[.19558189,1.23877041],[-.2359913,.83535036],[.23706896,.56450297],[-.0695043,.32644237],[.05549568,.49180183],[.56357758,.57305604],[.13200431,.16963599],[-.0344827,.67854397],[.43857758,.40769659],[.27209051,.91660457],[.91163793,.1368492],[-.2408405,1.31574809],[.33351293,.01282961],[.6400862,.25089021],[.43372844,.88809432],[.20366379,.32786788],[.46875,1.24019592],[.03717672,.83677587],[-.3275862,1.2373449],[.40517241,.1710615],[.71174568,.4091221],[-.1260775,1.08053852],[.34698275,.80969113],[.18049568,1.31859911],[.54849137,.65288475],[.38200431,1.16179273],[-.3609913,1.00070981],[-.0544181,1.23877041],[.48006465,.06414806],[.31357758,.57305604],[.14709051,1.08196403],[.18857758,.40769659],[.62015086,.81111664],[.02209051,.91660457],[.45366379,1.32002463],[.08351293,.01282961],[.34859913,.92515765],[-.0829741,.52173759],[.3900862,.25089021],[.22359913,.75979819],[.69665948,.4889508],[.05711206,1.26870617],[.53017241,.99785879],[.59159482,.09408382],[.21875,1.24019592],[-.2128232,.83677587],[.15517241,.1710615],[-.0113146,.67996949],[.46174568,.4091221],[-.1778017,1.18887747],[.35668103,.01425512],[.66325431,.25231572],[.19019396,.5231631],[.49676724,.7612237],[.06519396,.35780365],[.13200431,1.16179273],[.86476293,.09550934],[-.1029094,1.08196403],[.20366379,1.32002463],[.03178879,.12116856],[.09859913,.92515765],[.57165948,.65431026],[.40517241,1.16321824],[-.0264008,.75979819],[-.1928879,1.26870617],[.7731681,.49750388],[.34159482,.09408382],[.60668103,1.00641186],[-.2979525,.87383919],[.17510775,.60299181],[.00862068,1.11189979],[.6481681,.33214442],[.48168103,.84105241],[.37661637,.44618543],[.84967672,.17533804],[.68318965,.68424602],[.47683189,1.32145014],[-.4278017,1.18887747],[.10668103,.01425512],[.41325431,.25231572],[-.059806,.5231631],[.24676724,.7612237],[-.2262931,1.03207109],[.61476293,.09550934],[.14170258,.36635672],[.44827586,.60441732],[.01670258,.20099727],[.08351293,1.00498635],[-.1497844,.70990525],[.3900862,1.24304695],[.2182112,.04419088],[.52478448,.28225148],[-.1514008,.92515765],[-.4428879,1.26870617],[.5231681,.49750388],[-.1163793,1.27725925],[-.0748922,.60299181],[.35668103,1.00641186],[-.2413793,1.11189979],[.23168103,.84105241],[.12661637,.44618543],[.59967672,.17533804],[-.0398706,.95509341],[.43318965,.68424602],[.26670258,1.19315401],[.80118534,.01853166],[.63469827,.52743964],[.36476293,.09550934],[-.1082974,.36635672],[.19827586,.60441732],[-.2747844,.87526471],[.03178879,1.1133253],[.0932112,.20955034],[.39978448,.44761094],[.87284482,.17676355],[.23329741,.95651892],[.27478448,.28225148],[.34159482,1.08624057],[.70635775,.68567154],[.53987068,1.19457952],[-.1982758,.55309887],[.4762931,.1254451],[.11153017,.52601413],[.78609913,.09836036],[-.3663793,1.27725925],[.24137931,.0456164],[.30818965,.84960548],[-.1233836,.44618543],[.07489224,.55452438],[-.2898706,.95509341],[.01670258,1.19315401],[.55118534,.01853166],[.7494612,.12687061],[-.088362,.79828703],[-.046875,.12401959],[.69127155,.76550024],[-.2548491,1.30719501],[.38469827,.52743964],[.2182112,1.03634763],[.58620689,.37063326],[-.2182112,1.1133253],[.14978448,.44761094],[-.0167025,.95651892],[.45635775,.68567154],[.28987068,1.19457952],[.3512931,.29080456],[.82435344,.01995717],[.18480603,.79971254],[.2262931,.1254451],[.65786637,.52886515],[.05980603,.63435308],[.49137931,1.03777314],[-.106681,1.14326107],[.26131465,.4775467],[.734375,.20669932],[.36961206,.60726835],[.56788793,.7156073],[.93588362,.04989293],[-.0086206,.0456164],[-.1751077,.55452438],[.02640086,.397718],[.56627155,.9308597],[.4994612,.12687061],[-.0317887,1.03634763],[.27478448,1.27440822],[.33620689,.37063326],[.10290948,.07555216],[.64278017,.60869386],[.16971982,.87954124],[.4762931,1.11760184],[-.0603448,.31931481],[.41271551,.04846742],[-.2667025,.95651892],[-.2268318,.82822279],[-.0651939,.79971254],[.40786637,.52886515],[-.231681,1.30862052],[-.1901939,.63435308],[.24137931,1.03777314],[.609375,.37205877],[.44288793,.88096676],[.01131465,.4775467],[.484375,.20669932],[-.1551724,.98645469],[.31788793,.7156073],[.21282327,.32074032],[.68588362,.04989293],[.51939655,.55880092],[.08782327,.15538086],[.15463362,.95936995],[.2494612,.12687061],[.28448275,.47897222],[.3512931,1.2829613],[-.0802801,.87954124],[.11799568,.9878802],[.2262931,1.11760184],[.95905172,.05131845],[.59428879,.45188748],[.42780172,.96079546],[-.0037715,.55737541],[-.0452586,1.23164285],[.62931034,.80398908],[.67079741,.12972164],[.19773706,.40056902],[.03125,.90947701],[-.481681,1.30862052],[.70581896,.48182324],[.19288793,.88096676],[.4994612,1.11902735],[-.0371767,.32074032],[.43588362,.04989293],[-.2036637,.8296483],[.26939655,.55880092],[.10290948,1.0677089],[.22790948,1.23306836],[.16433189,.16393394],[.47090517,.40199454],[.94396551,.13114715],[-.1271551,.50748247],[-.0603448,1.31147155],[.41271551,1.04062416],[.54741379,.0798287],[.03448275,.47897222],[.70905172,.05131845],[.06950431,.83107382],[.54256465,.56022643],[-.1287715,.72273486],[-.2952586,1.23164285],[.54579741,.29508109],[.3125,0],[.37931034,.80398908],[.74407327,.40342005],[.21282327,1.31289706],[-.21875,.90947701],[.25431034,.63862962],[-.0522629,.40056902],[.82058189,.08125421],[.14924568,.24376264],[-.0172413,.75267063],[.45581896,.48182324],[.28933189,.99073122],[.65732758,.32501686],[.45096982,.96222097],[-.1470905,1.0677089],[-.2521551,.67284192],[.22090517,.40199454],[-.4186422,1.18174991],[.0544181,.91090252],[.52747844,.64005513],[.48599137,1.31432258],[.42241379,.24518816],[.25592672,.75409614],[.29741379,.0798287],[.5625,.99215674],[.13092672,.58873668],[.72898706,.48324875],[.80549568,.16108291],[.0625,0],[.3275862,.91232803],[-.0371767,1.31289706],[.09752155,.3521016],[.16433189,1.15609068],[-.2672413,.75267063],[.63739224,.88524329],[-.4337284,1.26157861],[.03933189,.99073122],[.40732758,.32501686],[-.2322198,1.10477223],[.24084051,.83392484],[.71390086,.56307746],[.54741379,1.07198544],[.44234913,.67711846],[-.1955818,.91090252],[.17241379,.24518816],[.00592672,.75409614],[.47898706,.48324875],[.3125,.99215674],[-.1190732,.58873668],[-.1605603,1.26300412],[.37392241,.08838177],[.20743534,.59728976],[.68049568,.32644237],[.51400862,.83535036],[.08243534,.4319303],[.55549568,.16108291],[-.0840517,.94083828],[.88200431,.16963599],[.75700431,.00427653],[.28394396,.27512392],[.59051724,.51318452],[-.0856681,1.15609068],[-.3189655,.86100958],[.11260775,1.26442964],[.04903017,.19529522],[.58890086,.72843691],[.35560344,.43335581],[.42241379,1.2373449],[-.0091594,.83392484],[.29741379,1.07198544],[.19234913,.67711846],[.66540948,.40627107],[.02586206,1.18602644],[.49892241,.91517906],[.8669181,.24946469],[.70043103,.75837268],[-.2440732,.75409614],[-.4105603,1.26300412],[.12392241,.08838177],[-.0425646,.59728976],[.43049568,.32644237],[.26400862,.83535036],[-.2090517,1.10619774],[.57058189,1.07341095],[-.3340517,.94083828],[.63200431,.16963599],[.46551724,.67854397],[.50700431,.00427653],[.29903017,1.18745196],[.34051724,.51318452],[.40732758,1.3171736],[.03394396,.27512392],[-.1325431,.7840319],[.23545258,.11831754],[.54202586,.35637813],[53879e-8,.03848883],[.30711206,.27654943],[.78017241,.00570205],[-.0576508,.67711846],[.140625,.78545742],[-.2241379,1.18602644],[.6169181,.24946469],[.81519396,.35780365],[-.0226293,1.02922006],[.45043103,.75837268],[.28394396,1.26728066],[.38200431,.16963599],[-.091056,.44048338],[.21551724,.67854397],[-.2575431,.94939136],[.04903017,1.18745196],[.52209051,.91660457],[.41702586,.52173759],[.8900862,.25089021],[.25053879,1.03064558],[.29202586,.35637813],[-.0145474,.11831754],[.12553879,.86528612],[-.1810344,.62722552],[-.3475215,1.13613351],[.49353448,.19957175],[.32704741,.70847974],[.80010775,.43763235],[.63362068,.94654033],[.05711206,.27654943],[-.109375,.78545742],[.25862068,.11974305],[.09213362,.62865103],[.56519396,.35780365],[-.2726293,1.02922006],[.03394396,1.26728066],[.76670258,.20099727],[.40193965,.6015663],[-.0296336,.19814624],[.16864224,.3064852],[.23545258,1.11047428],[.00538793,.55024784],[-.2009698,1.18745196],[.16702586,.52173759],[.67995689,.12259408],[53879e-8,1.03064558],[.47359913,.75979819],[.30711206,1.26870617],[-.1244612,.86528612],[-.4725215,1.30149296],[.84159482,.09408382],[.20204741,.87383919],[.24353448,.19957175],[.67510775,.60299181],[.07704741,.70847974],[.55010775,.43763235],[-.0894396,1.21738772],[.38362068,.94654033],[.50862068,1.11189979],[.4450431,.04276537],[.27855603,.55167336],[.75161637,.28082597],[.58512931,.78973395],[.00862068,.11974305],[-.1578663,.62865103],[.31519396,.35780365],[-.3243534,1.13755902],[.04364224,.47184465],[.51670258,.20099727],[.35021551,.70990525],[-.0813577,.3064852],[-.0145474,1.11047428],[.18372844,1.21881323],[.7182112,.04419088],[.12015086,.14967881],[.66002155,.68282051],[.49353448,1.1917285],[.42995689,.12259408],[-.2494612,1.03064558],[.26346982,.63150206],[.42510775,.60299181],[.25862068,1.11189979],[-.1729525,.70847974],[-.3394396,1.21738772],[.1950431,.04276537],[.46012931,.95509341],[.02855603,.55167336],[.50161637,.28082597],[-.137931,1.06058134],[.33512931,.78973395],[.16864224,1.29864194],[.23006465,.39486697],[.703125,.12401959],[.53663793,.63292757],[.10506465,.22950752],[.37015086,1.14183556],[.30657327,.07270114],[.26670258,.20099727],[.10021551,.70990525],[-.0662715,1.21881323],[.77478448,.28225148],[.30172413,.55309887],[.60829741,.79115947],[.13523706,1.06200685],[.37823275,.23093303],[.4450431,1.03492211],[.01346982,.63150206],[.21174568,.73984101],[-.1530172,1.14041004],[.68803879,.20384829],[.52155172,.71275627],[.04849137,.98360366],[.14331896,.15110433],[.72306034,.55594989],[.51670258,1.19315401],[-.387931,1.06058134],[-.0813577,1.29864194],[-.0199353,.39486697],[.453125,.12401959],[-.1864224,.90377496],[.28663793,.63292757],[.12015086,1.14183556],[.24515086,1.30719501],[.5932112,.87098817],[.48814655,.47612119],[.05657327,.07270114],[.32165948,.98502917],[-.1099137,.58160912],[.36314655,.31076173],[.56465517,.15395535],[-.1147629,1.06200685],[.55980603,.63435308],[.12823275,.23093303],[.39331896,1.14326107],[.08674568,.90520047],[.76131465,.4775467],[.32974137,.07412665],[.63631465,.31218725],[.16325431,.58303463],[-.0350215,.47469568],[-.2015086,.98360366],[.10506465,1.22166426],[.63954741,.04704191],[.83782327,.15538086],[.47306034,.55594989],[.30657327,1.06485788],[-.0716594,.50320593],[.4682112,1.03634763],[-.1298491,1.14183556],[.60290948,.07555216],[-.2349137,.74696858],[.23814655,.47612119],[-.4014008,1.25587656],[.07165948,.98502917],[.54471982,.71418179],[-.0533405,.81966972],[.37823275,1.22308977],[.43965517,.31931481],[.91271551,.04846742],[.2731681,.82822279],[-.1584051,.42480274],[.31465517,.15395535],[-.3248922,.93371072],[.1481681,.66286334],[.62122844,.39201595],[.74622844,.55737541],[.57974137,1.06628339],[.34967672,.50605695],[.82273706,.23520957],[.14331896,1.14326107],[.07974137,.07412665],[.34482758,.98645469],[-.0867456,.58303463],[-.2532327,1.09194262],[.11476293,.42622825],[.58782327,.15538086],[.4213362,.66428885],[.05657327,1.06485788],[.19127155,.10406241],[.25808189,.9080515],[.73114224,.63720411],[.56465517,1.14611209],[-.1783405,.98502917],[.18965517,.31931481],[.0231681,.82822279],[.49622844,.55737541],[.32974137,1.06628339],[-.1018318,.66286334],[-.2683189,1.17177132],[.69773706,.40056902],[.53125,.90947701],[.09967672,.50605695],[.57273706,.23520957],[.40625,.74411755],[-.0668103,1.01496494],[.30118534,.34925057],[.77424568,.07840319],[.60775862,.58731117],[-.135237,.42622825],[.33782327,.15538086],[-.3017241,.93513623],[.1713362,.66428885],[.06627155,.26942187],[.37284482,.50748247],[.84590517,.23663508],[.00808189,.9080515],[-.2252155,.6129704],[.20635775,1.01639045],[.68265086,.48039773],[.44935344,.18531663],[.51616379,.98930571],[.44773706,.40056902],[.28125,.90947701],[-.1503232,.50605695],[-.1918103,1.18032439],[-.3168103,1.01496494],[.48275862,.75267063],[.05118534,.34925057],[.31627155,1.26157861],[.35775862,.58731117],[-.1153017,.85815856],[.19127155,1.09621915],[.66433189,.82537177],[.52424568,.07840319],[.55926724,.43050479],[.39278017,.93941277],[.12284482,.50748247],[-.0436422,1.01639045],[.01778017,.11261549],[-.1487068,.62152347],[.32435344,.35067608],[.15786637,.85958407],[.79741379,.0798287],[-.2068965,1.2601531],[.63092672,.58873668],[.46443965,1.09764467],[.83243534,.4319303],[.40086206,.02851025],[.234375,.53741823],[.90894396,.10976446],[-.4418103,1.18032439],[.23275862,.75267063],[.06627155,1.26157861],[.53933189,.99073122],[-.0587284,1.09621915],[.67403017,.02993576],[.00269396,.19244419],[.30926724,.43050479],[-.1637931,.70135217],[.14278017,.93941277],[.61584051,.66856539],[.44935344,1.17747337],[-.3302801,1.21026016],[.51077586,.27369841],[.9838362,.00285102],[.34428879,.78260639],[-.2936422,1.01639045],[.07435344,.35067608],[-.0921336,.85958407],[.38092672,.58873668],[.27586206,.1938697],[.109375,.70277769],[.15086206,.02851025],[.58243534,.4319303],[-.015625,.53741823],[.41594827,.94083828],[.78394396,.27512392],[.18588362,.38061185],[.65894396,.10976446],[-.1837284,1.26157861],[-.0490301,.30078315],[.01778017,1.10477223],[.49084051,.83392484],[-.1072198,.93941277],[.26077586,.27369841],[.52586206,1.18602644],[.09428879,.78260639],[.56734913,.511759],[-.0721982,1.29151437],[.40086206,1.02066699],[-.3787715,1.05345378],[.29579741,.62580001],[.76885775,.35495262],[.60237068,.86386061],[.02586206,.1938697],[-.140625,.70277769],[.33243534,.4319303],[-.307112,1.21168567],[.16594827,.94083828],[.06088362,.54597131],[.53394396,.27512392],[.36745689,.7840319],[-.0641163,.38061185],[.40894396,.10976446],[-.2306034,.88951983],[.20096982,1.29293989],[.73545258,.11831754],[.13739224,.22380547],[.44396551,.46186606],[.51077586,1.26585515],[.27747844,.97077405],[.20905172,.38203736],[.27586206,1.18602644],[-.1557112,.78260639],[-.3221982,1.29151437],[.04579741,.62580001],[.51885775,.35495262],[-.1206896,1.13470799],[.35237068,.86386061],[.72036637,.19814624],[.55387931,.70705422],[.12230603,.30363417],[.59536637,.03278678],[.38739224,1.21596221],[.32381465,.14682779],[-.3556034,1.05487929],[.11745689,.7840319],[.42403017,1.0220925],[-.0490301,1.29293989],[.79202586,.35637813],[.31896551,.62722552],[.62553879,.86528612],[.19396551,.46186606],[.15247844,1.13613351],[-.4455818,1.24162143],[.02747844,.97077405],[.08890086,.06699909],[.86853448,.0342123],[.39547413,.30505968],[.70204741,.54312028],[.22898706,.81396767],[-.1357758,1.2145367],[-.0409482,.38203736],[.5387931,.78688293],[.16056034,.22523098],[-.0059267,.73413896],[-.3706896,1.13470799],[.66864224,.3064852],[.30387931,.70705422],[.13739224,1.21596221],[-.294181,.81254215],[.61045258,.94511482],[.07381465,.14682779],[.33890086,1.05915583],[-.0926724,.65573577],[.38038793,.38488839],[-.2591594,1.16464376],[-.2990301,1.29293989],[.58189655,.228082],[.37553879,.86528612],[.41540948,.73698999],[-.0975215,1.13613351],[.57704741,.70847974],[.14547413,.30505968],[.41056034,1.21738772],[-.0210129,.81396767],[-.1260775,.41910069],[.34698275,.1482533],[.65355603,.3863139],[.18049568,.65716129],[.48706896,.89522188],[.12230603,1.29579091],[.85506465,.22950752],[.25700431,.33499545],[-.2559267,.73413896],[.41864224,.3064852],[-.1126077,1.21596221],[.25538793,.55024784],[.02209051,.25516674],[.08890086,1.05915583],[.5619612,.78830844],[.39547413,1.29721642],[-.0360991,.89379637],[-.1411637,.49892939],[.33189655,.228082],[-.3076508,1.00783737],[.16540948,.73698999],[-.0010775,1.24589797],[.63846982,.4661426],[.53340517,.07127562],[.3669181,.58018361],[.83997844,.30933622],[.16056034,1.21738772],[-.2710129,.81396767],[.67349137,.8182442],[.09698275,.1482533],[.36206896,1.06058134],[.40355603,.3863139],[-.0695043,.65716129],[.23706896,.89522188],[-.2359913,1.16606927],[.13200431,.5003549],[.60506465,.22950752],[.43857758,.7384155],[.00700431,.33499545],[.07381465,1.13898453],[-.1594827,.84390343],[.27209051,1.24732348],[.80657327,.07270114],[.20851293,.17818906],[.5150862,.41624966],[.03717672,1.16749478],[-.0264008,.09836036],[.51346982,.63150206],[.71174568,.73984101],[.34698275,1.14041004],[-.0845905,.73698999],[-.2510775,1.24589797],[.28340517,.07127562],[.54849137,.98360366],[.1169181,.58018361],[.58997844,.30933622],[-.0495689,1.08909159],[.42349137,.8182442],[.79148706,.15252984],[.625,.66143782],[.45851293,1.17034581],[.41864224,1.29864194],[-.1179956,.5003549],[.18857758,.7384155],[-.2844827,1.00926289],[.02209051,1.24732348],[.08351293,.34354852],[.55657327,.07270114],[-.0829741,.85245651],[-.041487,.17818906],[.3900862,.58160912],[-.2079741,.68709705],[.2650862,.41624966],[-.3744612,1.19600503],[.22359913,1.0905171],[.86314655,.31076173],[.16002155,.02138268],[.46659482,.25944328],[.30010775,.76835126],[.23168103,.17961458],[.29849137,.98360366],[.06519396,.68852256],[-.2995689,1.08909159],[.43318965,.0228082],[.73976293,.26086879],[.54148706,.15252984],[.375,.66143782],[-.0980603,.93228521],[.20851293,1.17034581],[.57650862,.50463144],[.41002155,1.01353943],[-.2279094,1.24732348],[.1400862,.58160912],[-.0264008,1.0905171],[.44665948,.81966972],[.34159482,.42480274],[.81465517,.15395535],[.17510775,.93371072],[.21659482,.25944328],[.6481681,.66286334],[.05010775,.76835126],[.48168103,1.17177132],[-.0549568,.37348429],[.41810344,.1026369],[.25161637,.61154488],[.72467672,.3406975],[.55818965,.84960548],[.92618534,.18389112],[-.0183189,.17961458],[.18318965,.0228082],[.48976293,.26086879],[.55657327,1.06485788],[-.3480603,.93228521],[.01670258,.53171618],[-.041487,1.17034581],[.69127155,.10406241],[.32650862,.50463144],[.16002155,1.01353943],[.63308189,.74269204],[.46659482,1.25160002],[-.3130387,1.28438681],[.09159482,.42480274],[-.0748922,.93371072],[.3981681,.66286334],[.23168103,1.17177132],[-.1998922,.76835126],[.12661637,.77690434],[.16810344,.1026369],[.59967672,.50605695],[.00161637,.61154488],[.47467672,.3406975],[-.1648706,1.12045287],[.43318965,1.01496494],[.80118534,.34925057],[.203125,.4547385],[.67618534,.18389112],[.50969827,.6927991],[.3432112,1.20170708],[.87769396,.02708473],[.44127155,.10406241],[-.0317887,.3749098],[.27478448,.6129704],[-.1982758,.88381778],[-.0899784,1.01353943],[.04471982,.05274396],[.11153017,.85673304],[.58459051,.58588566],[.41810344,1.09479364],[.35452586,.02565922],[.61961206,.93798726],[-.1233836,.77690434],[-.2898706,1.28581232],[.18318965,1.01496494],[.48976293,1.25302554],[-.4148706,1.12045287],[.55118534,.34925057],[-.088362,1.12900594],[-.046875,.4547385],[.42618534,.18389112],[-.213362,.96364649],[.25969827,.6927991],[.38469827,.85815856],[.0932112,1.20170708],[.15463362,.29793212],[.62769396,.02708473],[.46120689,.53599272],[.29471982,1.0449007],[.02478448,.6129704],[-.0802801,.21810342],[.2262931,.45616401],[.69935344,.18531663],[.05980603,.965072],[-.2467672,.7270114],[.42780172,.29935763],[.90086206,.02851025],[.734375,.53741823],[.30280172,.13399818],[.36961206,.93798726],[-.0619612,.5345672],[.13954741,.37776082],[.61260775,.10691344],[.40463362,1.29008886],[-.338362,1.12900594],[.13469827,.85815856],[.44127155,1.09621915],[-.1567887,1.20170708],[.80926724,.43050479],[-.0953663,.29793212],[.64278017,.93941277],[-.2618534,.8068401],[.21120689,.53599272],[.51778017,.77405331],[-.4283405,1.31574809],[.33620689,.70135217],[.04471982,1.0449007],[.16971982,1.21026016],[.88577586,.10833895],[-.0603448,.65003372],[.71928879,.61724693],[.41271551,.37918634],[.55280172,1.12615492],[.24622844,.88809432],[.61422413,.22237995],[-.0237068,.45616401],[.48922413,.0570205],[-.1901939,.965072],[.17780172,.29935763],[.65086206,.02851025],[.01131465,.80826562],[.05280172,.13399818],[.484375,.53741823],[.31788793,1.04632621],[.68588362,.38061185],[.08782327,.48609978],[.15463362,1.29008886],[-.2769396,.88666881],[.76239224,.05844601],[.39762931,.45901504],[-.2419181,1.23877041],[-.1470905,.40627107],[.43265086,.81111664],[-.0802801,1.21026016],[-.2052801,1.0449007],[.59428879,.78260639],[.16271551,.37918634],[.42780172,1.29151437],[.46928879,.61724693],[-.0037715,.88809432],[.30280172,1.12615492],[.36422413,.22237995],[.67079741,.46044055],[.23922413,.0570205],[.50431034,.96934854],[.19773706,.73128794],[.87230603,.30363417],[-.0323275,.1710615],[.74730603,.13827471],[-.2386853,.80826562],[-.4051724,1.3171736],[.27424568,.4091221],[.43588362,.38061185],[-.2036637,1.16036722],[-.1621767,.48609978],[.26939655,.88951983],[.74245689,.61867245],[.47090517,.73271345],[.03933189,.3292934],[.51239224,.05844601],[.57920258,.86243509],[-.0188577,.96792302],[.34913793,.30220866],[.11584051,.00712756],[.18265086,.81111664],[.6557112,.54026926],[.01616379,1.32002463],[.17780172,1.29151437],[.3125,.33071891],[.11422413,.22237995],[-.0522629,.73128794],[.25431034,.96934854],[-.21875,1.24019592],[-.1772629,.56592848],[.62230603,.30363417],[.14924568,.57448156],[.45581896,.81254215],[-.0172413,1.08338954],[.49730603,.13827471],[-.1422413,.91803008],[.28933189,1.32145014],[.02424568,.4091221],[.22575431,.25231572],[.53232758,.49037632],[.01939655,.88951983],[.69396551,.46186606],[.0544181,1.24162143],[.52747844,.97077405],[-.0091594,.17248701],[-.1756465,.681395],[.29741379,.41054761],[.13092672,.9194556],[.36422413,1.2145367],[-.2338362,1.32002463],[.49892241,.25374123],[.60721982,.38346287],[.80549568,.49180183],[-.0323275,1.16321824],[.44073275,.89237086],[.64224137,.73556448],[.47575431,1.24447246],[-.46875,1.24019592],[-.1007543,.57448156],[.20581896,.81254215],[-.2672413,1.08338954],[.03933189,1.32145014],[.51239224,1.05060275],[.57381465,.14682779],[.40732758,.65573577],[-.0242456,.25231572],[.24084051,1.16464376],[-.1907327,.7612237],[.28232758,.49037632],[-.3572198,1.27013169],[.11584051,.9992843],[.17726293,.09550934],[.01077586,.60441732],[.4838362,.33356993],[.31734913,.84247792],[.95689655,.06272255],[.04741379,.41054761],[-.1190732,.9194556],[.24892241,.25374123],[.51400862,1.16606927],[.08243534,.76264921],[.55549568,.49180183],[-.2823275,1.16321824],[.45043103,.09693485],[.75700431,.33499545],[.39224137,.73556448],[.15894396,.44048338],[.22575431,1.24447246],[.83351293,.01282961],[.15732758,.65573577],[-.0091594,1.16464376],[-.1341594,.9992843],[.83189655,.228082],[.19234913,1.00783737],[.2338362,.33356993],[.66540948,.73698999],[-.4057112,1.1133253],[.06734913,.84247792],[.54040948,.57163053],[.37392241,1.08053852],[.49892241,1.24589797],[.43534482,.17676355],[.26885775,.68567154],[.7419181,.41482415],[.57543103,.92373213],[-.0010775,.25374123],[-.1675646,.76264921],[-.3340517,1.2715572],[.20043103,.09693485],[.50700431,.33499545],[.03394396,.60584283],[.34051724,.84390343],[-.1325431,1.11475082],[-.0242456,1.24447246],[.70851293,.17818906],[.54202586,.68709705],[.58351293,.01282961],[.65032327,.81681869],[.11045258,.28367699],[-.0576508,1.00783737],[.24892241,1.24589797],[.6169181,.58018361],[.18534482,.17676355],[.38362068,.28510251],[.01885775,.68567154],[.4919181,.41482415],[-.1476293,1.19457952],[.32543103,.92373213],[.45043103,1.08909159],[.22036637,.52886515],[.69342672,.25801777],[.52693965,.76692575],[.36045258,1.27583374],[.89493534,.10121139],[-.216056,.60584283],[.09051724,.84390343],[-.3825431,1.11475082],[.45851293,.17818906],[-.0145474,.44903645],[.29202586,.68709705],[.7650862,.41624966],[.12553879,1.19600503],[.59859913,.92515765],[-.1810344,.95794444],[.66002155,.02138268],[.49353448,.53029067],[.0619612,.12687061],[.36853448,.36493121],[.43534482,1.16892029],[-.1045258,.6357786],[.20043103,1.08909159],[-.3976293,1.19457952],[.13685344,.01995717],[.33512931,.12829613],[-.0296336,.52886515],[-.1961206,1.03777314],[.27693965,.76692575],[.58351293,1.00498635],[.11045258,1.27583374],[.64493534,.10121139],[.00538793,.88096676],[.47844827,.61011937],[.3119612,1.11902735],[.24838362,.04989293],[.04202586,.68709705],[-.1244612,1.19600503],[.41002155,.02138268],[.24353448,.53029067],[.71659482,.25944328],[.07704741,1.03919865],[.11853448,.36493121],[.55010775,.76835126],[.38362068,1.27725925],[-.2295258,.80113805],[.4450431,.37348429],[.91810344,.1026369],[.75161637,.61154488],[.3200431,.20812483],[-.1530172,.47897222],[.15355603,.71703281],[.52155172,.05131845],[.828125,.28937904],[.08512931,.12829613],[.15193965,.93228521],[-.0813577,.63720411],[-.1395474,1.27583374],[.5932112,.20955034],[-.244612,.88096676],[.22844827,.61011937],[.53502155,.84817997],[.0619612,1.11902735],[.90301724,.1824656],[-.0016163,.04989293],[.73653017,.69137359],[-.1681034,.55880092],[.42995689,.45331299],[.26346982,.96222097],[-.0064655,.53029067],[.03340517,.40199454],[-.1729525,1.03919865],[.50646551,.13114715],[.13362068,1.27725925],[.66810344,.1026369],[.02855603,.88239227],[.0700431,.20812483],[.50161637,.61154488],[-.0964439,.71703281],[.33512931,1.12045287],[-.262931,1.2259408],[.703125,.4547385],[.27155172,.05131845],[.53663793,.96364649],[.10506465,.56022643],[.578125,.28937904],[.41163793,.79828703],[.77963362,.13257266],[.24838362,1.04204968],[-.1298491,.48039773],[.3432112,.20955034],[-.2963362,.98930571],[.54471982,.05274396],[.17995689,.45331299],[-.0533405,.15823189],[.01346982,.96222097],[.37823275,.56165194],[.3200431,1.20028157],[.85452586,.02565922],[.68803879,.5345672],[.25646551,.13114715],[.52155172,1.04347519],[.08997844,.64005513],[.04849137,1.31432258],[.76454741,.21240137],[.29148706,.48324875],[.08512931,1.12045287],[.96605603,.05559498],[.02155172,.05131845],[-.1864224,1.23449387],[-.1449353,.56022643],[.28663793,.96364649],[-.3114224,1.06913441],[.48814655,.8068401],[.05657327,.40342005],[.52963362,.13257266],[-.1099137,.91232803],[-.0684267,.23806059],[.36314655,.64148065],[.19665948,1.15038863],[.83620689,.37063326],[.56465517,.48467427],[.13308189,.08125421],[.67295258,.61439591],[.50646551,1.12330389],[.12823275,.56165194],[.80280172,.13399818],[.32974137,.40484556],[.63631465,.64290616],[-.0350215,.80541459],[.27155172,1.04347519],[-.2015086,1.31432258],[-.3265086,1.14896312],[.40625,.08267972],[.47306034,.88666881],[.04148706,.48324875],[-.125,.99215674],[.34806034,.72130935],[.71605603,.05559498],[.24299568,.32644237],[.07650862,.83535036],[.54956896,.56450297],[.07165948,1.31574809],[.11314655,.64148065],[.54471982,1.0449007],[-.0533405,1.15038863],[.00808189,.24661367],[-.1584051,.75552165],[.31465517,.48467427],[.1481681,.99358225],[.78771551,.21382688],[.62122844,.72273486],[.51616379,.32786788],[-.0818965,.43335581],[.39116379,.16250843],[.45797413,.96649751],[.59267241,.00570205],[-.0867456,.91375355],[-.4515086,1.31432258],[.58782327,.48609978],[.15625,.08267972],[.22306034,.88666881],[.4213362,.99500776],[-.375,.99215674],[-.0684267,1.23021733],[-.0070043,.32644237],[.25808189,1.23877041],[-.1734913,.83535036],[.29956896,.56450297],[.13308189,1.07341095],[.60614224,.80256357],[.50107758,.40769659],[.33459051,.91660457],[.06465517,.48467427],[-.1018318,.99358225],[-.2068965,.59871527],[.26616379,.32786788],[.09967672,.83677587],[.14116379,.16250843],[.40625,1.07483647],[-.0253232,.67141641],[.73922413,.0570205],[.57273706,.56592848],[.46767241,.1710615],[.77424568,.4091221],[.34267241,.00570205],[.60775862,.91803008],[.17618534,.51461003],[.64924568,.24376264],[.85075431,.08695626],[.1713362,.99500776],[-.0587284,.43478133],[.00808189,1.23877041],[-.2252155,.94368931],[.61584051,.00712756],[.68265086,.81111664],[.25107758,.40769659],[.44935344,.51603554],[-.3884698,1.18745196],[.08459051,.91660457],[.39116379,1.15466517],[.28609913,.75979819],[.75915948,.4889508],[.59267241,.99785879],[.01616379,.32786788],[-.1503232,.83677587],[.15625,1.07483647],[.21767241,.1710615],[.05118534,.67996949],[.09267241,.00570205],[.35775862,.91803008],[-.0738146,.51461003],[-.1153017,1.18887747],[-.2403017,1.02351801],[.52424568,.4091221],[.72575431,.25231572],[.55926724,.7612237],[.60075431,.08695626],[.12769396,.35780365],[.43426724,.59586425],[-.0387931,.86671163],[.26778017,1.10477223],[.63577586,.43905786],[.36584051,.00712756],[-.2737068,.78688293],[.19935344,.51603554],[.26616379,1.32002463],[.40086206,.35922916],[.87392241,.08838177],[.03609913,.75979819],[-.1303879,1.26870617],[.34267241,.99785879],[.7106681,.33214442],[.47737068,.03706332],[.54418103,.84105241],[-.1988146,.67996949],[.10775862,.91803008],[-.3653017,1.18887747],[.47575431,.25231572],[.78232758,.49037632],[.30926724,.7612237],[.14278017,1.27013169],[.18426724,.59586425],[.61584051,.9992843],[-.122306,.35780365],[-.2887931,.86671163],[-.1637931,1.03207109],[.51077586,.60441732],[.07920258,.20099727],[.38577586,.43905786],[.8588362,.16821048],[.21928879,.94796585],[.69234913,.67711846],[-.0872844,.70990525],[.58728448,.28225148],[.15086206,.35922916],[.21767241,1.16321824],[-.015625,.86813714],[-.3803879,1.26870617],[.35237068,.20242278],[.65894396,.44048338],[-.1788793,1.11189979],[.29418103,.84105241],[.49245689,.94939136],[.06411637,.28082597],[.32920258,1.19315401],[.05926724,.7612237],[-.1072198,1.27013169],[.42726293,.09550934],[.26077586,.60441732],[.7338362,.33356993],[.09428879,1.1133253],[.13577586,.43905786],[.56734913,.84247792],[-.0307112,.94796585],[.0307112,.04419088],[.33728448,.28225148],[.81034482,.0114041],[.17079741,.79115947],[.64385775,.52031208],[.47737068,1.02922006],[-.1357758,.55309887],[.5387931,.1254451],[.84536637,.3635057],[-.0991379,.35922916],[-.265625,.86813714],[.10237068,.20242278],[-.0641163,.71133076],[.40894396,.44048338],[-.2306034,1.22023875],[.30387931,.0456164],[.61045258,.28367699],[.24568965,.68424602],[.01239224,.38916492],[.07920258,1.19315401],[.44396551,.79258498],[-.150862,.63292757],[.52370689,.2052738],[-.1557112,1.1133253],[.68534482,.17676355],[.04579741,.95651892],[.08728448,.28225148],[.51885775,.68567154],[-.0792025,.79115947],[.35237068,1.19457952],[-.2456896,1.30006745],[.22737068,1.02922006],[.72036637,.52886515],[.2887931,.1254451],[.55387931,1.03777314],[.12230603,.63435308],[.59536637,.3635057],[-.044181,1.14326107],[.42887931,.87241368],[.796875,.20669932],[.63038793,.7156073],[-.1126077,.55452438],[.36045258,.28367699],[-.2790948,1.06343236],[.19396551,.79258498],[.02747844,1.30149296],[.5619612,.12687061],[.39547413,.6357786],[-.0360991,.23235854],[-.2025862,.74126653],[.33728448,1.27440822],[.27370689,.2052738],[.5387931,1.11760184],[.10721982,.71418179],[.47198275,.31361276],[.78178879,.28652802],[.10237068,1.19457952],[.14224137,1.06628339],[.23706896,.23378405],[.30387931,1.03777314],[-.1276939,.63435308],[-.294181,1.14326107],[.17887931,.87241368],[.07381465,.4775467],[.546875,.20669932],[-.0926724,.98645469],[-.0511853,.31218725],[.38038793,.7156073],[.21390086,1.22451528],[.74838362,.04989293],[.58189655,.55880092],[.15032327,.15538086],[-.0161637,.66428885],[-.0560344,.79258498],[.61853448,.36493121],[.65840517,.23663508],[.45204741,.87383919],[.14547413,.6357786],[-.0210129,1.14468658],[.8200431,.20812483],[.65355603,.71703281],[.22198275,.31361276],[.48706896,1.2259408],[.2887931,1.11760184],[-.3092672,1.22308977],[.42349137,.15680638],[.73006465,.39486697],[.05872844,.55737541],[.36530172,.795436],[-.1077586,1.06628339],[.56681034,.63862962],[.40032327,1.14753761],[-.1761853,.4775467],[.5619612,1.11902735],[-.3426724,.98645469],[.13038793,.7156073],[-.0360991,1.22451528],[.49838362,.04989293],[-.1411637,.8296483],[.33189655,.55880092],[.16540948,1.0677089],[.20689655,.39344146],[.80495689,.28795353],[-.4326508,1.17319683],[.63846982,.79686152],[.47198275,1.3057695],[-.0646551,.50748247],[.40840517,.23663508],[.2419181,.74554306],[-.2710129,1.14468658],[.60991379,.0798287],[.40355603,.71703281],[-.0280172,.31361276],[.23706896,1.2259408],[.17349137,.15680638],[.43857758,1.06913441],[.00700431,.66571436],[-.1594827,1.17462234],[-.3577586,1.06628339],[.375,0],[.68157327,.23806059],[.31681034,.63862962],[.5150862,.74696858],[.15032327,1.14753761],[.35183189,.99073122],[.08189655,.55880092],[-.0845905,1.0677089],[.22198275,1.3057695],[.28340517,.40199454],[.75646551,.13114715],[.1169181,.91090252],[.15840517,.23663508],[.58997844,.64005513],[-.0080818,.74554306],[.42349137,1.14896312],[-.1745689,1.25445105],[.79148706,.48324875],[-.1131465,.35067608],[.35991379,.0798287],[.19342672,.58873668],[.66648706,.3178893],[.5,.82679728],[-.012931,1.2259408],[.02693965,1.09764467],[.86799568,.16108291],[.70150862,.6699909],[-.2429956,.66571436],[.66163793,.79828703],[-.4094827,1.17462234],[.125,0],[.43157327,.23806059],[-.041487,.50890798],[-.2079741,1.01781596],[.2650862,.74696858],[.63308189,.08125421],[.46659482,.59016219],[.03502155,.18674214],[.10183189,.99073122],[-.1314655,.69565012],[.40840517,1.22879182],[.77640086,.56307746],[.54310344,.26799636],[-.1330818,.91090252],[.17349137,1.14896312],[-.4245689,1.25445105],[.54148706,.48324875],[.10991379,.0798287],[.375,.99215674],[-.0565732,.58873668],[-.0980603,1.26300412],[.25,.82679728],[-.2230603,1.09764467],[.57650862,.83535036],[.14493534,.4319303],[.61799568,.16108291],[.45150862,.6699909],[-.0215517,.94083828],[.28502155,1.17889888],[.81950431,.00427653],[.65301724,.51318452],[.0150862,.74696858],[-.0899784,.3521016],[.38308189,.08125421],[-.2564655,.86100958],[.21659482,.59016219],[.05010775,1.09907018],[.68965517,.31931481],[.11153017,.19529522],[.41810344,.43335581],[.89116379,.16250843],[.72467672,.67141641],[-.1799568,.53884374],[.29310344,.26799636],[.35991379,1.07198544],[.49461206,.11118997],[.125,.99215674],[-.3480603,1.26300412],[.25969827,.03136127],[.32650862,.83535036],[-.1050646,.4319303],[.20150862,.6699909],[-.2715517,.94083828],[.03502155,1.17889888],[.56950431,.00427653],[.87607758,.24233713],[.40301724,.51318452],[.23653017,1.0220925],[.70959051,.75124511],[-.0700431,.7840319],[.60452586,.35637813],[-.0334051,.59016219],[-.1998922,1.09907018],[.16810344,.43335581],[.64116379,.16250843],[.00161637,.9422638],[.47467672,.67141641],[.30818965,1.18032439],[.36961206,.27654943],[.84267241,.00570205],[.67618534,.51461003],[.24461206,.11118997],[.31142241,.91517906],[.078125,.62009796],[.50969827,1.02351801],[.75269396,.19244419],[.58620689,.70135217],[.00969827,.03136127],[.75107758,.40769659],[.11153017,1.18745196],[.15301724,.51318452],[.58459051,.91660457],[-.0134698,1.0220925],[-.4865301,1.29293989],[.29310344,1.2601531],[.35452586,.35637813],[.8275862,.08553075],[.18803879,.86528612],[.66109913,.59443873],[.49461206,1.10334672],[-.0420258,.30505968],[-.2483836,.9422638],[.11961206,.27654943],[-.046875,.78545742],[-.0053879,.11118997],[-.213362,1.2943654],[-.171875,.62009796],[.42618534,.51461003],[.25969827,1.02351801],[.32112068,.11974305],[.15463362,.62865103],[.62769396,.35780365],[.46120689,.86671163],[.02963362,.46329158],[.50269396,.19244419],[-.1368534,.97219956],[.70420258,.03563781],[.33943965,.43620684],[.53771551,.54454579],[-.1384698,1.18745196],[-.0037715,.22665649],[.53609913,.75979819],[.30280172,.46471709],[.36961206,1.26870617],[-.0619612,.86528612],[.24461206,1.10334672],[.97737068,.03706332],[.13954741,.70847974],[.18103448,.0342123],[-.0269396,1.21738772],[.61260775,.43763235],[.44612068,.94654033],[.81411637,.28082597],[.64762931,.78973395],[-.296875,.78545742],[-.463362,1.2943654],[.00969827,1.02351801],[-.0953663,.62865103],[.37769396,.35780365],[.68426724,.59586425],[-.2618534,1.13755902],[.51778017,1.10477223],[.21120689,.86671163],[.57920258,.20099727],[.41271551,.70990525],[-.0188577,.3064852],[.45420258,.03563781],[-.1853448,.81539318],[.28771551,.54454579],[.12122844,1.05345378],[.18265086,.14967881],[.48922413,.38773941],[.05280172,.46471709],[.11961206,1.26870617],[.25431034,.30791071],[.72737068,.03706332],[-.1104525,.70847974],[-.2769396,1.21738772],[.19612068,.94654033],[.56411637,.28082597],[.39762931,.78973395],[-.0339439,.3863139],[.23114224,1.29864194],[.16756465,.22950752],[.00107758,.7384155],[.67564655,.31076173],[.16271551,.70990525],[.46928879,.94796585],[.03771551,.54454579],[-.0037715,1.21881323],[.83728448,.28225148],[.67079741,.79115947],[.71228448,.11689202],[.50431034,1.30006745],[.54579741,.62580001],[-.2338362,.6585868],[-.2920258,1.29721642],[.23922413,.38773941],[.07273706,.8966474],[.44073275,.23093303],[.74730603,.46899363],[.31573275,.06557357],[.3825431,.86956266],[.58081896,.97790161],[-.1621767,.81681869],[.03933189,.66001231],[.51239224,.38916492],[-.325431,1.06058134],[.14762931,.78973395],[-.0188577,1.29864194],[.34590517,.89807291],[.71390086,.23235854],[.82219827,.36208019],[-.0824353,.22950752],[.18265086,1.14183556],[-.2489224,.7384155],[.22413793,.46756811],[-.4154094,1.24732348],[.6557112,.87098817],[-.0474137,.58160912],[.42564655,.31076173],[.25915948,.81966972],[.89870689,.03991435],[-.2537715,1.21881323],[.42079741,.79115947],[.25431034,1.30006745],[-.1772629,.8966474],[.19073275,.23093303],[.45581896,1.14326107],[.49730603,.46899363],[.06573275,.06557357],[-.1422413,1.248749],[.33081896,.97790161],[.02424568,.73984101],[.39224137,.07412665],[.69881465,.31218725],[.53232758,.82109523],[.10075431,.41767518],[.16756465,1.22166426],[.26239224,.38916492],[-.3771551,1.16892029],[.29741379,.74126653],[.77047413,.47041914],[-.0673491,1.14183556],[.06734913,.18104009],[.60721982,.71418179],[.17564655,.31076173],[.44073275,1.22308977],[.00915948,.81966972],[.37715517,.15395535],[.2106681,.66286334],[.68372844,.39201595],[.00431034,1.30006745],[.04418103,1.17177132],[.51724137,.90092393],[.88523706,.23520957],[-.2257543,.73984101],[.08081896,.97790161],[-.3922413,1.248749],[.14224137,.07412665],[.44881465,.31218725],[-.0242456,.58303463],[.28232758,.82109523],[-.1907327,1.09194262],[-.1492456,.41767518],[-.3157327,.92658316],[.75538793,.55024784],[.65032327,.15538086],[.17726293,.42622825],[.4838362,.66428885],[.05226293,.26086879],[-.1142241,.76977678],[.3588362,.49892939],[.42564655,1.30291847],[.56034482,.34212301],[-.1190732,1.25017451],[.55549568,.82252074],[.19073275,1.22308977],[.01885775,.02423371],[.32543103,.26229431],[.39224137,1.06628339],[-.0393318,.66286334],[-.2058189,1.17177132],[.26724137,.90092393],[.63523706,.23520957],[.46875,.74411755],[-.0043103,1.01496494],[.30226293,1.25302554],[.67025862,.58731117],[.03232758,.82109523],[-.072737,.42622825],[.40032327,.15538086],[-.2392241,.93513623],[.2338362,.66428885],[.06734913,1.17319683],[.1088362,.49892939],[.70689655,.39344146],[.54040948,.90234945],[.43534482,.50748247],[.00377155,.10406241],[.90840517,.23663508],[-.1627155,.6129704],[.31034482,.34212301],[.14385775,.85103099],[.78340517,.07127562],[.51185344,.18531663],[.81842672,.42337723],[.07543103,.26229431],[-.091056,.77120229],[.27693965,.10548792],[.58351293,.34354852],[.21875,.74411755],[-.2543103,1.01496494],[.05226293,1.25302554],[.42025862,.58731117],[.25377155,1.09621915],[-.1826508,1.17319683],[.18534482,.50748247],[-.4542025,1.28723784],[.06034482,.34212301],[.01885775,1.01639045],[-.1061422,.85103099],[.4919181,.74554306],[.32543103,1.25445105],[.85991379,.0798287],[.22036637,.85958407],[.26185344,.18531663],[.69342672,.58873668],[.09536637,.69422461],[.56842672,.42337723],[-.0711206,1.2031326],[.40193965,.93228521],[.52693965,1.09764467],[.46336206,.02851025],[.76993534,.26657084],[.60344827,.77547883],[.02693965,.10548792],[-.1395474,.61439591],[-.3060344,1.12330389],[.53502155,.18674214],[.0619612,.45758953],[.36853448,.69565012],[.00377155,1.09621915],[.73653017,.02993576],[.84482758,.1596574],[.20528017,.93941277],[.67834051,.66856539],[.51185344,1.17747337],[-.2311422,1.01639045],[.07543103,1.25445105],[.13685344,.35067608],[-.0296336,.85958407],[.44342672,.58873668],[.27693965,1.09764467],[-.1546336,.69422461],[-.3211206,1.2031326],[.64493534,.4319303],[.21336206,.02851025],[.47844827,.94083828],[.046875,.53741823],[.51993534,.26657084],[-.119612,1.04632621],[.35344827,.77547883],[.1869612,1.28438681],[.24838362,.38061185],[.72144396,.10976446],[.55495689,.61867245],[.28502155,.18674214],[.11853448,.69565012],[-.3545258,.96649751],[.48653017,.02993576],[.01346982,.30078315],[.3200431,.53884374],[.79310344,.26799636],[-.0447198,.93941277],[.26185344,1.17747337],[.62984913,.511759],[.39655172,.2166779],[.46336206,1.02066699],[.23329741,.46044055],[-.2796336,.85958407],[.90786637,.03278678],[.39493534,.4319303],[-.244612,1.21168567],[-.203125,.53741823],[.53502155,1.17889888],[-.369612,1.04632621],[.10344827,.77547883],[.22844827,.94083828],[-.0630387,1.28438681],[.42995689,.7840319],[-.0016163,.38061185],[.47144396,.10976446],[.77801724,.34782506],[-.1681034,.88951983],[.61153017,.85673304],[.30495689,.61867245],[.13846982,1.12758043],[.50646551,.46186606],[.07489224,.05844601],[.23653017,.02993576],[.0700431,.53884374],[-.0964439,1.04775173],[.27155172,.38203736],[.74461206,.11118997],[.10506465,.89094534],[.14655172,.2166779],[.21336206,1.02066699],[.578125,.62009796],[.41163793,1.12900594],[.77963362,.46329158],[.34806034,.05987152],[-.0167025,.46044055],[-.1831896,.96934854],[.65786637,.03278678],[.49137931,.54169477],[-.0533405,.4889508],[.48653017,1.0220925],[.01346982,1.29293989],[-.1115301,1.12758043],[.62122844,.06129704],[-.2165948,.73271345],[.25646551,.46186606],[.56303879,.69992666],[-.3830818,1.24162143],[.39655172,1.20883465],[.08997844,.97077405],[.93103448,.0342123],[.45797413,.30505968],[.76454741,.54312028],[-.1400862,.41054761],[.59806034,1.05202826],[-.3464439,1.04775173],[.33297413,.13970023],[-.1449353,.89094534],[.328125,.62009796],[.16163793,1.12900594],[.05657327,.73413896],[.09806034,.05987152],[.52963362,.46329158],[-.0684267,.56877951],[.36314655,.97219956],[.73114224,.3064852],[.13308189,.41197312],[.60614224,.14112574],[-.231681,.81254215],[.24137931,.54169477],[-.3981681,1.32145014],[.07489224,1.05060275],[.43965517,.65003372],[.91594827,.114041],[.27640086,.89379637],[.7494612,.62294898],[.37122844,.06129704],[-.1600215,.97077405],[.14655172,1.20883465],[.20797413,.30505968],[.47306034,1.21738772],[.51454741,.54312028],[.04148706,.81396767],[.34806034,1.05202826],[-.0835129,.64860821],[.71605603,.3863139],[.54956896,.89522188],[.59105603,.22095444],[.11799568,.49180183],[.79256465,.06414806],[-.3599137,1.24304695],[.11314655,.97219956],[.31465517,.81539318],[-.1169181,.41197312],[.35614224,.14112574],[-.2834051,.92088111],[.78771551,.54454579],[.08459051,.25516674],[.39116379,.49322734],[.86422413,.22237995],[.02640086,.89379637],[.33297413,1.13185697],[.70096982,.4661426],[.06142241,1.24589797],[.53448275,.97505059],[-.2085129,.81396767],[.09806034,1.05202826],[.46605603,.3863139],[.66433189,.49465285],[.29956896,.89522188],[-.1734913,1.16606927],[-.1320043,.49180183],[.17456896,.72986243],[-.2984913,1.00070981],[-.0070043,.65716129],[.50107758,.7384155],[.06950431,.33499545],[.54256465,.06414806],[-.0969827,.84390343],[.37607758,.57305604],[.84913793,.30220866],[.27101293,.17818906],[.5775862,.41624966],[.37122844,1.05345378],[.57273706,.8966474],[.14116379,.49322734],[-.0253232,1.00213532],[.03609913,.09836036],[.34267241,.33642096],[.81573275,.06557357],[.64924568,.57448156],[-.1885775,1.24589797],[.28448275,.97505059],[.41918103,.01425512],[.48599137,.8182442],[-.4234913,1.16606927],[.41756465,.22950752],[.25107758,.7384155],[.08459051,1.24732348],[.12607758,.57305604],[.55765086,.9764761],[-.0404094,1.08196403],[.02101293,.17818906],[.28609913,1.0905171],[-.1454741,.68709705],[.3275862,.41624966],[.16109913,.92515765],[.80064655,.14540228],[.63415948,.65431026],[.52909482,.25944328],[-.2753232,1.00213532],[.09267241,.33642096],[-.0738146,.84532894],[.39924568,.57448156],[.29418103,.17961458],[.60075431,.41767518],[.16918103,.01425512],[.43426724,.92658316],[.12769396,.68852256],[.00269396,.5231631],[.80226293,.26086879],[.67726293,.09550934],[-.1654094,1.24732348],[-.0307112,.28652802],[.03609913,1.0905171],[.50915948,.81966972],[-.0889008,.92515765],[.7106681,.66286334],[.27909482,.25944328],[.54418103,1.17177132],[-.3604525,1.03919865],[.11260775,.76835126],[-.0538793,1.27725925],[.5856681,.49750388],[.41918103,1.00641186],[.31411637,.61154488],[.78717672,.3406975],[.62068965,.84960548],[.04418103,.17961458],[.35075431,.41767518],[-.122306,.68852256],[.18426724,.92658316],[-.2887931,1.19743055],[.24568965,.0228082],[.55226293,.26086879],[.07920258,.53171618],[.38577586,.76977678],[-.0457974,.36635672],[.02101293,1.17034581],[-.2122844,.87526471],[.75377155,.10406241],[.1557112,.20955034],[.46228448,.44761094],[-.2139008,1.0905171],[.4606681,.66286334],[.29418103,1.17177132],[-.1373922,.76835126],[-.3038793,1.27725925],[.16918103,1.00641186],[.23060344,.1026369],[.06411637,.61154488],[.53717672,.3406975],[-.1023706,1.12045287],[.37068965,.84960548],[.73868534,.18389112],[.57219827,.6927991],[.30226293,.26086879],[-.1707974,.53171618],[.13577586,.76977678],[-.3372844,1.04062416],[-.0307112,1.27868476],[.50377155,.10406241],[.0307112,.3749098],[.33728448,.6129704],[.81034482,.34212301],[.17079741,1.12187838],[.21228448,.44761094],[.27909482,1.25160002],[.64385775,.85103099],[-.2607758,.71845833],[.10721982,.05274396],[.4137931,.29080456],[.88685344,.01995717],[.17887931,.21097585],[.24568965,1.01496494],[-.1858836,.61154488],[.01239224,.71988384],[-.3523706,1.12045287],[.48868534,.18389112],[.6869612,.29223007],[-.150862,.96364649],[-.109375,.28937904],[.62877155,.9308597],[.32219827,.6927991],[.1557112,1.20170708],[.52370689,.53599272],[.09213362,.13257266],[-.2807112,1.27868476],[.08728448,.6129704],[-.0792025,1.12187838],[.39385775,.85103099],[.2887931,.45616401],[.76185344,.18531663],[.12230603,.965072],[.1637931,.29080456],[.59536637,.69422461],[-.0026939,.79971254],[.42887931,1.2031326],[-.169181,1.30862052],[.96336206,.02851025],[.36530172,.13399818],[.19881465,.64290616],[.671875,.37205877],[.50538793,.88096676],[.87338362,.21525239],[-.0711206,.21097585],[-.2376077,.71988384],[.13038793,.05416947],[-.0360991,.56307746],[.50377155,1.09621915],[.4369612,.29223007],[-.0942887,1.20170708],[.63846982,.13542369],[.27370689,.53599272],[.04040948,.24091162],[.58028017,.77405331],[.10721982,1.0449007],[.4137931,1.2829613],[.94827586,.10833895],[-.1228448,.48467427],[.35021551,.21382688],[-.3292025,1.12187838],[-.2893318,.99358225],[.55172413,.0570205],[-.1276939,.965072],[.34536637,.69422461],[.17887931,1.2031326],[-.2526939,.79971254],[.546875,.53741823],[.11530172,.13399818],[.38038793,1.04632621],[-.0511853,.64290616],[.421875,.37205877],[-.2176724,1.15181414],[.25538793,.88096676],[.15032327,.48609978],[.62338362,.21525239],[.45689655,.72416038],[.09213362,1.1247294],[.82489224,.05844601],[.22683189,.16393394],[.1869612,.29223007],[.38846982,.13542369],[.22198275,.64433167],[-.1427801,1.0449007],[.05549568,1.15323966],[.1637931,1.2829613],[.89655172,.2166779],[-.0080818,.08410524],[.53178879,.61724693],[.36530172,1.12615492],[-.0662715,.72273486],[.30172413,.0570205],[.56681034,.96934854],[.60829741,.29508109],[.13523706,.56592848],[-.03125,1.07483647],[.80980603,.13827471],[.64331896,.6471827],[.13038793,1.04632621],[.4369612,1.28438681],[-.0996767,.48609978],[.37338362,.21525239],[-.2661637,.99500776],[.20689655,.72416038],[.04040948,1.23306836],[.10183189,.3292934],[.57489224,.05844601],[.40840517,.56735399],[-.0231681,.16393394],[.88146551,.29650661],[-.1896551,.67284192],[.35021551,1.20598362],[.17834051,.00712756],[.48491379,.24518816],[-.0280172,.64433167],[.64655172,.2166779],[.00700431,.99643327],[.48006465,.72558589],[-.1912715,.88809432],[.48329741,.46044055],[.68157327,.56877951],[.31681034,.96934854],[.25,.16535945],[-.1147629,.56592848],[.19181034,.80398908],[-.28125,1.07483647],[.55980603,.13827471],[.75808189,.24661367],[-.0797413,.91803008],[.39331896,.6471827],[.22683189,1.15609068],[.08674568,.4091221],[.59482758,.49037632],[.38846982,1.12758043],[-.2095905,1.23306836],[.32489224,.05844601],[-.3146551,.83820138],[.15840517,.56735399],[-.0080818,1.07626198],[.46497844,.80541459],[.35991379,.41054761],[.83297413,.13970023],[.19342672,.9194556],[.23491379,.24518816],[.5,1.15751619],[.06842672,.75409614],[.66648706,.64860821],[.43642241,.08838177],[.74299568,.32644237],[0,.16535945],[.2650862,1.07768749],[.20150862,.00855307],[.03502155,.51746105],[.10183189,1.32145014],[-.3297413,.91803008],[.57489224,1.05060275],[-.0231681,1.15609068],[.70959051,.08980729],[.34482758,.49037632],[-.2947198,1.27013169],[.17834051,.9992843],[.65140086,.72843691],[.48491379,1.2373449],[.37984913,.84247792],[-.2580818,1.07626198],[.10991379,.41054761],[-.0565732,.9194556],[.41648706,.64860821],[.25,1.15751619],[-.1815732,.75409614],[.31142241,.25374123],[.14493534,.76264921],[.18642241,.08838177],[.45150862,1.00070981],[.01993534,.59728976],[.49299568,.32644237],[-.1465517,1.10619774],[.61799568,.49180183],[.81950431,.33499545],[.69450431,.16963599],[.22144396,.44048338],[.52801724,.67854397],[.89601293,.01282961],[-.1481681,1.32145014],[-.3814655,1.02636904],[-.0134698,.36065467],[.45959051,.08980729],[.29310344,.59871527],[.52640086,.89379637],[-.0716594,.9992843],[.23491379,1.2373449],[.06303879,.03848883],[.12984913,.84247792],[.60290948,.57163053],[.43642241,1.08053852],[.8044181,.41482415],[.63793103,.92373213],[-.3065732,.9194556],[.06142241,.25374123],[-.1050646,.76264921],[.36799568,.49180183],[.20150862,1.00070981],[-.2715517,1.2715572],[.50808189,1.23877041],[-.3965517,1.10619774],[.56950431,.33499545],[.40301724,.84390343],[.44450431,.16963599],[-.028556,.44048338],[.27801724,.67854397],[-.1950431,.94939136],[.64601293,.01282961],[.17295258,.28367699],[.47952586,.52173759],[.20959051,.08980729],[-.0619612,.20384829],[.24461206,.44190889],[.71767241,.1710615],[-.1201508,.84247792],[.078125,.95081687],[.91918103,.01425512],[.5544181,.41482415],[.75269396,.5231631],[-.0851293,1.19457952],[.38793103,.92373213],[.31950431,.33499545],[-.153556,.60584283],[.15301724,.84390343],[-.3200431,1.11475082],[.45959051,1.08196403],[.35452586,.68709705],[.39601293,.01282961],[.18803879,1.19600503],[.22952586,.52173759],[.8275862,.41624966],[.06303879,1.03064558],[-.0770474,.28367699],[-.2435344,.79258498],[-.4100215,1.30149296],[.1244612,.12687061],[.43103448,.36493121],[.90409482,.09408382],[.26454741,.87383919],[.73760775,.60299181],[.57112068,1.11189979],[-.0053879,.44190889],[-.171875,.95081687],[.19612068,.28510251],[.66918103,.01425512],[.02963362,.79401049],[.50269396,.5231631],[-.3351293,1.19457952],[.70420258,.36635672],[.33943965,.76692575],[-.0921336,.3635057],[.10614224,.47184465],[.17295258,1.27583374],[.7807112,.04419088],[.10452586,.68709705],[-.0619612,1.19600503],[.41109913,.92515765],[-.1869612,1.03064558],[.77909482,.25944328],[.13954741,1.03919865],[.18103448,.36493121],[.61260775,.76835126],[.01454741,.87383919],[.48760775,.60299181],[.32112068,1.11189979],[.44612068,1.27725925],[.3825431,.20812483],[.21605603,.71703281],[.68911637,.44618543],[.52262931,.95509341],[-.0538793,.28510251],[-.2203663,.79401049],[.25269396,.5231631],[-.3868534,1.30291847],[.92726293,.09550934],[-.0188577,.63720411],[.45420258,.36635672],[-.1438577,.47184465],[-.0770474,1.27583374],[.28771551,.87526471],[.6557112,.20955034],[.05765086,.31503827],[.59752155,.84817997],[.5307112,.04419088],[.36745689,.28795353],[-.3119612,1.19600503],[-.1104525,1.03919865],[.36260775,.76835126],[.19612068,1.27725925],[-.2354525,.87383919],[.56411637,.61154488],[.1325431,.20812483],[.39762931,1.12045287],[-.0339439,.71703281],[.43911637,.44618543],[-.200431,1.2259408],[.27262931,.95509341],[.16756465,.56022643],[.640625,.28937904],[.47413793,.79828703],[.04256465,.39486697],[.30765086,1.30719501],[.84213362,.13257266],[.24407327,.23806059],[.20420258,.36635672],[.03771551,.87526471],[.71228448,.44761094],[.2807112,.04419088],[.54579741,.95651892],[.23922413,.71845833],[.07273706,1.22736631],[.00915948,.15823189],[.31573275,.39629249],[.3825431,1.20028157],[-.0490301,.79686152],[.14924568,.90520047],[.62553879,.36920775],[-.0140086,1.14896312],[.08081896,.31646378],[.66056034,.72130935],[.14762931,1.12045287],[-.450431,1.2259408],[-.0824353,.56022643],[.390625,.28937904],[-.2489224,1.06913441],[.22413793,.79828703],[.05765086,1.30719501],[.5307112,1.03634763],[.59213362,.13257266],[.42564655,.64148065],[-.0059267,.23806059],[.25915948,1.15038863],[-.1724137,.74696858],[.30064655,.47612119],[.19558189,.08125421],[.50215517,.31931481],[.97521551,.04846742],[-.0107758,.71845833],[-.1772629,1.22736631],[.6637931,.29080456],[.49730603,.79971254],[.06573275,.39629249],[.33081896,1.30862052],[.02424568,1.07055993],[.69881465,.64290616],[.26724137,.23948611],[.10075431,.74839409],[.57381465,.4775467],[-.0975215,.64005513],[-.2640086,1.14896312],[.57704741,.21240137],[.77532327,.32074032],[.41056034,.72130935],[.24407327,1.23021733],[-.1341594,.66856539],[.4057112,1.20170708],[-.1923491,1.30719501],[.54040948,.24091162],[-.2974137,.91232803],[.17564655,.64148065],[.00915948,1.15038863],[.48221982,.87954124],[.37715517,.48467427],[.85021551,.21382688],[.2106681,.99358225],[-.2209051,.59016219],[.25215517,.31931481],[-.3873922,1.09907018],[.0856681,.82822279],[.68372844,.72273486],[-.4272629,1.22736631],[.51724137,1.23164285],[.45366379,.16250843],[.24730603,.79971254],[.28717672,.67141641],[.08081896,1.30862052],[.76023706,.40056902],[.01724137,.23948611],[.28232758,1.15181414],[-.1492456,.74839409],[-.3157327,1.25730207],[.21875,.08267972],[.52532327,.32074032],[.05226293,.59158771],[.3588362,.8296483],[-.0059267,1.23021733],[.72683189,.16393394],[.12877155,.26942187],[.19558189,1.07341095],[.66864224,.80256357],[.50215517,1.31147155],[-.2408405,1.15038863],[.12715517,.48467427],[-.0393318,.99358225],[.43372844,.72273486],[.26724137,1.23164285],[-.1643318,.82822279],[.80172413,.0570205],[.63523706,.56592848],[.20366379,.16250843],[.46875,1.07483647],[.03717672,.67141641],[.51023706,.40056902],[.34375,.90947701],[-.1293103,1.18032439],[.40517241,.00570205],[.23868534,.51461003],[.71174568,.24376264],[.54525862,.75267063],[.91325431,.08695626],[-.03125,.08267972],[.27532327,.32074032],[-.197737,.59158771],[-.3642241,1.10049569],[.1088362,.8296483],[.00377155,.43478133],[.47683189,.16393394],[.31034482,.67284192],[.78340517,.40199454],[-.0544181,1.07341095],[-.2877155,.77832985],[.14385775,1.18174991],[.67834051,.00712756],[.08028017,.11261549],[.62015086,.64575718],[.38685344,.35067608],[.45366379,1.15466517],[.38523706,.56592848],[.21875,1.07483647],[-.2128232,.67141641],[-.3793103,1.18032439],[.15517241,.00570205],[.42025862,.91803008],[-.0113146,.51461003],[.46174568,.24376264],[.29525862,.75267063],[-.1778017,1.02351801],[.12877155,1.26157861],[.60183189,.99073122],[.66325431,.08695626],[.49676724,.59586425],[.33028017,1.10477223],[.06034482,.67284192],[-.1061422,1.18174991],[-.0447198,.27797494],[.42834051,.00712756],[-.2112068,.78688293],[.26185344,.51603554],[.09536637,1.02494353],[.73491379,.24518816],[.56842672,.75409614],[.40193965,1.26300412],[.93642241,.08838177],[.76993534,.59728976],[.33836206,.1938697],[.171875,.70277769],[.84644396,.27512392],[.10344827,.114041],[.17025862,.91803008],[.47683189,1.15609068],[-.1212284,1.26157861],[.41325431,.08695626],[.61153017,.19529522],[.24676724,.59586425],[-.059806,.35780365],[.08028017,1.10477223],[.55334051,.83392484],[-.2262931,.86671163],[.44827586,.43905786],[.9213362,.16821048],[.28178879,.94796585],[-.3561422,1.18174991],[.01185344,.51603554],[-.1546336,1.02494353],[.31842672,.75409614],[.21336206,.35922916],[.68642241,.08838177],[.046875,.86813714],[.08836206,.1938697],[.51993534,.59728976],[-.078125,.70277769],[.35344827,1.10619774],[.72144396,.44048338],[.28987068,.03706332],[.12338362,.54597131],[.59644396,.27512392],[.79795258,.11831754],[-.1115301,.4661426],[-.0447198,1.27013169],[.42834051,.9992843],[-.1697198,1.10477223],[.56303879,.03848883],[.19827586,.43905786],[.03178879,.94796585],[.50484913,.67711846],[.33836206,1.18602644],[-.4412715,1.21881323],[.87284482,.0114041],[.23329741,.79115947],[.70635775,.52031208],[.53987068,1.02922006],[-.0366379,.35922916],[-.203125,.86813714],[.26993534,.59728976],[.10344827,1.10619774],[-.0016163,.71133076],[.03987068,.03706332],[.47144396,.44048338],[-.1266163,.54597131],[.34644396,.27512392],[-.2931034,1.05487929],[.30495689,.94939136],[.67295258,.28367699],[.07489224,.38916492],[.54795258,.11831754],[.38146551,.62722552],[.21497844,1.13613351],[.31303879,.03848883],[.14655172,.54739682],[-.2182112,.94796585],[.82112068,.11974305],[-.0167025,.79115947],[.45635775,.52031208],[-.1831896,1.30006745],[.28987068,1.02922006],[.65786637,.3635057],[.49137931,.87241368],[.05980603,.46899363],[.26131465,.31218725],[.734375,.04133986],[-.4181034,1.22023875],[.05495689,.94939136],[.36153017,1.18745196],[.72952586,.52173759],[-.2165948,1.06343236],[.56303879,1.03064558],[.29795258,.11831754],[.25646551,.79258498],[.13146551,.62722552],[.08997844,1.30149296],[-.0350215,1.13613351],[.45797413,.6357786],[.02640086,.23235854],[.80603448,.19957175],[.33297413,.47041914],[.63954741,.70847974],[.16648706,.97932712],[-.1034482,.54739682],[.4762931,.95224238],[.09806034,.39059044],[.57112068,.11974305],[-.0684267,.89949842],[-.4331896,1.30006745],[.60614224,.47184465],[.17456896,.0684246],[.24137931,.87241368],[.54795258,1.11047428],[-.356681,.97790161],[.01131465,.31218725],[.484375,.04133986],[-.1551724,.82109523],[.31788793,.55024784],[.27640086,1.22451528],[.51939655,.39344146],[.31303879,1.03064558],[-.1600215,1.30149296],[.51454741,.87383919],[.08297413,.47041914],[.04148706,1.14468658],[-.0835129,.97932712],[.71605603,.71703281],[.7575431,.04276537],[-.1885775,.58446014],[.59105603,.55167336],[.15948275,.1482533],[.42456896,1.06058134],[.28448275,.31361276],[.11799568,.82252074],[.48599137,.15680638],[.79256465,.39486697],[.19450431,.5003549],[-.3184267,.89949842],[.86907327,.07270114],[-.1169181,.74269204],[.35614224,.47184465],[.42295258,1.27583374],[.55765086,.31503827],[.19288793,.7156073],[-.0404094,.4205262],[.02640086,1.22451528],[.4994612,.9536679],[-.0985991,1.05915583],[-.2036637,.66428885],[.26939655,.39344146],[-.3701508,1.17319683],[.10290948,.90234945],[.57596982,.63150206],[.47090517,.23663508],[.3044181,.74554306],[.77747844,.47469568],[-.3335129,.97932712],[.03448275,.31361276],[.29956896,1.2259408],[.34105603,.55167336],[-.1320043,.82252074],[.17456896,1.06058134],[.23599137,.15680638],[.54256465,.39486697],[.06950431,.66571436],[.37607758,.90377496],[-.0554956,.5003549],[.01131465,1.30434399],[.74407327,.23806059],[.14601293,.34354852],[.61907327,.07270114],[.14116379,.82394625],[.81573275,.39629249],[-.0889008,.26371982],[.45096982,.79686152],[.64924568,.90520047],[.28448275,1.3057695],[-.1470905,.90234945],[.22090517,.23663508],[.48599137,1.14896312],[.0544181,.74554306],[.52747844,.47469568],[-.1120689,1.25445105],[.36099137,.98360366],[.72898706,.3178893],[.5625,.82679728],[-.0140086,.15680638],[-.1804956,.66571436],[.12607758,.90377496],[-.3469827,1.17462234],[.49407327,.23806059],[.02101293,.50890798],[-.1454741,1.01781596],[-.103987,.34354852],[.36907327,.07270114],[-.2704741,.85245651],[.2025862,.58160912],[.3275862,.74696858],[.69558189,.08125421],[.16109913,1.25587656],[.80064655,.47612119],[.09752155,.18674214],[.40409482,.42480274],[.87715517,.15395535],[.23760775,.93371072],[.39924568,.90520047],[.16918103,.34497403],[.23599137,1.14896312],[.00269396,.85388202],[-.3620689,1.25445105],[.37068965,.18816765],[.67726293,.42622825],[.47898706,.3178893],[.3125,.82679728],[-.1605603,1.09764467],[.51400862,.6699909],[.34752155,1.17889888],[.0775862,.74696858],[-.0889008,1.25587656],[.38415948,.98502917],[.44558189,.08125421],[.27909482,.59016219],[.75215517,.31931481],[.11260775,1.09907018],[.15409482,.42480274],[.5856681,.82822279],[-.0123922,.93371072],[.04903017,.02993576],[-.1174568,.53884374],[.35560344,.26799636],[.18911637,.77690434],[.66217672,.50605695],[.49568965,1.01496494],[.86368534,.34925057],[-.0808189,.34497403],[.12068965,.18816765],[.42726293,.42622825],[.49407327,1.23021733],[-.4105603,1.09764467],[-.0457974,.69707564],[.32219827,.03136127],[.62877155,.26942187],[.26400862,.6699909],[.09752155,1.17889888],[.57058189,.9080515],[.03394396,.10976446],[.02909482,.59016219],[-.1373922,1.09907018],[.3356681,.82822279],[-.2623922,.93371072],[.70366379,.16250843],[.06411637,.9422638],[.10560344,.26799636],[.53717672,.67141641],[-.0608836,.77690434],[.41217672,.50605695],[-.2273706,1.28581232],[.37068965,1.18032439],[.73868534,.51461003],[.30711206,.11118997],[.140625,.62009796],[.61368534,.34925057],[.44719827,.85815856],[.81519396,.19244419],[.07219827,.03136127],[.37877155,.26942187],[-.0942887,.54026926],[.21228448,.77832985],[-.2607758,1.04917724],[-.1524784,1.17889888],[.58028017,.11261549],[-.0177801,.21810342],[.04903017,1.0220925],[.52209051,.75124511],[.35560344,1.2601531],[.29202586,.19101868],[.55711206,1.10334672],[-.0193965,.43335581],[-.1858836,.9422638],[.12068965,1.18032439],[-.4773706,1.28581232],[.48868534,.51461003],[.05711206,.11118997],[-.150862,1.2943654],[-.109375,.62009796],[.36368534,.34925057],[-.275862,1.12900594],[.19719827,.85815856],[.32219827,1.02351801],[.09213362,.46329158],[.56519396,.19244419],[.39870689,.70135217],[.23221982,1.21026016],[.76670258,.03563781],[-.0377155,.77832985],[.33028017,.11261549],[-.1427801,.38346287],[.1637931,.62152347],[.63685344,.35067608],[-.0026939,1.13043145],[-.3092672,.89237086],[.36530172,.46471709],[.83836206,.1938697],[.671875,.70277769],[.24030172,.29935763],[.30711206,1.10334672],[.07704741,.54312028],[.55010775,.27227289],[.75161637,.11546651],[-.400862,1.2943654],[.07219827,1.02351801],[.37877155,1.26157861],[.20689655,.06272255],[.74676724,.59586425],[-.1578663,.46329158],[.58028017,1.10477223],[-.3243534,.97219956],[.14870689,.70135217],[.45528017,.93941277],[.27370689,.86671163],[-.0177801,1.21026016],[.51670258,.03563781],[.82327586,.27369841],[-.1228448,.81539318],[.65678879,.78260639],[.35021551,.54454579],[.49030172,1.29151437],[.18372844,1.05345378],[.55172413,.38773941],[-.0862068,.62152347],[-.2526939,1.13043145],[.11530172,.46471709],[.58836206,.1938697],[-.0511853,.97362507],[-.0096982,.29935763],[.421875,.70277769],[.25538793,1.21168567],[.78987068,.03706332],[.62338362,.54597131],[.19181034,.14255125],[.02532327,.65145923],[-.3394396,1.05202826],[.69989224,.22380547],[.33512931,.6243745],[-.2095905,.57163053],[.37015086,.9764761],[-.2677801,1.21026016],[.46497844,.14397676],[.53178879,.94796585],[.10021551,.54454579],[.40678879,.78260639],[-.0662715,1.05345378],[.24030172,1.29151437],[.77478448,.11689202],[.30172413,.38773941],[.60829741,.62580001],[.17672413,.22237995],[.44181034,1.13470799],[.13523706,.8966474],[.80980603,.46899363],[-.0948275,.33642096],[.37823275,.06557357],[-.3011853,.97362507],[.21174568,.57448156],[.88631465,.14682779],[.37338362,.54597131],[.20689655,1.05487929],[-.2246767,.65145923],[.67995689,.7840319],[.40840517,.89807291],[-.0231681,.49465285],[.44989224,.22380547],[.51670258,1.02779455],[-.0813577,1.13328248],[.65140086,.06699909],[.28663793,.46756811],[.05334051,.17248701],[.12015086,.9764761],[.5932112,.70562871],[.25,.49607837],[.31681034,1.30006745],[.05172413,.38773941],[-.1147629,.8966474],[.19181034,1.13470799],[-.2397629,.73128794],[.92456896,.0684246],[.55980603,.46899363],[.12823275,.06557357],[.39331896,.97790161],[-.0797413,1.248749],[.43480603,.30363417],[-.2047413,1.08338954],[-.0382543,.57448156],[.08674568,.73984101],[.16325431,.41767518],[.63631465,.14682779],[.46982758,.65573577],[-.0431034,1.05487929],[.63146551,.62722552],[.46497844,1.13613351],[-.0716594,.33784647],[.40140086,.06699909],[-.2381465,.84675446],[.23491379,.57590707],[.06842672,1.08481505],[.43642241,.41910069],[.00484913,.01568063],[.54471982,.54882233],[.90948275,.1482533],[.37823275,1.05773031],[.74299568,.65716129],[.57974137,.90092393],[-.1632543,.73984101],[-.3297413,1.248749],[.14331896,.97790161],[.44989224,1.21596221],[.51131465,.31218725],[.27801724,.01710615],[.34482758,.82109523],[-.0867456,.41767518],[-.2532327,.92658316],[.21982758,.65573577],[.05334051,1.16464376],[.11476293,.26086879],[-.0517241,.76977678],[.4213362,.49892939],[.25484913,1.00783737],[.89439655,.228082],[-.0150862,.57590707],[-.1815732,1.08481505],[.18642241,.41910069],[.65948275,.1482533],[.01993534,.92800867],[.49299568,.65716129],[.38793103,.26229431],[.69450431,.5003549],[.26293103,.09693485],[.32974137,.90092393],[.09644396,.60584283],[.77101293,.17818906],[.02801724,.01710615],[.09482758,.82109523],[.29310344,.92943418],[-.1966594,1.16464376],[.76939655,.39344146],[.12984913,1.17319683],[.1713362,.49892939],[.60290948,.90234945],[-.4682112,1.27868476],[.00484913,1.00783737],[.47790948,.73698999],[.31142241,1.24589797],[.37284482,.34212301],[.84590517,.07127562],[.20635775,.85103099],[.6794181,.58018361],[.51293103,1.08909159],[-.0635775,.41910069],[-.2300646,.92800867],[.13793103,.26229431],[.44450431,.5003549],[.01293103,.09693485],[.27801724,1.00926289],[-.028556,.77120229],[-.1950431,1.28011027],[.33943965,.10548792],[.64601293,.34354852],[.47952586,.85245651],[.52101293,.17818906],[.58782327,.98217815],[.04795258,.44903645],[.72252155,.02138268],[-.1201508,1.17319683],[.5544181,.74554306],[.12284482,.34212301],[.32112068,.45046196],[-.0436422,.85103099],[.4294181,.58018361],[.26293103,1.08909159],[.38793103,1.25445105],[.15786637,.69422461],[.63092672,.42337723],[.46443965,.93228521],[.83243534,.26657084],[-.278556,.77120229],[.02801724,1.00926289],[-.4450431,1.28011027],[.08943965,.10548792],[.39601293,.34354852],[-.0770474,.61439591],[.22952586,.85245651],[.7025862,.58160912],[.53609913,1.0905171],[-.2435344,1.12330389],[.59752155,.18674214],[.43103448,.69565012],[.47252155,.02138268],[-5387e-7,.29223007],[.30603448,.53029067],[-.1670258,.80113805],[.13793103,1.25445105],[.07435344,.18531663],[.27262931,.29365558],[-.0921336,.69422461],[.74568965,.0228082],[-.2586206,1.2031326],[.21443965,.93228521],[.52101293,1.17034581],[.58243534,.26657084],[-.057112,1.04632621],[.41594827,.77547883],[.2494612,1.28438681],[.18588362,.21525239],[-.0204741,.85245651],[.34752155,.18674214],[-.1255387,.45758953],[.18103448,.69565012],[.65409482,.42480274],[.01454741,1.20455811],[.05603448,.53029067],[.48760775,.93371072],[-.2920258,.96649751],[.3825431,.53884374],[.85560344,.26799636],[.68911637,.77690434],[.2575431,.37348429],[.73060344,.1026369],[.09105603,.88239227],[-.0490301,.13542369],[-.2155172,.64433167],[.45905172,.2166779],[.765625,.4547385],[.02262931,.29365558],[.08943965,1.09764467],[-.1438577,.80256357],[.22413793,.1368492],[.5307112,.3749098],[-.307112,1.04632621],[.16594827,.77547883],[.47252155,1.01353943],[-5387e-7,1.28438681],[.84051724,.34782506],[-.0641163,.21525239],[.67403017,.85673304],[.36745689,.61867245],[.20096982,1.12758043],[-.0689655,.69565012],[-.0290948,.56735399],[-.2354525,1.20455811],[.44396551,.29650661],[.1325431,.53884374],[.60560344,.26799636],[-.0339439,1.04775173],[.0075431,.37348429],[.43911637,.77690434],[-.1589439,.88239227],[.27262931,1.28581232],[.64547413,.13970023],[.80711206,.11118997],[.640625,.62009796],[.20905172,.2166779],[.47413793,1.12900594],[.04256465,.72558589],[.515625,.4547385],[.34913793,.96364649],[.41056034,.05987152],[.71713362,.29793212],[-.1923491,.64575718],[.2807112,.3749098],[-.3588362,1.15466517],[.48221982,.21810342],[.11745689,.61867245],[-.1158405,.32359135],[-.0490301,1.12758043],[.31573275,.7270114],[.79202586,.19101868],[.62553879,.69992666],[.19396551,.29650661],[.45905172,1.20883465],[.39547413,.13970023],[.70204741,.37776082],[-.2839439,1.04775173],[.02262931,1.28581232],[.22898706,.64860821],[.90355603,.22095444],[-.0409482,.2166779],[.390625,.62009796],[-.2074353,.72558589],[.22413793,1.12900594],[-.3739224,1.23449387],[.16056034,.05987152],[.42564655,.97219956],[-.0059267,.56877951],[.46713362,.29793212],[-.1724137,1.07768749],[-.1309267,.40342005],[.30064655,.8068401],[.13415948,1.31574809],[.77370689,.53599272],[.66864224,.14112574],[.50215517,.65003372],[.07058189,.24661367],[.61045258,.77975537],[.06573275,.7270114],[.74030172,.29935763],[.26724137,.57020502],[.57381465,.80826562],[-.0975215,.97077405],[.20905172,1.20883465],[.94181034,.14255125],[.34375,.24803918],[.41056034,1.05202826],[.14547413,.13970023],[-.0210129,.64860821],[-.1875,1.15751619],[.65355603,.22095444],[.18049568,.49180183],[.01400862,1.00070981],[.48706896,.72986243],[-.025862,1.12900594],[.64870689,.70135217],[.48221982,1.21026016],[.05064655,.8068401],[-.1158405,1.31574809],[-.0544181,.41197312],[.41864224,.14112574],[-.2209051,.92088111],[.25215517,.65003372],[.0856681,1.15894171],[.72521551,.37918634],[.55872844,.88809432],[.45366379,.49322734],[.02209051,.08980729],[-.1443965,.59871527],[.32866379,.32786788],[.39547413,1.13185697],[.53017241,.1710615],[-.1492456,1.079113],[.52532327,.65145923],[.09375,.24803918],[.16056034,1.05202826],[.3588362,1.16036722],[-.4375,1.15751619],[.29525862,.0912328],[-.0695043,.49180183],[.23706896,.72986243],[-.2359913,1.00070981],[.07058189,1.23877041],[.60506465,.06414806],[.43857758,.57305604],[.27209051,1.08196403],[.00215517,.65003372],[-.1643318,1.15894171],[-.2693965,.76407473],[.20366379,.49322734],[.03717672,1.00213532],[.07866379,.32786788],[.34375,1.24019592],[-.0878232,.83677587],[.67672413,.22237995],[.51023706,.73128794],[.40517241,.33642096],[.87823275,.06557357],[.71174568,.57448156],[.28017241,.1710615],[.54525862,1.08338954],[.11368534,.67996949],[.58674568,.4091221],[.48168103,.01425512],[.78825431,.25231572],[.1088362,1.16036722],[.04525862,.0912328],[-.1212284,.60014078],[-.2877155,1.10904877],[.55334051,.17248701],[.62015086,.9764761],[.18857758,.57305604],[.38685344,.681395],[.02209051,1.08196403],[.32866379,1.32002463],[.86314655,.14540228],[.22359913,.92515765],[.69665948,.65431026],[.53017241,1.16321824],[-.0463362,.49322734],[-.2128232,1.00213532],[.09375,1.24019592],[.15517241,.33642096],[.62823275,.06557357],[-.0113146,.84532894],[.03017241,.1710615],[.29525862,1.08338954],[-.1363146,.67996949],[.46174568,.57448156],[-.3028017,1.18887747],[.66325431,.41767518],[.23168103,.01425512],[.49676724,.92658316],[.53825431,.25231572],[.06519396,.5231631],[.37176724,.7612237],[-.1012931,1.03207109],[.20528017,1.27013169],[.73976293,.09550934],[.57327586,.60441732],[.30334051,.17248701],[-.3362068,.95224238],[.13685344,.681395],[.50484913,.01568063],[.33836206,.52458862],[.81142241,.25374123],[-.0264008,.92515765],[.28017241,1.16321824],[.6481681,.49750388],[.41487068,.20242278],[.48168103,1.00641186],[-.2613146,.84532894],[.04525862,1.08338954],[.41325431,.41767518],[.24676724,.92658316],[.71982758,.65573577],[.55334051,1.16464376],[.12176724,.7612237],[-.184806,.5231631],[-.3512931,1.03207109],[-.2262931,1.19743055],[.44827586,.76977678],[.48976293,.09550934],[.01670258,.36635672],[.32327586,.60441732],[.7963362,.33356993],[.15678879,1.1133253],[.62984913,.84247792],[-.1497844,.87526471],[.52478448,.44761094],[.25484913,.01568063],[.08836206,.52458862],[-.078125,1.0334966],[-.0167025,.12972164],[.28987068,.36778224],[.76293103,.09693485],[.59644396,.60584283],[-.2413793,1.27725925],[.23168103,1.00641186],[.42995689,1.11475082],[.36637931,.0456164],[-.0032327,.92658316],[.36476293,.26086879],[.19827586,.76977678],[.6713362,.49892939],[.03178879,1.27868476],[.07327586,.60441732],[.50484913,1.00783737],[-.0932112,1.1133253],[-.0317887,.20955034],[.27478448,.44761094],[.74784482,.17676355],[.10829741,.95651892],[.58135775,.68567154],[.41487068,1.19457952],[-.1982758,.71845833],[.4762931,.29080456],[.94935344,.01995717],[.78286637,.52886515],[-.1616379,.52458862],[-.328125,1.0334966],[.03987068,.36778224],[.51293103,.09693485],[-.1266163,.87669022],[.34644396,.60584283],[.24137931,.21097585],[.54795258,.44903645],[.11637931,.0456164],[.18318965,.84960548],[-.0501077,.55452438],[.38146551,.95794444],[.6244612,.12687061],[-.213362,.79828703],[.46120689,.37063326],[-.2182112,1.27868476],[.62284482,.34212301],[-.0167025,1.12187838],[.02478448,.44761094],[.45635775,.85103099],[-.1417025,.95651892],[.16487068,1.19457952],[.65786637,.69422461],[.2262931,.29080456],[.69935344,.01995717],[.05980603,.79971254],[.53286637,.52886515],[-.106681,1.30862052],[.36637931,1.03777314],[.49137931,1.2031326],[.734375,.37205877],[.56788793,.88096676],[-.1751077,.71988384],[.29795258,.44903645],[-.3415948,1.22879182],[.13146551,.95794444],[.97252155,.02138268],[.02640086,.56307746],[.4994612,.29223007],[-.0985991,.397718],[.3744612,.12687061],[-.2650862,.90662598],[.33297413,.80113805],[.21120689,.37063326],[.4762931,1.2829613],[.04471982,.87954124],[.40948275,.47897222],[.71928879,.45188748],[.17456896,.39914351],[.24137931,1.2031326],[-.1901939,.79971254],[-.356681,1.30862052],[.11637931,1.03777314],[.01131465,.64290616],[.484375,.37205877],[-.1551724,1.15181414],[-.1136853,.4775467],[.31788793,.88096676],[.68588362,.21525239],[.51939655,.72416038],[.08782327,.32074032],[.56088362,.04989293],[-.1185344,.95794444],[.55603448,.53029067],[.59590517,.40199454],[.38954741,1.03919865],[-.3900862,1.07198544],[.08297413,.80113805],[-.0835129,1.31004604],[.7575431,.37348429],[.28448275,.64433167],[.59105603,.88239227],[.15948275,.47897222],[.2262931,1.2829613],[.0544181,.08410524],[.83405172,.05131845],[.36099137,.32216583],[.66756465,.56022643],[-.0037715,.72273486],[.30280172,.96079546],[-.1702586,1.23164285],[.4375,0],[.50431034,.80398908],[-.2386853,.64290616],[.4994612,1.28438681],[-.4051724,1.15181414],[.06788793,.88096676],[.43588362,.21525239],[-.2036637,.99500776],[.26939655,.72416038],[.10290948,1.23306836],[.14439655,.55880092],[.74245689,.45331299],[.57596982,.96222097],[.03933189,.16393394],[-.1271551,.67284192],[.34590517,.40199454],[.81896551,.13114715],[-.3335129,1.31004604],[.54741379,.24518816],[.34105603,.88239227],[-.0905172,.47897222],[-.1320043,1.15323966],[.54256465,.72558589],[.58405172,.05131845],[.37607758,1.23449387],[-.0554956,.83107382],[.11099137,.32216583],[-.4202586,1.23164285],[.3125,.16535945],[.61907327,.40342005],[.1875,0],[.25431034,.80398908],[.4525862,.91232803],[.08782327,1.31289706],[.28933189,1.15609068],[.01939655,.72416038],[-.1470905,1.23306836],[.22090517,.56735399],[.69396551,.29650661],[.0544181,1.07626198],[.09590517,.40199454],[.52747844,.80541459],[-.0705818,.91090252],[.36099137,1.31432258],[.72898706,.64860821],[-.1756465,.51603554],[.29741379,.24518816],[.13092672,.75409614],[.60398706,.48324875],[-.0355603,1.26300412],[.49892241,.08838177],[.80549568,.32644237],[.63900862,.83535036],[-.3054956,.83107382],[.12607758,1.23449387],[.59913793,.96364649],[.0625,.16535945],[-.103987,.67426744],[.36907327,.40342005],[-.2704741,1.18317542],[.2025862,.91232803],[.26400862,.00855307],[.57058189,.24661367],[.40409482,.75552165],[-.0274784,.3521016],[.03933189,1.15609068],[-.1939655,.86100958],[.71390086,.72843691],[.48060344,.43335581],[-.1955818,1.07626198],[.11099137,1.31432258],[.47898706,.64860821],[.04741379,.24518816],[.3125,1.15751619],[-.1190732,.75409614],[.1875,.99215674],[-.2855603,1.26300412],[.24892241,.08838177],[.51400862,1.00070981],[.08243534,.59728976],[.55549568,.32644237],[.38900862,.83535036],[-.0840517,1.10619774],[.75700431,.16963599],[.59051724,.67854397],[.38415948,1.31574809],[-.0474137,.91232803],[.01400862,.00855307],[-.1524784,.51746105],[.32058189,.24661367],[-.3189655,1.02636904],[.15409482,.75552165],[-.0123922,1.26442964],[.62715517,.48467427],[.04903017,.36065467],[.52209051,.08980729],[.35560344,.59871527],[.82866379,.32786788],[.66217672,.83677587],[-.2424568,.7042032],[.23060344,.43335581],[.29741379,1.2373449],[.43211206,.27654943],[.90517241,.00570205],[.0625,1.15751619],[.19719827,.19672073],[.26400862,1.00070981],[-.1675646,.59728976],[.13900862,.83535036],[-.3340517,1.10619774],[.50700431,.16963599],[.34051724,.67854397],[.81357758,.40769659],[.17403017,1.18745196],[.64709051,.91660457],[-.1325431,.94939136],[.54202586,.52173759],[-.0959051,.75552165],[-.2623922,1.26442964],[.27209051,.08980729],[.10560344,.59871527],[.57866379,.32786788],[-.0608836,1.10762325],[.41217672,.83677587],[.30711206,.44190889],[.78017241,.1710615],[.61368534,.67996949],[.18211206,.27654943],[.24892241,1.08053852],[.015625,.78545742],[.44719827,1.18887747],[.98168103,.01425512],[.38362068,.11974305],[.69019396,.35780365],[.52370689,.86671163],[-.0528017,.19672073],[.14870689,.03991435],[.68857758,.57305604],[.52209051,1.08196403],[.09051724,.67854397],[-.0759698,1.18745196],[.45851293,.01282961],[.29202586,.52173759],[.7650862,.25089021],[.12553879,1.03064558],[.59859913,.75979819],[.43211206,1.26870617],[-.3108836,1.10762325],[.05711206,.44190889],[-.109375,.95081687],[-.0678879,.27654943],[.36368534,.67996949],[-.234375,.78545742],[.19719827,1.18887747],[.25862068,.28510251],[.73168103,.01425512],[.09213362,.79401049],[.13362068,.11974305],[.56519396,.5231631],[-.0328663,.62865103],[.44019396,.35780365],[-.1993534,1.13755902],[.39870689,1.03207109],[.64170258,.20099727],[.47521551,.70990525],[.40678879,.12116856],[.47359913,.92515765],[.24030172,.63007655],[-.0662715,.39201595],[-.1244612,1.03064558],[.18211206,1.26870617],[.71659482,.09408382],[.91487068,.20242278],[.07704741,.87383919],[.11853448,.19957175],[.55010775,.60299181],[.38362068,1.11189979],[.75161637,.44618543],[.3200431,.04276537],[.58512931,.95509341],[-.359375,.95081687],[-.0528017,1.18887747],[-.1578663,.79401049],[.31519396,.5231631],[.62176724,.7612237],[-.3243534,1.30291847],[.45528017,1.27013169],[.14870689,1.03207109],[.51670258,.36635672],[.35021551,.87526471],[-.0813577,.47184465],[.39170258,.20099727],[-.2478448,.98075264],[.22521551,.70990525],[.05872844,1.21881323],[.12015086,.31503827],[.5932112,.04419088],[.42672413,.55309887],[.15678879,.12116856],[-.0096982,.63007655],[.19181034,.47327016],[.66487068,.20242278],[-.1729525,.87383919],[.13362068,1.11189979],[.86637931,.0456164],[.50161637,.44618543],[.26831896,.15110433],[.33512931,.95509341],[-.0964439,.55167336],[.10506465,.39486697],[.578125,.12401959],[-.0614224,.90377496],[.61314655,.47612119],[.10021551,.87526471],[.40678879,1.1133253],[-.0247844,.70990525],[.77478448,.44761094],[.3432112,.04419088],[.60829741,.95651892],[.64978448,.28225148],[-.2963362,.82394625],[.48329741,.79115947],[.17672413,.55309887],[.01023706,1.06200685],[.8512931,.1254451],[.37823275,.39629249],[.68480603,.63435308],[.3200431,1.03492211],[.51831896,1.14326107],[-.0581896,.47327016],[.45474137,.07412665],[-.2246767,.98217815],[.61637931,.0456164],[-.0231681,.82537177],[.44989224,.55452438],[-.387931,1.2259408],[.08512931,.95509341],[.28340517,1.06343236],[.65140086,.397718],[.75969827,.52743964],[-.1449353,.39486697],[.12015086,1.30719501],[-.3114224,.90377496],[.16163793,.63292757],[.5932112,1.03634763],[-.1099137,.74696858],[.36314655,.47612119],[.19665948,.98502917],[.83620689,.2052738],[.35829741,.95651892],[-.2397629,1.06200685],[.6012931,.1254451],[.39331896,1.30862052],[.43480603,.63435308],[.00323275,.23093303],[.26831896,1.14326107],[.12823275,.39629249],[-.0382543,.90520047],[.32974137,.23948611],[.63631465,.4775467],[.20474137,.07412665],[.46982758,.98645469],[.03825431,.58303463],[.71282327,.15538086],[.19989224,.55452438],[.8744612,.12687061],[.23491379,.90662598],[.70797413,.6357786],[-.1298491,1.30719501],[.00484913,.34639955],[.47790948,.07555216],[.11314655,.47612119],[.54471982,.87954124],[-.0533405,.98502917],[.31465517,.31931481],[.78771551,.04846742],[.1481681,.82822279],[.62122844,.55737541],[.45474137,1.06628339],[.82273706,.40056902],[-.2882543,.90520047],[.01831896,1.14326107],[.07974137,.23948611],[.38631465,.4775467],[-.0867456,.74839409],[-.2532327,1.25730207],[-.2117456,.58303463],[.21982758,.98645469],[-.3782327,1.09194262],[.69288793,.7156073],[.58782327,.32074032],[.11476293,.59158771],[.4213362,.8296483],[-.010237,.42622825],[.46282327,.15538086],[-.1767241,.93513623],[.2963362,.66428885],[.49784482,.50748247],[.22790948,.07555216],[.49299568,.9878802],[-.0436422,.18959317],[.26293103,.42765376],[.32974137,1.23164285],[-.1018318,.82822279],[.20474137,1.06628339],[.9375,0],[.57273706,.40056902],[.40625,.90947701],[-.0668103,1.18032439],[.60775862,.75267063],[-.0301724,.98645469],[-.135237,.59158771],[.33782327,.32074032],[-.3017241,1.10049569],[.1713362,.8296483],[.64439655,.55880092],[.0463362,.66428885],[.47790948,1.0677089],[.53933189,.16393394],[.37284482,.67284192],[-.0587284,.26942187],[.84590517,.40199454],[-.2252155,.77832985],[.24784482,.50748247],[.08135775,1.01639045],[.72090517,.23663508],[.14278017,.11261549],[.44935344,.35067608],[.92241379,.0798287],[.75592672,.58873668],[.01293103,.42765376],[-.153556,.93656175],[.6875,0],[.21443965,.27084738],[.52101293,.50890798],[.15625,.90947701],[-.3168103,1.18032439],[.35775862,.75267063],[.19127155,1.26157861],[.28933189,.16393394],[.12284482,.67284192],[-.0436422,1.18174991],[-.0021551,.50748247],[.4294181,.91090252],[-.1686422,1.01639045],[.79741379,.24518816],[.15786637,1.02494353],[.19935344,.35067608],[.67241379,.0798287],[.03286637,.85958407],[.50592672,.58873668],[.63092672,.75409614],[.33943965,1.09764467],[.46443965,1.26300412],[.40086206,.1938697],[.70743534,.4319303],[.54094827,.94083828],[-.0355603,.27084738],[-.2020474,.77975537],[-.3685344,1.28866335],[.16594827,.114041],[.47252155,.3521016],[.94558189,.08125421],[.30603448,.86100958],[-5387e-7,.62294898],[-.0587284,1.26157861],[.67403017,.19529522],[.78232758,.32501686],[.14278017,1.10477223],[.61584051,.83392484],[-.2936422,1.18174991],[.07435344,.51603554],[-.0921336,1.02494353],[.38092672,.75409614],[.21443965,1.26300412],[-.2171336,.85958407],[.58243534,.59728976],[.15086206,.1938697],[.41594827,1.10619774],[-.015625,.70277769],[.45743534,.4319303],[-.182112,1.21168567],[.29094827,.94083828],[.35237068,.03706332],[.18588362,.54597131],[.65894396,.27512392],[.49245689,.7840319],[.22252155,.3521016],[.05603448,.86100958],[-.4170258,1.13185697],[.42403017,.19529522],[-.0490301,.4661426],[.2575431,.7042032],[.73060344,.43335581],[-.1072198,1.10477223],[.62553879,.03848883],[.02747844,.14397676],[.56734913,.67711846],[.33405172,.38203736],[.40086206,1.18602644],[-.3421336,1.02494353],[.84536637,.19814624],[.33243534,.59728976],[.16594827,1.10619774],[-.265625,.70277769],[-.432112,1.21168567],[.04094827,.94083828],[.10237068,.03706332],[.36745689,.94939136],[-.0641163,.54597131],[.40894396,.27512392],[.71551724,.51318452],[-.2306034,1.05487929],[.54903017,1.0220925],[.24245689,.7840319],[.07596982,1.29293989],[.61045258,.11831754],[.44396551,.62722552],[.01239224,.22380547],[.17403017,.19529522],[.21390086,.06699909],[.0075431,.7042032],[-.1589439,1.21311118],[.20905172,.54739682],[.68211206,.27654943],[.04256465,1.0563048],[.08405172,.38203736],[.15086206,1.18602644],[.515625,.78545742],[.34913793,1.2943654],[.88362068,.11974305],[.71713362,.62865103],[.28556034,.22523098],[-.0792025,.62580001],[.59536637,.19814624],[.05064655,.14540228],[.11745689,.94939136],[-.1158405,.65431026],[.42403017,1.18745196],[-.1740301,1.29293989],[.79202586,.52173759],[.36045258,.11831754],[.55872844,.22665649],[-.2790948,.89807291],[.19396551,.62722552],[.50053879,.86528612],[.02747844,1.13613351],[.86853448,.19957175],[.39547413,.47041914],[.70204741,.70847974],[-.2025862,.57590707],[.53556034,1.21738772],[-.4089439,1.21311118],[.27047413,.30505968],[.47198275,.1482533],[-.2074353,1.0563048],[.265625,.78545742],[.09913793,1.2943654],[-.0059267,.89949842],[.03556034,.22523098],[.46713362,.62865103],[-.1309267,.73413896],[.30064655,1.13755902],[.66864224,.47184465],[.23706896,.0684246],[.07058189,.57733258],[.54364224,.3064852],[-.294181,.97790161],[.17887931,.70705422],[.37715517,.81539318],[.74515086,.14967881],[.85344827,.27940046],[.21390086,1.05915583],[-.1643318,.49750388],[.37553879,1.03064558],[.30872844,.22665649],[-.2225215,1.13613351],[.51023706,.06985011],[.14547413,.47041914],[.45204741,.70847974],[-.0210129,.97932712],[.28556034,1.21738772],[-.1460129,.81396767],[.8200431,.04276537],[.65355603,.55167336],[.22198275,.1482533],[.48706896,1.06058134],[.52855603,.3863139],[.05549568,.65716129],[.73006465,.22950752],[.21713362,.62865103],[.05064655,1.13755902],[-.012931,.0684246],[.25215517,.98075264],[-.1794181,.57733258],[.29364224,.3064852],[-.3459051,1.08624057],[.72521551,.70990525],[.02209051,.4205262],[.49515086,.14967881],[.32866379,.6585868],[.80172413,.38773941],[-.0360991,1.05915583],[.09859913,.09836036],[.63846982,.63150206],[.47198275,1.14041004],[.09375,.57875809],[-.2710129,.97932712],[.03556034,1.21738772],[.76831896,.15110433],[.40355603,.55167336],[.60183189,.66001231],[.23706896,1.06058134],[-.1945043,.65716129],[-.0695043,.82252074],[-.3609913,1.16606927],[.11206896,.89522188],[.43857758,.90377496],[.48006465,.22950752],[.00700431,.5003549],[-.1594827,1.00926289],[.31357758,.7384155],[.78663793,.46756811],[.20851293,.34354852],[.68157327,.07270114],[.5150862,.58160912],[.30872844,1.21881323],[.24515086,.14967881],[.51023706,1.06200685],[.07866379,.6585868],[-.0878232,1.16749478],[-.0264008,.26371982],[.28017241,.50178042],[.75323275,.23093303],[.58674568,.73984101],[.22198275,1.14041004],[.95474137,.07412665],[.35668103,.17961458],[.42349137,.98360366],[.35506465,.39486697],[.12176724,.09978587],[.18857758,.90377496],[.49515086,1.14183556],[.06357758,.7384155],[-.1029094,1.24732348],[-.041487,.34354852],[.43157327,.07270114],[-.2079741,.85245651],[.2650862,.58160912],[.09859913,1.0905171],[.22359913,1.25587656],[.73814655,.31076173],[.57165948,.81966972],[.46659482,.42480274],[.93965517,.15395535],[-.3378232,1.16749478],[.03017241,.50178042],[-.1363146,1.0106884],[.33674568,.73984101],[.23168103,.34497403],[.70474137,.07412665],[.53825431,.58303463],[.10668103,.17961458],[.37176724,1.09194262],[.06519396,.85388202],[-.059806,.68852256],[.73976293,.42622825],[.30818965,.0228082],[.61476293,.26086879],[-.0932112,.45188748],[-.0264008,1.25587656],[.44665948,.98502917],[-.1514008,1.0905171],[.58135775,.02423371],[.6481681,.82822279],[.21659482,.42480274],[-.4229525,1.20455811],[.05010775,.93371072],[.5231681,.66286334],[.35668103,1.17177132],[.25161637,.77690434],[.72467672,.50605695],[.55818965,1.01496494],[-.0183189,.34497403],[.28825431,.58303463],[-.184806,.85388202],[.12176724,1.09194262],[.18318965,.18816765],[.48976293,.42622825],[.05818965,.0228082],[.32327586,.93513623],[-.1082974,.53171618],[.01670258,.69707564],[-.2747844,1.04062416],[.69127155,.26942187],[.56627155,.10406241],[.0932112,.3749098],[.39978448,.6129704],[-.2764008,1.25587656],[.33135775,.02423371],[.3981681,.82822279],[-.1998922,.93371072],[.10668103,1.17177132],[.16810344,.26799636],[.83943965,.10548792],[.00161637,.77690434],[.47467672,.50605695],[-.1648706,1.28581232],[.30818965,1.01496494],[.67618534,.34925057],[.50969827,.85815856],[-.0668103,.18816765],[.23976293,.42622825],[-.2332974,.69707564],[.07327586,.93513623],[-.3997844,1.20598362],[.44127155,.26942187],[-.0317887,.54026926],[.27478448,.77832985],[.31627155,.10406241],[.10829741,1.28723784],[.14978448,.6129704],[.74784482,.50748247],[.58135775,1.01639045],[-.3232758,.88381778],[.04471982,.21810342],[.3512931,.45616401],[.82435344,.18531663],[.08135775,.02423371],[.11637931,.37633531],[.18318965,1.18032439],[-.2483836,.77690434],[-.0501077,.88524329],[-.4148706,1.28581232],[.42618534,.34925057],[.6244612,.45758953],[-.213362,1.12900594],[.25969827,.85815856],[.56627155,1.09621915],[.46120689,.70135217],[.02963362,.29793212],[.19127155,.26942187],[.02478448,.77832985],[-.1417025,1.28723784],[.33135775,1.01639045],[.2262931,.62152347],[.69935344,.35067608],[.05980603,1.13043145],[.1012931,.45616401],[.53286637,.85958407],[-.0651939,.965072],[.90086206,.1938697],[-.0037715,.06129704],[.30280172,.29935763],[.77586206,.02851025],[.13631465,.80826562],[.609375,.53741823],[.44288793,1.04632621],[.81088362,.38061185],[-.1336206,.37633531],[-.3001077,.88524329],[.06788793,.21952893],[-.0985991,.72843691],[.44127155,1.26157861],[.3744612,.45758953],[.57596982,.30078315],[.21120689,.70135217],[-.0220905,.40627107],[.51778017,.93941277],[.04471982,1.21026016],[.88577586,.27369841],[-.1853448,.65003372],[.28771551,.37918634],[-.3917025,1.28723784],[.48922413,.22237995],[-.1901939,1.13043145],[.28286637,.85958407],[-.3151939,.965072],[.01131465,.97362507],[.05280172,.29935763],[.484375,.70277769],[-.1136853,.80826562],[.359375,.53741823],[-.2801724,1.3171736],[.19288793,1.04632621],[.31788793,1.21168567],[.68588362,.54597131],[.25431034,.14255125],[.08782327,.65145923],[.56088362,.38061185],[.39439655,.88951983],[.02963362,1.29008886],[.76239224,.22380547],[.16433189,.3292934],[.1244612,.45758953],[.79903017,.02993576],[.32596982,.30078315],[.15948275,.80969113],[-.2052801,1.21026016],[-.0070043,1.31859911],[.83405172,.38203736],[-.0705818,.24946469],[.46928879,.78260639],[.30280172,1.29151437],[-.1287715,.88809432],[.23922413,.22237995],[.50431034,1.13470799],[.54579741,.46044055],[.07273706,.73128794],[.74730603,.30363417],[.06788793,1.21168567],[.00431034,.14255125],[.26939655,1.05487929],[-.1621767,.65145923],[.31088362,.38061185],[-.3286637,1.16036722],[.14439655,.88951983],[.03933189,.49465285],[.51239224,.22380547],[.34590517,.73271345],[-.0856681,.3292934],[.38739224,.05844601],[-.2521551,.83820138],[.81896551,.46186606],[.71390086,.06699909],[.11584051,.17248701],[.42241379,.41054761],[-.0905172,.80969113],[.58405172,.38203736],[.11099137,.65288475],[-.0554956,1.16179273],[.41756465,.89094534],[-.2537715,1.05345378],[.42079741,.62580001],[.1875,.33071891],[.61907327,.73413896],[.25431034,1.13470799],[-.1772629,.73128794],[-.34375,1.24019592],[.12931034,.96934854],[.49730603,.30363417],[.69558189,.41197312],[-.1422413,1.08338954],[.33081896,.81254215],[.02424568,.57448156],[.53232758,.65573577],[.32596982,1.29293989],[.26239224,.22380547],[.52747844,1.13613351],[-.3771551,1.00356084],[.09590517,.73271345],[-.0705818,1.24162143],[.40247844,.97077405],[.46390086,.06699909],[.29741379,.57590707],[.77047413,.30505968],[.13092672,1.08481505],[.17241379,.41054761],[.60398706,.81396767],[.00592672,.9194556],[.06734913,.01568063],[.37392241,.25374123],[-.3054956,1.16179273],[.68049568,.49180183],[.36907327,.73413896],[-.0625,.33071891],[.2025862,1.24304695],[.13900862,.17391253],[-.0274784,.68282051],[.51239224,1.21596221],[-.3922413,1.08338954],[-.0856681,1.32145014],[.44881465,.14682779],[.64709051,.25516674],[.28232758,.65573577],[.11584051,1.16464376],[.58890086,.89379637],[.31734913,1.00783737],[-.3205818,1.24162143],[.04741379,.57590707],[-.1190732,1.08481505],[.35398706,.81396767],[-.2440732,.9194556],[.24892241,.41910069],[.72198275,.1482533],[.08243534,.92800867],[.12392241,.25374123],[.38900862,1.16606927],[-.0425646,.76264921],[.43049568,.49180183],[-.2090517,1.2715572],[.55549568,.65716129],[.75700431,.5003549],[.32543103,.09693485],[.63200431,.33499545],[.15894396,.60584283],[.46551724,.84390343],[-.0474137,1.24304695],[.83351293,.17818906],[.62715517,.81539318],[-.4439655,1.1917285],[.09051724,.01710615],[-.0759698,.52601413],[.39709051,.25516674],[.23060344,.76407473],[.46390086,1.05915583],[-.1341594,1.16464376],[.59859913,.09836036],[53879e-8,.20384829],[.06734913,1.00783737],[.54040948,.73698999],[.37392241,1.24589797],[.7419181,.58018361],[.57543103,1.08909159],[-.3690732,1.08481505],[-.0010775,.41910069],[-.1675646,.92800867],[.30549568,.65716129],[.13900862,1.16606927],[-.4590517,1.2715572],[.50700431,.5003549],[.07543103,.09693485],[.34051724,1.00926289],[.38200431,.33499545],[-.091056,.60584283],[.21551724,.84390343],[-.2575431,1.11475082],[.58351293,.17818906],[.11045258,.44903645],[.41702586,.68709705],[.78502155,.02138268],[.14709051,.25516674],[-.1244612,.36920775],[.34859913,.09836036],[.18211206,.60726835],[.65517241,.33642096],[-.1826508,1.00783737],[.015625,1.11617633],[.85668103,.17961458],[.4919181,.58018361],[.69019396,.68852256],[.32543103,1.08909159],[.26185344,.01995717],[.25700431,.5003549],[-.216056,.77120229],[.09051724,1.00926289],[-.3825431,1.28011027],[.39709051,1.24732348],[.93157327,.07270114],[.29202586,.85245651],[.33351293,.17818906],[.7650862,.58160912],[.16702586,.68709705],[-.1395474,.44903645],[53879e-8,1.19600503],[-.3060344,.95794444],[.53502155,.02138268],[.0619612,.29223007],[.36853448,.53029067],[.84159482,.25944328],[.20204741,1.03919865],[.67510775,.76835126],[.50862068,1.27725925],[-.0678879,.60726835],[-.234375,1.11617633],[.13362068,.45046196],[.60668103,.17961458],[-.0328663,.95936995],[.44019396,.68852256],[.80818965,.0228082],[.64170258,.53171618],[.21012931,.12829613],[.27693965,.93228521],[-.1546336,.52886515],[.04364224,.63720411],[.51993534,.10121139],[.7182112,.20955034],[.04202586,.85245651],[.34859913,1.0905171],[-.2494612,1.19600503],[.71659482,.42480274],[.28502155,.02138268],[.07704741,1.20455811],[.11853448,.53029067],[.55010775,.93371072],[-.0479525,1.03919865],[.42510775,.76835126],[.25862068,1.27725925],[.3200431,.37348429],[.79310344,.1026369],[.15355603,.88239227],[.62661637,.61154488],[.46012931,1.12045287],[-.1163793,.45046196],[-.2828663,.95936995],[.19019396,.68852256],[.08512931,.29365558],[.55818965,.0228082],[.86476293,.26086879],[-.0398706,.12829613],[-.0813577,.80256357],[-.2063577,.63720411],[.39170258,.53171618],[.22521551,1.04062416],[.5932112,.3749098],[-.0048491,.48039773],[.53502155,1.01353943],[.4682112,.20955034],[.66971982,.05274396],[.30495689,.45331299],[.97952586,.02565922],[-.1729525,1.20455811],[.30010775,.93371072],[-.2979525,1.03919865],[.50161637,.77690434],[.0700431,.37348429],[.33512931,1.28581232],[-.0964439,.88239227],[.37661637,.61154488],[.21012931,1.12045287],[.10506465,.72558589],[.14655172,.05131845],[.578125,.4547385],[.41163793,.96364649],[.77963362,.29793212],[.18157327,.40342005],[.14170258,.53171618],[-.0247844,1.04062416],[.81627155,.10406241],[.3432112,.3749098],[.64978448,.6129704],[.2182112,.20955034],[.48329741,1.12187838],[.17672413,.88381778],[-.0533405,.32359135],[.41971982,.05274396],[.25323275,.56165194],[-.1115301,.96222097],[.08674568,1.07055993],[.92780172,.13399818],[.0231681,.00142551],[.56303879,.5345672],[-.0765086,1.31432258],[.01831896,.48182324],[.59806034,.88666881],[.08512931,1.28581232],[.69288793,.05416947],[-.1449353,.72558589],[.328125,.4547385],[-.3114224,1.23449387],[.16163793,.96364649],[.4682112,1.20170708],[.52963362,.29793212],[.36314655,.8068401],[-.0684267,.40342005],[.40463362,.13257266],[-.2349137,.91232803],[.19665948,1.31574809],[.13308189,.24661367],[.43965517,.48467427],[-.0732758,.88381778],[.6012931,.45616401],[.16971982,.05274396],[.43480603,.965072],[.00323275,.56165194],[-.0382543,1.23591938],[.63631465,.80826562],[.67780172,.13399818],[.20474137,.40484556],[.03825431,.91375355],[.51131465,.64290616],[-.1600215,.80541459],[-.3265086,1.31432258],[.51454741,.37776082],[.28125,.08267972],[.34806034,.88666881],[.71282327,.48609978],[-.1966594,.83392484],[.47790948,.40627107],[-.3599137,1.07768749],[.11314655,.8068401],[-.0533405,1.31574809],[.41971982,1.0449007],[.31465517,.65003372],[.78771551,.37918634],[.1481681,1.15894171],[-.2834051,.75552165],[.18965517,.48467427],[-.4498922,1.26442964],[.0231681,.99358225],[.62122844,.88809432],[.39116379,.32786788],[.86422413,.0570205],[.18480603,.965072],[.22467672,.83677587],[.69773706,.56592848],[-.0452586,.40484556],[.21982758,1.3171736],[-.2117456,.91375355],[.15625,.24803918],[-.010237,.75694716],[.03125,.08267972],[.46282327,.48609978],[.2963362,.99500776],[.35775862,.0912328],[.66433189,.3292934],[.06627155,.43478133],[.13308189,1.23877041],[.60614224,.96792302],[.74084051,.00712756],[-.3033405,1.31574809],[.06465517,.65003372],[-.1018318,1.15894171],[.37122844,.88809432],[-.2268318,.99358225],[.73922413,.22237995],[.57273706,.73128794],[.14116379,.32786788],[.40625,1.24019592],[-.0253232,.83677587],[.44773706,.56592848],[.28125,1.07483647],[.34267241,.1710615],[.17618534,.67996949],[.64924568,.4091221],[.48275862,.91803008],[.85075431,.25231572],[-.09375,.24803918],[-.260237,.75694716],[.21282327,.48609978],[-.4267241,1.26585515],[.0463362,.99500776],[.10775862,.0912328],[-.0587284,.60014078],[.41433189,.3292934],[.24784482,.83820138],[.88739224,.05844601],[-.1169181,1.23877041],[-.3502155,.94368931],[.72090517,.56735399],[.61584051,.17248701],[.01778017,.27797494],[.49084051,.00712756],[.32435344,.51603554],[.55765086,.81111664],[.39116379,1.32002463],[-.153556,1.26728066],[.52101293,.83962689],[.32273706,.73128794],[.15625,1.24019592],[-.2753232,.83677587],[.09267241,.1710615],[.35775862,1.08338954],[-.0738146,.67996949],[.39924568,.4091221],[.23275862,.91803008],[-.2403017,1.18887747],[.53933189,1.15609068],[.60075431,.25231572],[.43426724,.7612237],[.26778017,1.27013169],[-.0021551,.83820138],[-.1072198,.4433344],[.36584051,.17248701],[-.2737068,.95224238],[.24084051,.00712756],[.19935344,.681395],[.03286637,1.19030298],[.67241379,.41054761],[.50592672,.9194556],[.56734913,.01568063],[.87392241,.25374123],[-.0307112,.12116856],[.70743534,.76264921],[.27586206,.35922916],[.74892241,.08838177],[.109375,.86813714],[.78394396,.44048338],[.04094827,.27940046],[.10775862,1.08338954],[.41433189,1.32145014],[.24245689,.12259408],[.35075431,.25231572],[.54903017,.36065467],[.18426724,.7612237],[-.122306,.5231631],[.01778017,1.27013169],[.49084051,.9992843],[-.2887931,1.03207109],[.38577586,.60441732],[.8588362,.33356993],[.21928879,1.1133253],[.1557112,.04419088],[-.0506465,.681395],[-.2171336,1.19030298],[.25592672,.9194556],[.31734913,.01568063],[.15086206,.52458862],[.62392241,.25374123],[-.015625,1.0334966],[.02586206,.35922916],[.45743534,.76264921],[-.140625,.86813714],[.29094827,1.2715572],[.82543103,.09693485],[.65894396,.60584283],[.22737068,.20242278],[.06088362,.71133076],[.53394396,.44048338],[.73545258,.28367699],[-.0075431,.12259408],[-.1740301,.63150206],[.36584051,1.16464376],[-.2322198,1.27013169],[.50053879,.20384829],[.13577586,.60441732],[-.0307112,1.1133253],[.44234913,.84247792],[.81034482,.17676355],[.17079741,.95651892],[.64385775,.68567154],[.47737068,1.19457952],[.4137931,.1254451],[-.0991379,.52458862],[-.265625,1.0334966],[.20743534,.76264921],[.04094827,1.2715572],[.57543103,.09693485],[-.0641163,.87669022],[-.0226293,.20242278],[.40894396,.60584283],[-.1891163,.71133076],[.28394396,.44048338],[-.3556034,1.22023875],[.24245689,1.11475082],[.61045258,.44903645],[.17887931,.0456164],[.95851293,.01282961],[.01239224,.55452438],[.48545258,.28367699],[.31896551,.79258498],[.15247844,1.30149296],[.6869612,.12687061],[.25053879,.20384829],[.08405172,.71275627],[-.2807112,1.1133253],[.45204741,.04704191],[.75862068,.28510251],[-.0792025,.95651892],[.39385775,.68567154],[.22737068,1.19457952],[.59536637,.52886515],[.1637931,.1254451],[.42887931,1.03777314],[-.0026939,.63435308],[.19881465,.4775467],[.671875,.20669932],[-.3141163,.87669022],[-.0075431,1.11475082],[.87338362,.04989293],[.66702586,.68709705],[-.2790948,1.22879182],[.50053879,1.19600503],[.23545258,.28367699],[.19396551,.95794444],[.06896551,.79258498],[-.0975215,1.30149296],[.39547413,.80113805],[-.0360991,.397718],[.4369612,.12687061],[.74353448,.36493121],[.27047413,.6357786],[.57704741,.87383919],[.10398706,1.14468658],[.04040948,.07555216],[-.1659482,.71275627],[.03556034,.55594989],[.50862068,.28510251],[-.1309267,1.06485788],[.23706896,.39914351],[.71012931,.12829613],[.54364224,.63720411],[.11206896,.23378405],[.17887931,1.03777314],[.48545258,1.27583374],[-.0511853,.4775467],[.421875,.20669932],[-.2176724,.98645469],[.25538793,.7156073],[.62338362,.04989293],[.45689655,.55880092],[-.0560344,.95794444],[.25053879,1.19600503],[.61853448,.53029067],[.45204741,1.03919865],[.02047413,.6357786],[-.0210129,1.31004604],[-.1460129,1.14468658],[.65355603,.88239227],[.6950431,.20812483],[-.2510775,.7498196],[.52855603,.71703281],[.09698275,.31361276],[.36206896,1.2259408],[.22198275,.47897222],[.05549568,.9878802],[.89655172,.05131845],[.42349137,.32216583],[.73006465,.56022643],[.29849137,.15680638],[-.3809267,1.06485788],[-.1794181,.9080515],[.29364224,.63720411],[.49515086,.48039773],[.06357758,.07697767],[.13038793,.88096676],[-.1029094,.58588566],[.4369612,1.11902735],[.57165948,.15823189],[-.2661637,.8296483],[.20689655,.55880092],[.04040948,1.0677089],[.40840517,.40199454],[.88146551,.13114715],[.2419181,.91090252],[.71497844,.64005513],[-.3960129,1.14468658],[-.0280172,.47897222],[.27855603,.71703281],[-.1945043,.9878802],[.11206896,1.2259408],[.64655172,.05131845],[.17349137,.32216583],[.00700431,.83107382],[.48006465,.56022643],[.31357758,1.06913441],[-.1179956,.66571436],[.04849137,.15680638],[.68157327,.40342005],[.25,0],[.08351293,.50890798],[.55657327,.23806059],[.75808189,.08125421],[.07866379,.98930571],[.75323275,.56165194],[-.1514008,.42907928],[.32165948,.15823189],[.38846982,.96222097],[.58674568,1.07055993],[-.2095905,1.0677089],[.5231681,.00142551],[.15840517,.40199454],[.42349137,1.31432258],[-.0080818,.91090252],[.46497844,.64005513],[.29849137,1.14896312],[.66648706,.48324875],[.5,.99215674],[-.0765086,.32216583],[-.2429956,.83107382],[.06357758,1.06913441],[.43157327,.40342005],[-.041487,.67426744],[0,0],[-.2079741,1.18317542],[-.166487,.50890798],[-.3329741,1.01781596],[.30657327,.23806059],[.1400862,.74696858],[.63308189,.24661367],[.2650862,.91232803],[.73814655,.64148065],[.03502155,.3521016],[.50808189,.08125421],[.34159482,.59016219],[.81465517,.31931481],[.17510775,1.09907018],[.33674568,1.07055993],[.2731681,.00142551],[.10668103,.51033349],[.17349137,1.31432258],[-.059806,1.01924148],[.78125,.08267972],[.30818965,.35352711],[.61476293,.59158771],[.41648706,.48324875],[.25,.99215674],[-.2230603,1.26300412],[.45150862,.83535036],[.0150862,.91232803],[.32165948,1.15038863],[.38308189,.24661367],[.21659482,.75552165],[.68965517,.48467427],[.05010775,1.26442964],[.09159482,.59016219],[.5231681,.99358225],[-.0748922,1.09907018],[-.0134698,.19529522],[-.1799568,.7042032],[.29310344,.43335581],[.12661637,.9422638],[.76616379,.16250843],[.59967672,.67141641],[.43318965,1.18032439],[.96767241,.00570205],[.80118534,.51461003],[-.1433189,.51033349],[.53125,.08267972],[.05818965,.35352711],[.36476293,.59158771],[-.1082974,.86243509],[-.4730603,1.26300412],[.25969827,.19672073],[.56627155,.43478133],[.13469827,.03136127],[.20150862,.83535036],[.50808189,1.07341095],[.64278017,.11261549],[-.0334051,.75552165],[-.1998922,1.26442964],[.2731681,.99358225],[-.3248922,1.09907018],[.64116379,.32786788],[.00161637,1.10762325],[.04310344,.43335581],[.47467672,.83677587],[-.1233836,.9422638],[.34967672,.67141641],[.67618534,.67996949],[.24461206,.27654943],[.71767241,.00570205],[.078125,.78545742],[.55118534,.51461003],[.38469827,1.02351801],[.75269396,.35780365],[.00969827,.19672073],[.31627155,.43478133],[-.1567887,.70562871],[.14978448,.94368931],[-.3232758,1.2145367],[.21120689,.03991435],[.51778017,.27797494],[.99084051,.00712756],[-.0802801,.38346287],[-.0134698,1.18745196],[.45959051,.91660457],[.49461206,1.26870617],[-.0818965,.59871527],[-.2483836,1.10762325],[.59267241,.1710615],[.42618534,.67996949],[-.0053879,.27654943],[.25969827,1.18887747],[-.171875,.78545742],[.30118534,.51461003],[-.338362,1.2943654],[.13469827,1.02351801],[.19612068,.11974305],[.02963362,.62865103],[.50269396,.35780365],[.33620689,.86671163],[.70420258,.20099727],[-.1002155,.94368931],[.26778017,.27797494],[-.2052801,.54882233],[.1012931,.78688293],[.57435344,.51603554],[-.0651939,1.29579091],[-.3717672,1.05773031],[.46928879,.12116856],[.30280172,.63007655],[.77586206,.35922916],[.609375,.86813714],[.17780172,.46471709],[.24461206,1.26870617],[.85237068,.03706332],[.01454741,.70847974],[.68911637,.28082597],[.00969827,1.18887747],[.14439655,.228082],[.68426724,.7612237],[-.2203663,.62865103],[.51778017,1.27013169],[-.3868534,1.13755902],[.08620689,.86671163],[.39278017,1.10477223],[.21120689,1.03207109],[.45420258,.20099727],[.76077586,.43905786],[-.1853448,.98075264],[.59428879,.94796585],[.28771551,.70990525],[.12122844,1.21881323],[.48922413,.55309887],[.05765086,.14967881],[-.1487068,.78688293],[-.3151939,1.29579091],[.05280172,.63007655],[.52586206,.35922916],[-.1136853,1.13898453],[-.0721982,.46471709],[.359375,.86813714],[.72737068,.20242278],[.56088362,.71133076],[.12931034,.30791071],[.60237068,.03706332],[-.0371767,.81681869],[-.4019396,1.21738772],[.33081896,.15110433],[.63739224,.38916492],[.27262931,.78973395],[-.2720905,.73698999],[.40247844,.30933622],[.46928879,1.1133253],[.03771551,.70990525],[.34428879,.94796585],[-.1287715,1.21881323],[.71228448,.28225148],[.23922413,.55309887],[.54579741,.79115947],[.11422413,.38773941],[.37931034,1.30006745],[.07273706,1.06200685],[.9137931,.1254451],[.74730603,.63435308],[-.1573275,.50178042],[.31573275,.23093303],[-.3636853,1.13898453],[.14924568,.73984101],[.51724137,.07412665],[.82381465,.31218725],[-.1621767,.98217815],[.31088362,.71133076],[-.2871767,.81681869],[.14439655,1.22023875],[.61745689,.94939136],[.51239224,.55452438],[.08081896,.15110433],[.34590517,1.06343236],[-.0856681,.66001231],[.38739224,.38916492],[.45420258,1.19315401],[-.1438577,1.29864194],[.58890086,.23235854],[.22413793,.63292757],[-.0091594,.33784647],[.05765086,1.14183556],[.5307112,.87098817],[.1875,.66143782],[-.0107758,.55309887],[-.1772629,1.06200685],[.12931034,1.30006745],[-.3022629,.8966474],[.6637931,.1254451],[.86206896,.23378405],[.49730603,.63435308],[.06573275,.23093303],[.33081896,1.14326107],[.37230603,.46899363],[-.1007543,.73984101],[.02424568,.90520047],[.26724137,.07412665],[.10075431,.58303463],[.57381465,.31218725],[-.1056034,1.22023875],[.77532327,.15538086],[.09590517,1.06343236],[.56896551,.79258498],[.40247844,1.30149296],[-.1341594,.50320593],[.33890086,.23235854],[-.3006465,1.01211391],[.17241379,.74126653],[.00592672,1.25017451],[.54040948,.07555216],[.37392241,.58446014],[-.0576508,.18104009],[.48221982,.71418179],[.84698275,.31361276],[.31573275,1.22308977],[.68049568,.82252074],[.51724137,1.06628339],[-.2257543,.90520047],[.08081896,1.14326107],[.44881465,.4775467],[.21551724,.1824656],[.28232758,.98645469],[-.1492456,.58303463],[.01724137,.07412665],[-.3157327,1.09194262],[.15732758,.82109523],[.05226293,.42622825],[.52532327,.15538086],[-.1142241,.93513623],[.3588362,.66428885],[.19234913,1.17319683],[.83189655,.39344146],[.35398706,1.14468658],[-.0775862,.74126653],[-.2440732,1.25017451],[.29040948,.07555216],[.12392241,.58446014],[.59698275,.31361276],[-.0425646,1.09336813],[.43049568,.82252074],[.32543103,.42765376],[.79849137,.15680638],[.63200431,.66571436],[.20043103,.26229431],[.26724137,1.06628339],[.03394396,.77120229],[.40193965,.10548792],[.70851293,.34354852],[-.0344827,.1824656],[.03232758,.98645469],[.23060344,1.09479364],[.16702586,.02565922],[.70689655,.55880092],[.54040948,1.0677089],[.1088362,.66428885],[-.0576508,1.17319683],[.41540948,.90234945],[.31034482,.50748247],[.78340517,.23663508],[.14385775,1.01639045],[.6169181,.74554306],[.45043103,1.25445105],[-.1260775,.58446014],[-.2925646,1.09336813],[.07543103,.42765376],[.54849137,.15680638],[.38200431,.66571436],[-.0495689,.26229431],[.21551724,1.17462234],[-.091056,.93656175],[.75,0],[.27693965,.27084738],[.58351293,.50890798],[.15193965,.10548792],[.41702586,1.01781596],[.45851293,.34354852],[.52532327,1.14753761],[-.0145474,.61439591],[.66002155,.18674214],[.42510775,.10691344],[.4919181,.91090252],[.06034482,.50748247],[.25862068,.61582142],[-.1061422,1.01639045],[.3669181,.74554306],[.20043103,1.25445105],[.73491379,.0798287],[.09536637,.85958407],[.56842672,.58873668],[.40193965,1.09764467],[.76993534,.4319303],[-.341056,.93656175],[-.0344827,1.17462234],[.5,0],[.02693965,.27084738],[.33351293,.50890798],[-.1395474,.77975537],[.16702586,1.01781596],[.6400862,.74696858],[.47359913,1.25587656],[-.3060344,1.28866335],[.53502155,.3521016],[.36853448,.86100958],[.41002155,.18674214],[-.0630387,.45758953],[.24353448,.69565012],[-.2295258,.96649751],[.61153017,.02993576],[.17510775,.10691344],[.01185344,.35067608],[.21012931,.45901504],[-.1546336,.85958407],[.68318965,.18816765],[.15193965,1.09764467],[.88469827,.03136127],[.51993534,.4319303],[.08836206,.02851025],[-.119612,1.21168567],[.35344827,.94083828],[-.0829741,1.01781596],[.28502155,.3521016],[-.1880387,.62294898],[.11853448,.86100958],[.59159482,.59016219],[.42510775,1.09907018],[-.0064655,.69565012],[-.3545258,1.13185697],[.48653017,.19529522],[.3200431,.7042032],[.36153017,.02993576],[.79310344,.43335581],[.1950431,.53884374],[.66810344,.26799636],[.02855603,1.04775173],[.62661637,.9422638],[-.1115301,.30078315],[-.2780172,.80969113],[.39655172,.38203736],[.86961206,.11118997],[.703125,.62009796],[-.0398706,.45901504],[.02693965,1.26300412],[-.2063577,.96792302],[.16163793,.30220866],[.63469827,.03136127],[.4682112,.54026926],[-.369612,1.21168567],[.10344827,.94083828],[.41002155,1.17889888],[.77801724,.51318452],[-.1266163,.38061185],[.61153017,1.0220925],[.30495689,.7840319],[.13846982,1.29293989],[-.1314655,.86100958],[-.0915948,.73271345],[.0700431,.7042032],[.54310344,.43335581],[-.0964439,1.21311118],[-.0549568,.53884374],[.37661637,.9422638],[-.2214439,1.04775173],[.58297413,.30505968],[.74461206,.27654943],[.578125,.78545742],[.14655172,.38203736],[.61961206,.11118997],[-.0199353,.89094534],[.453125,.62009796],[.28663793,1.12900594],[.41163793,1.2943654],[.34806034,.22523098],[.65463362,.46329158],[-.088362,.30220866],[.38469827,.03136127],[-.2548491,.81111664],[.2182112,.54026926],[-.4213362,1.32002463],[.89278017,.11261549],[.41971982,.38346287],[.05495689,.7840319],[-.1783405,.4889508],[-.1115301,1.29293989],[.25323275,.89237086],[.72952586,.35637813],[.49622844,.06129704],[.56303879,.86528612],[.13146551,.46186606],[.80603448,.0342123],[.33297413,.30505968],[-.3464439,1.21311118],[.16648706,.81396767],[.84105603,.3863139],[-.1034482,.38203736],[.328125,.78545742],[-.2699353,.89094534],[.16163793,1.2943654],[.09806034,.22523098],[.36314655,1.13755902],[-.0684267,.73413896],[.40463362,.46329158],[-.2349137,1.24304695],[.23814655,.97219956],[.71120689,.70135217],[.60614224,.3064852],[.43965517,.81539318],[.00808189,.41197312],[.54795258,.94511482],[.16971982,.38346287],[.00323275,.89237086],[.67780172,.46471709],[.20474137,.73556448],[.51131465,.97362507],[-.1600215,1.13613351],[.87931034,.30791071],[.28125,.41339864],[.34806034,1.21738772],[.08297413,.30505968],[-.0835129,.81396767],[.59105603,.3863139],[.11799568,.65716129],[-.0484913,1.16606927],[.42456896,.89522188],[-.088362,1.2943654],[.58620689,.86671163],[-.0118534,.97219956],[.04956896,.0684246],[-.1169181,.57733258],[.35614224,.3064852],[-.2834051,1.08624057],[.18965517,.81539318],[.66271551,.54454579],[.49622844,1.05345378],[.55765086,.14967881],[.39116379,.6585868],[-.0404094,.25516674],[-.2068965,.76407473],[.26616379,.49322734],[.33297413,1.29721642],[-.2467672,.89237086],[.42780172,.46471709],[.46767241,.33642096],[-.2117456,1.24447246],[.94073275,.06557357],[.46282327,.81681869],[.03125,.41339864],[.09806034,1.21738772],[.23275862,.25659226],[-.1320043,.65716129],[-.2984913,1.16606927],[.17456896,.89522188],[.54256465,.22950752],[.37607758,.7384155],[.20959051,1.24732348],[-.0603448,.81539318],[.30765086,.14967881],[-.3318965,.92943418],[.14116379,.6585868],[-.0253232,1.16749478],[.01616379,.49322734],[.61422413,.38773941],[-.1503232,1.00213532],[.44773706,.8966474],[.34267241,.50178042],[.81573275,.23093303],[.64924568,.73984101],[.21767241,.33642096],[.48275862,1.248749],[.05118534,.84532894],[.69073275,.06557357],[.52424568,.57448156],[.41918103,.17961458],[.72575431,.41767518],[-.0172413,.25659226],[.24784482,1.16892029],[-.1837284,.76550024],[-.3502155,1.27440822],[.18426724,.09978587],[.49084051,.33784647],[.55765086,1.14183556],[.12607758,.7384155],[.32435344,.84675446],[-.0404094,1.24732348],[.80064655,.31076173],[.16109913,1.0905171],[.63415948,.81966972],[-.1088362,.6585868],[-.2753232,1.16749478],[.09267241,.50178042],[.56573275,.23093303],[-.0738146,1.0106884],[-.0323275,.33642096],[.23275862,1.248749],[-.1988146,.84532894],[.39924568,.73984101],[.76724137,.07412665],[.60075431,.58303463],[.16918103,.17961458],[.43426724,1.09194262],[.47575431,.41767518],[.00269396,.68852256],[.30926724,.92658316],[-.1637931,1.19743055],[.37068965,.0228082],[.67726293,.26086879],[.51077586,.76977678],[.24084051,.33784647],[.50592672,1.25017451],[-.3987068,1.11760184],[.07435344,.84675446],[.44234913,.18104009],[.27586206,.68994807],[.74892241,.41910069],[-.0889008,1.0905171],[.5856681,.66286334],[.35237068,.36778224],[.41918103,1.17177132],[-.3238146,1.0106884],[-.0172413,1.248749],[.35075431,.58303463],[.65732758,.82109523],[.18426724,1.09194262],[-.247306,.68852256],[.05926724,.92658316],[-.4137931,1.19743055],[.12068965,.0228082],[.38577586,.93513623],[.42726293,.26086879],[-.0457974,.53171618],[.26077586,.76977678],[.7338362,.49892939],[.09428879,1.27868476],[.56734913,1.00783737],[-.2122844,1.04062416],[.62877155,.10406241],[.46228448,.6129704],[.19234913,.18104009],[.02586206,.68994807],[-.140625,1.19885606],[-.0792025,.29508109],[.39385775,.02423371],[.22737068,.53314169],[.70043103,.26229431],[.53394396,.77120229],[.16918103,1.17177132],[.36745689,1.28011027],[.90193965,.10548792],[.10560344,.1026369],[.30387931,.21097585],[-.0657327,1.09194262],[.30226293,.42622825],[.06896551,.13114715],[.13577586,.93513623],[.6088362,.66428885],[.44234913,1.17319683],[.01077586,.76977678],[-.1557112,1.27868476],[.37877155,.10406241],[-.0942887,.3749098],[.21228448,.6129704],[.68534482,.34212301],[.04579741,1.12187838],[.51885775,.85103099],[-.2607758,.88381778],[.4137931,.45616401],[.88685344,.18531663],[.72036637,.69422461],[-.2241379,.68994807],[-.0177801,.05274396],[-.390625,1.19885606],[.14385775,.02423371],[-.0226293,.53314169],[.45043103,.26229431],[-.1891163,1.04204968],[.28394396,.77120229],[.17887931,.37633531],[.65193965,.10548792],[.48545258,.61439591],[.05387931,.21097585],[.12068965,1.01496494],[-.1126077,.71988384],[.31896551,1.12330389],[.25538793,.05416947],[.5619612,.29223007],[.39870689,.53599272],[.56034482,.50748247],[-.0792025,1.28723784],[-.0377155,.6129704],[.39385775,1.01639045],[-.2042025,1.12187838],[.59536637,.85958407],[.1637931,.45616401],[.63685344,.18531663],[-.0026939,.965072],[.47036637,.69422461],[.30387931,1.2031326],[.83836206,.02851025],[.671875,.53741823],[.24030172,.13399818],[.50538793,1.04632621],[-.2376077,.88524329],[.23545258,.61439591],[.06896551,1.12330389],[.91002155,.18674214],[.00538793,.05416947],[-.0360991,.72843691],[-.1610991,.56307746],[.3119612,.29223007],[-.3275862,1.07198544],[.4369612,.45758953],[.27047413,.96649751],[.51346982,.13542369],[.14870689,.53599272],[.34698275,.64433167],[.82327586,.10833895],[-.3292025,1.28723784],[.27855603,.05559498],[.34536637,.85958407],[.11206896,.56450297],[-.2526939,.965072],[.05387931,1.2031326],[.58836206,.02851025],[.78663793,.1368492],[-.0511853,.80826562],[-.0096982,.13399818],[-.2176724,1.3171736],[-.1761853,.64290616],[.421875,.53741823],[.25538793,1.04632621],[.62338362,.38061185],[.45689655,.88951983],[.02532327,.48609978],[.49838362,.21525239],[-.1810344,1.12330389],[.69989224,.05844601],[.49353448,.69565012],[-.4525862,1.2373449],[.32704741,1.20455811],[.02047413,.96649751],[.6950431,.53884374],[.26346982,.13542369],[.52855603,1.04775173],[.22198275,.80969113],[.09698275,.64433167],[-.0080818,.24946469],[.77155172,.2166779],[.29849137,.48752529],[.60506465,.72558589],[-.0662715,.88809432],[.97306034,.05987152],[.44181034,.96934854],[.06357758,.40769659],[.53663793,.1368492],[-.3011853,.80826562],[.60344827,.94083828],[-.4676724,1.3171736],[.00538793,1.04632621],[.37338362,.38061185],[-.2661637,1.16036722],[.20689655,.88951983],[.67995689,.61867245],[.08189655,.72416038],[.51346982,1.12758043],[-.0231681,.3292934],[.44989224,.05844601],[-.1896551,.83820138],[.28340517,.56735399],[.75646551,.29650661],[.48491379,.41054761],[.27855603,1.04775173],[-.1530172,.64433167],[-.1945043,1.31859911],[.48006465,.89094534],[.52155172,.2166779],[.04849137,.48752529],[-.1179956,.99643327],[.72306034,.05987152],[.25,.33071891],[.55657327,.56877951],[.125,.16535945],[.19181034,.96934854],[.3900862,1.07768749],[.32650862,.00855307],[.22683189,1.32145014],[.32165948,.4889508],[-.0431034,.88951983],[.15840517,.73271345],[.63146551,.46186606],[-.0080818,1.24162143],[.03340517,.56735399],[.46497844,.97077405],[-.1330818,1.07626198],[.66648706,.81396767],[-.2381465,.681395],[.23491379,.41054761],[.06842672,.9194556],[.70797413,.13970023],[.54148706,.64860821],[.43642241,.25374123],[.74299568,.49180183],[.57650862,1.00070981],[-.3679956,.99643327],[.53663793,1.12900594],[.47306034,.05987152],[0,.33071891],[.30657327,.56877951],[-.166487,.83962689],[.1400862,1.07768749],[.20150862,.17391253],[.50808189,.41197312],[.07650862,.00855307],[.34159482,.92088111],[-.0899784,.51746105],[-.0231681,1.32145014],[-.2564655,1.02636904],[.58459051,.08980729],[.65140086,.89379637],[.41810344,.59871527],[-.2580818,1.24162143],[.34967672,.00997858],[.41648706,.81396767],[-.0150862,.41054761],[-.1815732,.9194556],[.125,1.15751619],[.18642241,.25374123],[.45150862,1.16606927],[.01993534,.76264921],[.49299568,.49180183],[.32650862,1.00070981],[-.1465517,1.2715572],[.69450431,.33499545],[.52801724,.84390343],[-.1099137,1.07768749],[-.0484913,.17391253],[-.2149784,.68282051],[.25808189,.41197312],[-.3814655,1.1917285],[.09159482,.92088111],[.56465517,.65003372],[-.0134698,.52601413],[.45959051,.25516674],[.29310344,.76407473],[.33459051,.08980729],[.76616379,.49322734],[-.3049568,.86956266],[.16810344,.59871527],[.59967672,1.00213532],[.66109913,.09836036],[.36961206,.44190889],[.84267241,.1710615],[.09967672,.00997858],[.13469827,.36208019],[.20150862,1.16606927],[-.2300646,.76264921],[.07650862,1.00070981],[-.3965517,1.2715572],[.44450431,.33499545],[.75107758,.57305604],[.27801724,.84390343],[.58459051,1.08196403],[-.1950431,1.11475082],[.47952586,.68709705],[-.1584051,.92088111],[.20959051,.25516674],[.04310344,.76407473],[.51616379,.49322734],[-.1233836,1.27298271],[.34967672,1.00213532],[.41109913,.09836036],[.24461206,.60726835],[.71767241,.33642096],[.55118534,.84532894],[.11961206,.44190889],[.18642241,1.24589797],[-.046875,.95081687],[.91918103,.17961458],[.01454741,.04704191],[.32112068,.28510251],[.79418103,.01425512],[.62769396,.5231631],[.46120689,1.03207109],[-.1153017,.36208019],[.08620689,.2052738],[.62607758,.7384155],[.45959051,1.24732348],[.02801724,.84390343],[.39601293,.17818906],[.22952586,.68709705],[.7025862,.41624966],[.06303879,1.19600503],[.53609913,.92515765],[-5387e-7,.12687061],[-.3733836,1.27298271],[.16109913,.09836036],[-.0053879,.60726835],[-.171875,1.11617633],[-.1303879,.44190889],[.30118534,.84532894],[-.296875,.95081687],[.19612068,.45046196],[.66918103,.17961458],[.02963362,.95936995],[.07112068,.28510251],[.54418103,.01425512],[-.0953663,.79401049],[.37769396,.5231631],[-.2618534,1.30291847],[.50269396,.68852256],[.33620689,1.19743055],[.27262931,.12829613],[.57920258,.36635672],[.41271551,.87526471],[.03771551,.04846742],[.34428879,.28652802],[.41109913,1.0905171],[.17780172,.795436],[-.1287715,.55737541],[-.1869612,1.19600503],[.54579741,.12972164],[.65409482,.25944328],[.85237068,.36778224],[.01454741,1.03919865],[.48760775,.76835126],[.32112068,1.27725925],[.68911637,.61154488],[.2575431,.20812483],[.52262931,1.12045287],[-.421875,1.11617633],[-.2203663,.95936995],[.25269396,.68852256],[.55926724,.92658316],[.08620689,1.19743055],[.45420258,.53171618],[.02262931,.12829613],[.28771551,1.04062416],[-.1438577,.63720411],[.32920258,.36635672],[-.3103448,1.14611209],[.16271551,.87526471],[.05765086,.48039773],[.5307112,.20955034],[.36422413,.71845833],[.09428879,.28652802],[-.0721982,.795436],[.29579741,.12972164],[.12931034,.63862962],[.60237068,.36778224],[-.2354525,1.03919865],[.07112068,1.27725925],[.80387931,.21097585],[.43911637,.61154488],[.20581896,.31646378],[.27262931,1.12045287],[-.1589439,.71703281],[.04256465,.56022643],[.515625,.28937904],[.71713362,.13257266],[-.4353448,1.31147155],[.03771551,1.04062416],[.34428879,1.27868476],[-.0872844,.87526471],[.71228448,.6129704],[.2807112,.20955034],[.54579741,1.12187838],[.58728448,.44761094],[-.3588362,.98930571],[.42079741,.95651892],[.23922413,.88381778],[.11422413,.71845833],[-.0522629,1.22736631],[.48221982,.05274396],[.7887931,.29080456],[.31573275,.56165194],[.62230603,.79971254],[.2575431,1.20028157],[.45581896,1.30862052],[.0856681,.00142551],[-.1206896,.63862962],[.39224137,.23948611],[-.2871767,1.14753761],[.55387931,.21097585],[-.0856681,.99073122],[.38739224,.71988384],[.02262931,1.12045287],[.22090517,1.22879182],[.58890086,.56307746],[.15732758,.1596574],[.69719827,.6927991],[-.2074353,.56022643],[.5307112,1.20170708],[-.3739224,1.06913441],[.09913793,.79828703],[.46713362,.13257266],[-.1724137,.91232803],[.30064655,.64148065],[.77370689,.37063326],[.29579741,1.12187838],[-.3022629,1.22736631],[.23221982,.05274396],[.49730603,.965072],[.5387931,.29080456],[.06573275,.56165194],[.37230603,.79971254],[-.0592672,.39629249],[.20581896,1.30862052],[.43049568,.16108291],[-.1007543,1.07055993],[.74030172,.13399818],[.26724137,.40484556],[.57381465,.64290616],[.14224137,.23948611],[.40732758,1.15181414],[-.0242456,.74839409],[.34375,.08267972],[.65032327,.32074032],[.13739224,.71988384],[.8119612,.29223007],[.17241379,1.07198544],[.64547413,.80113805],[.1088362,.00285102],[-.0576508,.511759],[.41540948,.24091162],[.05064655,.64148065],[.48221982,1.0449007],[-.1158405,1.15038863],[.25215517,.48467427],[.72521551,.21382688],[.0856681,.99358225],[.55872844,.72273486],[.76023706,.56592848],[-.3507543,1.07055993],[-.044181,1.30862052],[.01724137,.40484556],[.32381465,.64290616],[-.1492456,.91375355],[.15732758,1.15181414],[-.2742456,.74839409],[.63038793,.88096676],[-.4407327,1.25730207],[.52532327,.48609978],[.05226293,.75694716],[.09375,.08267972],[-.072737,.59158771],[.40032327,.32074032],[-.2392241,1.10049569],[.2338362,.8296483],[.3588362,.99500776],[.60183189,.16393394],[.43534482,.67284192],[-.0775862,1.07198544],[.16540948,.24091162],[.43049568,1.15323966],[-.1061422,.35495262],[.3669181,.08410524],[.20043103,.59301322],[-.1643318,.99358225],[.14224137,1.23164285],[.875,.16535945],[.51023706,.56592848],[.34375,1.07483647],[.54525862,.91803008],[-.0926724,1.15181414],[-.197737,.75694716],[.27532327,.48609978],[-.3642241,1.26585515],[.1088362,.99500776],[.58189655,.72416038],[-.0161637,.8296483],[.41540948,1.23306836],[.47683189,.3292934],[.94989224,.05844601],[.31034482,.83820138],[-.1212284,.43478133],[.35183189,.16393394],[-.2877155,.94368931],[.18534482,.67284192],[.01885775,1.18174991],[.65840517,.40199454],[.78340517,.56735399],[.08028017,.27797494],[.55334051,.00712756],[.38685344,.51603554],[.85991379,.24518816],[.69342672,.75409614],[.18049568,1.15323966],[.1169181,.08410524],[-.0495689,.59301322],[-.216056,1.1019212],[.625,.16535945],[.15193965,.43620684],[.45851293,.67426744],[.09375,1.07483647],[.82650862,.00855307],[.22844827,.114041],[.29525862,.91803008],[.22683189,.3292934],[-.0064655,.0342123],[.06034482,.83820138],[.3669181,1.07626198],[-.0646551,.67284192],[-.2311422,1.18174991],[.73491379,.41054761],[.30334051,.00712756],[.09536637,1.19030298],[.13685344,.51603554],[.60991379,.24518816],[-.0296336,1.02494353],[.44342672,.75409614],[.56842672,.9194556],[.27693965,1.26300412],[.33836206,.35922916],[.81142241,.08838177],[.64493534,.59728976],[.47844827,1.10619774],[-.0980603,.43620684],[-.2645474,.94511482],[.57650862,.00855307],[.10344827,.27940046],[.41002155,.51746105],[.88308189,.24661367],[.24353448,1.02636904],[-.0215517,.114041],[-.0630387,.78830844],[.61153017,.36065467],[.71982758,.49037632],[.08028017,1.27013169],[.55334051,.9992843],[.01185344,.681395],[-.1546336,1.19030298],[.31842672,.9194556],[-.2796336,1.02494353],[.51993534,.76264921],[.08836206,.35922916],[.35344827,1.2715572],[-.078125,.86813714],[.39493534,.59728976],[.22844827,1.10619774],[.28987068,.20242278],[.12338362,.71133076],[.59644396,.44048338],[.42995689,.94939136],[.16002155,.51746105],[-.0064655,1.02636904],[-.4795258,1.29721642],[.05495689,.12259408],[.36153017,.36065467],[.83459051,.08980729],[.1950431,.86956266],[.66810344,.59871527],[-.1697198,1.27013169],[-.1115301,.63150206],[.56303879,.20384829],[.43803879,.03848883],[.50484913,.84247792],[.27155172,.54739682],[-.0350215,.30933622],[.74784482,.0114041],[.94612068,.11974305],[-.4046336,1.19030298],[.26993534,.76264921],[.10344827,1.2715572],[-.328125,.86813714],[-.0215517,1.10619774],[.03987068,.20242278],[.30495689,1.11475082],[-.1266163,.71133076],[.34644396,.44048338],[.65301724,.67854397],[-.2931034,1.22023875],[.48653017,1.18745196],[.17995689,.94939136],[.54795258,.28367699],[.38146551,.79258498],[.11153017,.36065467],[.15140086,.23235854],[-.0549568,.86956266],[.31303879,.20384829],[.14655172,.71275627],[.18803879,.03848883],[-.0199353,1.22166426],[.02155172,.54739682],[.61961206,.44190889],[.453125,.95081687],[.82112068,.28510251],[.65463362,.79401049],[.22306034,.39059044],[.69612068,.11974305],[-.1417025,.79115947],[.53286637,.3635057],[-.0118534,.31076173],[.05495689,1.11475082],[-.1783405,.81966972],[.72952586,.68709705],[.29795258,.28367699],[.49622844,.39201595],[-.3415948,1.06343236],[.13146551,.79258498],[.43803879,1.03064558],[-.0350215,1.30149296],[.80603448,.36493121],[.33297413,.6357786],[.63954741,.87383919],[-.2650862,.74126653],[-.1034482,.71275627],[.40948275,.31361276],[-.2699353,1.22166426],[.203125,.95081687],[.57112068,.28510251],[-.0684267,1.06485788],[-.0269396,.39059044],[.40463362,.79401049],[-.1934267,.89949842],[.23814655,1.30291847],[.60614224,.63720411],[.17456896,.23378405],[.00808189,.74269204],[.48114224,.47184465],[-.356681,1.14326107],[.11637931,.87241368],[.31465517,.98075264],[.68265086,.31503827],[.79094827,.44475991],[.15140086,1.22451528],[-.2268318,.66286334],[.31303879,1.19600503],[.24622844,.39201595],[-.2850215,1.30149296],[.44773706,.23520957],[.08297413,.6357786],[.38954741,.87383919],[-.0835129,1.14468658],[.7575431,.20812483],[.59105603,.71703281],[.6325431,.04276537],[.42456896,1.2259408],[.15948275,.31361276],[-.0070043,.82252074],[.36099137,.15680638],[.66756465,.39486697],[.15463362,.79401049],[-.0118534,1.30291847],[.82920258,.36635672],[-.075431,.23378405],[.18965517,1.14611209],[-.2419181,.74269204],[.23114224,.47184465],[-.4084051,1.25160002],[.66271551,.87526471],[.12607758,.07697767],[-.0404094,.58588566],[.43265086,.31503827],[.26616379,.82394625],[.9057112,.04419088],[-.0985991,1.22451528],[.73922413,.55309887],[.63415948,.15823189],[.03609913,.26371982],[.57596982,.79686152],[.40948275,1.3057695],[.03125,.74411755],[-.3335129,1.14468658],[.70581896,.31646378],[.34105603,.71703281],[.53933189,.82537177],[.17456896,1.2259408],[-.2570043,.82252074],[-.1320043,.9878802],[.11099137,.15680638],[.37607758,1.06913441],[-.0554956,.66571436],[.41756465,.39486697],[.25107758,.90377496],[-.2219827,1.17462234],[.14601293,.50890798],[.61907327,.23806059],[.4525862,.74696858],[.18265086,.31503827],[.44773706,1.22736631],[.01616379,.82394625],[-.0889008,.42907928],[.38415948,.15823189],[.21767241,.66713987],[.69073275,.39629249],[.52424568,.90520047],[.15948275,1.3057695],[.5856681,.00142551],[.89224137,.23948611],[-.0123922,.10691344],[.29418103,.34497403],[.36099137,1.14896312],[-.1837284,1.09621915],[.29256465,.56022643],[.05926724,.26514533],[.12607758,1.06913441],[.43265086,1.30719501],[.00107758,.90377496],[-.103987,.50890798],[.36907327,.23806059],[-.2704741,1.01781596],[.2025862,.74696858],[.03609913,1.25587656],[.67564655,.47612119],[.50915948,.98502917],[.57058189,.08125421],[.40409482,.59016219],[.87715517,.31931481],[.13415948,.15823189],[-.0323275,.66713987],[-.1988146,1.17604786],[.27424568,.90520047],[.3356681,.00142551],[.16918103,.51033349],[.64224137,.23948611],[.47575431,.74839409],[.04418103,.34497403],[.30926724,1.25730207],[.00269396,1.01924148],[-.122306,.85388202],[.84375,.08267972],[.67726293,.59158771],[.24568965,.18816765],[.55226293,.42622825],[.07435344,1.17747337],[.01077586,.10833895],[-.1557112,.61724693],[.38415948,1.15038863],[-.2139008,1.25587656],[.32058189,.08125421],[.51885775,.18959317],[.15409482,.59016219],[.5856681,.99358225],[-.0123922,1.09907018],[.4606681,.82822279],[.82866379,.16250843],[.18911637,.9422638],[.66217672,.67141641],[.49568965,1.18032439],[-.0808189,.51033349],[.22575431,.74839409],[-.247306,1.01924148],[.05926724,1.25730207],[.59375,.08267972],[.12068965,.35352711],[.42726293,.59158771],[-.0043103,.18816765],[.26077586,1.10049569],[-.1707974,.69707564],[-.0457974,.86243509],[-.3372844,1.20598362],[.62877155,.43478133],[.19719827,.03136127],[.50377155,.26942187],[.0307112,.54026926],[.33728448,.77832985],[.70528017,.11261549],[.26885775,.18959317],[.3356681,.99358225],[-.2623922,1.09907018],[.47036637,.03278678],[.10560344,.43335581],[.77693965,.27084738],[-.0608836,.9422638],[.41217672,.67141641],[.24568965,1.18032439],[.61368534,.51461003],[.44719827,1.02351801],[-.1293103,.35352711],[.17726293,.59158771],[-.2957974,.86243509],[.01077586,1.10049569],[.37877155,.43478133],[.85183189,.16393394],[.21228448,.94368931],[.25377155,.26942187],[.68534482,.67284192],[.08728448,.77832985],[.51885775,1.18174991],[-.0942887,.70562871],[-.3857758,1.04917724],[.45528017,.11261549],[-.0177801,.38346287],[.2887931,.62152347],[.76185344,.35067608],[.01885775,.18959317],[.22036637,.03278678],[.05387931,.54169477],[-.3108836,.9422638],[-.1126077,1.05060275],[.72844827,.114041],[.36368534,.51461003],[.5619612,.62294898],[-.275862,1.2943654],[.19719827,1.02351801],[.50377155,1.26157861],[.39870689,.86671163],[-.0328663,.46329158],[.12877155,.43478133],[.64170258,.03563781],[-.0377155,.94368931],[.26885775,1.18174991],[.80334051,.00712756],[.1637931,.78688293],[.20528017,.11261549],[-.0026939,1.29579091],[.0387931,.62152347],[.63685344,.51603554],[-.1276939,1.13043145],[.47036637,1.02494353],[.83836206,.35922916],[-.0662715,.22665649],[.24030172,.46471709],[.71336206,.1938697],[.07381465,.97362507],[.546875,.70277769],[.38038793,1.21168567],[.91487068,.03706332],[.74838362,.54597131],[-.1961206,.54169477],[-.3626077,1.05060275],[.00538793,.38488839],[.47844827,.114041],[-.1610991,.89379637],[.3119612,.62294898],[.51346982,.4661426],[.08189655,.06272255],[.14870689,.86671163],[-.0845905,.57163053],[.45528017,1.10477223],[.82327586,.43905786],[.39170258,.03563781],[.58997844,.14397676],[-.2478448,.81539318],[.22521551,.54454579],[.89978448,.11689202],[.42672413,.38773941],[-.2526939,1.29579091],[.22036637,1.02494353],[-.3776939,1.13043145],[-.0511853,1.13898453],[-.0096982,.46471709],[.421875,.86813714],[-.1761853,.97362507],[.296875,.70277769],[.13038793,1.21168567],[.62338362,.71133076],[.19181034,.30791071],[.66487068,.03706332],[.02532327,.81681869],[.06681034,.14255125],[.49838362,.54597131],[.33189655,1.05487929],[.69989224,.38916492],[.0619612,.62294898],[.73653017,.19529522],[-.2095905,.73698999],[.26346982,.4661426],[.09698275,.97505059],[.93803879,.03848883],[.46497844,.30933622],[.77155172,.54739682],[-.1330818,.41482415],[.40678879,.94796585],[.33997844,.14397676],[-.1912715,1.05345378],[.17672413,.38773941],[.44181034,1.30006745],[.48329741,.62580001],[.01023706,.8966474],[.68480603,.46899363],[.171875,.86813714],[-.0581896,.30791071],[.20689655,1.22023875],[-.2246767,.81681869],[.24838362,.54597131],[.08189655,1.05487929],[-.0231681,.66001231],[.44989224,.38916492],[.28340517,.89807291],[-.1481681,.49465285],[.32489224,.22380547],[.92295258,.11831754],[.75646551,.62722552],[.65140086,.23235854],[.05334051,.33784647],[.52640086,.06699909],[-.1530172,.97505059],[.52155172,.54739682],[.04849137,.8182442],[.35506465,1.0563048],[-.3162715,1.21881323],[.72306034,.39059044],[.55657327,.89949842],[.35829741,.79115947],[.19181034,1.30006745],[.125,.49607837],[-.2397629,.8966474],[.06681034,1.13470799],[.79956896,.0684246],[.43480603,.46899363],[.63308189,.57733258],[-.2047413,1.248749],[.26831896,.97790161],[-.0382543,.73984101],[.46982758,.82109523],[.19989224,.38916492],[.46497844,1.30149296],[-.4396551,1.16892029],[.03340517,.89807291],[.33997844,1.13613351],[.40140086,.23235854],[.23491379,.74126653],[.27640086,.06699909],[.06842672,1.25017451],[.10991379,.57590707],[.70797413,.47041914],[.54148706,.97932712],[.00484913,.18104009],[.31142241,.41910069],[.78448275,.1482533],[.30657327,.89949842],[-.125,.49607837],[.54956896,.0684246],[.07650862,.33927198],[-.0899784,.84817997],[-.4547413,1.248749],[.38631465,.31218725],[.15301724,.01710615],[.21982758,.82109523],[.58459051,.4205262],[.52640086,1.05915583],[.25484913,1.17319683],[-.0150862,.74126653],[-.1815732,1.25017451],[.29148706,.97932712],[-.3065732,1.08481505],[.18642241,.58446014],[.65948275,.31361276],[.01993534,1.09336813],[.06142241,.41910069],[.49299568,.82252074],[-.1050646,.92800867],[.36799568,.65716129],[.86099137,.15680638],[.69450431,.66571436],[.26293103,.26229431],[.56950431,.5003549],[.09644396,.77120229],[.40301724,1.00926289],[.77101293,.34354852],[.56465517,.98075264],[.02801724,.1824656],[-.1384698,.69137359],[.33459051,.4205262],[.16810344,.92943418],[.40140086,1.22451528],[.22952586,.02565922],[.53609913,.26371982],[-.0619612,.36920775],[.00484913,1.17319683],[.47790948,.90234945],[.6794181,.74554306],[.51293103,1.25445105],[-.4315732,1.25017451],[-.0635775,.58446014],[-.2300646,1.09336813],[.24299568,.82252074],[.61099137,.15680638],[.44450431,.66571436],[.01293103,.26229431],[.27801724,1.17462234],[.31950431,.5003549],[-.153556,.77120229],[.15301724,1.00926289],[-.3200431,1.28011027],[.21443965,.10548792],[.52101293,.34354852],[.04795258,.61439591],[.35452586,.85245651],[.72252155,.18674214],[.08459051,.4205262],[-.1869612,.5345672],[.28609913,.26371982],[.11961206,.7726278],[.59267241,.50178042],[-.2451508,1.17319683],[-.046875,1.28153579],[.48760775,.10691344],[.79418103,.34497403],[.4294181,.74554306],[.62769396,.85388202],[.26293103,1.25445105],[.87068965,.0228082],[.19450431,.66571436],[-.278556,.93656175],[.02801724,1.17462234],[.86907327,.23806059],[-.0355603,.10548792],[.22952586,1.01781596],[.27101293,.34354852],[.7025862,.74696858],[.10452586,.85245651],[-.2020474,.61439591],[-.3685344,1.12330389],[.47252155,.18674214],[-5387e-7,.45758953],[.30603448,.69565012],[.77909482,.42480274],[.13954741,1.20455811],[.61260775,.93371072],[-.1303879,.7726278],[-.296875,1.28153579],[.23760775,.10691344],[.07112068,.61582142],[.54418103,.34497403],[-.0953663,1.1247294],[.37769396,.85388202],[.74568965,.18816765],[.57920258,.69707564],[.14762931,.29365558],[.21443965,1.09764467],[-.0188577,.80256357],[.6557112,.3749098],[-.0204741,1.01781596],[.28609913,1.25587656],[.11422413,.0570205],[.65409482,.59016219],[.22252155,.18674214],[.48760775,1.09907018],[.05603448,.69565012],[-.1104525,1.20455811],[.36260775,.93371072],[.42403017,.02993576],[.2575431,.53884374],[.73060344,.26799636],[.09105603,1.04775173],[.56411637,.77690434],[.39762931,1.28581232],[.93211206,.11118997],[-.1788793,.61582142],[-.3453663,1.1247294],[.12769396,.85388202],[.02262931,.45901504],[.49568965,.18816765],[.80226293,.42622825],[-.1023706,.29365558],[-.1438577,.96792302],[-.2688577,.80256357],[.32920258,.69707564],[.16271551,1.20598362],[.69719827,.03136127],[.5307112,.54026926],[.09913793,.1368492],[-.0673491,.64575718],[.47252155,1.17889888],[.4057112,.3749098],[.60721982,.21810342],[.24245689,.61867245],[.91702586,.19101868],[.23760775,1.09907018],[-.3604525,1.20455811],[.37230603,.13827471],[.43911637,.9422638],[.0075431,.53884374],[-.1589439,1.04775173],[.31411637,.77690434],[.14762931,1.28581232],[.68211206,.11118997],[.04256465,.89094534],[.08405172,.2166779],[.515625,.62009796],[.34913793,1.12900594],[.71713362,.46329158],[.28556034,.05987152],[.11907327,.56877951],[.07920258,.69707564],[-.0872844,1.20598362],[.75377155,.26942187],[.79364224,.14112574],[.58728448,.77832985],[.2807112,.54026926],[.42079741,1.28723784],[.1557112,.3749098],[.11422413,1.04917724],[.95528017,.11261549],[-.1158405,.4889508],[.35721982,.21810342],[.19073275,.7270114],[-.1740301,1.12758043],[.02424568,1.23591938],[.55872844,.06129704],[.86530172,.29935763],[-.0393318,.16678496],[.50053879,.69992666],[.12230603,.13827471],[-.044181,.6471827],[.63038793,.21952893],[-.2074353,.89094534],[.265625,.62009796],[.09913793,1.12900594],[.46713362,.46329158],[.03556034,.05987152],[.30064655,.97219956],[-.1309267,.56877951],[.34213362,.29793212],[-.2974137,1.07768749],[.07058189,.41197312],[.54364224,.14112574],[.37715517,.65003372],[-.1357758,1.04917724],[.5387931,.62152347],[.10721982,.21810342],[.37230603,1.13043145],[-.0592672,.7270114],[.06573275,.89237086],[.30872844,.06129704],[.57381465,.97362507],[.61530172,.29935763],[.14224137,.57020502],[.44881465,.80826562],[-.0242456,1.079113],[-.2225215,.97077405],[.81681034,.14255125],[.45204741,.54312028],[.21875,.24803918],[.28556034,1.05202826],[.65032327,.65145923],[-.2591594,.9992843],[.41540948,.57163053],[-.4224137,1.24304695],[.05064655,.97219956],[.35721982,1.21026016],[.89170258,.03563781],[.25215517,.81539318],[.29364224,.14112574],[.72521551,.54454579],[-.3459051,.92088111],[.12715517,.65003372],[-.0393318,1.15894171],[.55872844,1.05345378],[.32866379,.49322734],[.80172413,.22237995],[.12230603,1.13043145],[.16217672,1.00213532],[.63523706,.73128794],[.32381465,.97362507],[-.1077586,.57020502],[-.2742456,1.079113],[.56681034,.14255125],[.09375,.41339864],[.40032327,.65145923],[-.072737,.92230662],[-.03125,.24803918],[.2338362,1.16036722],[.29525862,.25659226],[.60183189,.49465285],[.17025862,.0912328],[.00377155,.60014078],[.54364224,1.13328248],[.67834051,.17248701],[.00215517,.81539318],[.30872844,1.05345378],[-.2893318,1.15894171],[.67672413,.38773941],[.44342672,.09265831],[.51023706,.8966474],[.07866379,.49322734],[-.0878232,1.00213532],[.38523706,.73128794],[.28017241,.33642096],[.75323275,.06557357],[.11368534,.84532894],[.58674568,.57448156],[.42025862,1.08338954],[.78825431,.41767518],[-.15625,.41339864],[.58189655,1.05487929],[-.322737,.92230662],[.15032327,.65145923],[-.0161637,1.16036722],[.04525862,.25659226],[-.1212284,.76550024],[.35183189,.49465285],[.18534482,1.00356084],[.82489224,.22380547],[.65840517,.73271345],[-.4127155,1.10904877],[.55334051,.33784647],[-.0447198,.4433344],[.42834051,.17248701],[.26185344,.681395],[.49515086,.9764761],[.62984913,.01568063],[.19342672,.09265831],[.45851293,1.00498635],[.26023706,.8966474],[-.3378232,1.00213532],[.03017241,.33642096],[.29525862,1.248749],[-.1363146,.84532894],[.33674568,.57448156],[.17025862,1.08338954],[.53825431,.41767518],[.37176724,.92658316],[-.0646551,1.00356084],[-.1697198,.60869386],[.30334051,.33784647],[-.3362068,1.11760184],[.17834051,.17248701],[.13685344,.84675446],[.60991379,.57590707],[.44342672,1.08481505],[.50484913,.18104009],[.81142241,.41910069],[-.0932112,.28652802],[.37984913,.01568063],[.21336206,.52458862],[.68642241,.25374123],[.046875,1.0334966],[.64493534,.92800867],[.88793103,.09693485],[.72144396,.60584283],[-.0215517,.44475991],[.04525862,1.248749],[.65301724,.01710615],[.17995689,.28795353],[.28825431,.41767518],[.48653017,.52601413],[.12176724,.92658316],[-.184806,.68852256],[.42834051,1.16464376],[-.3512931,1.19743055],[.32327586,.76977678],[.7963362,.49892939],[.15678879,1.27868476],[-.1131465,.84675446],[.19342672,1.08481505],[.25484913,.18104009],[.08836206,.68994807],[.56142241,.41910069],[-.078125,1.19885606],[-.0366379,.52458862],[.39493534,.92800867],[-.203125,1.0334966],[.76293103,.26229431],[.59644396,.77120229],[.16487068,.36778224],[.63793103,.09693485],[-.0016163,.87669022],[.47144396,.60584283],[.67295258,.44903645],[.40301724,.01710615],[-.0700431,.28795353],[-.2365301,.79686152],[.13146551,.13114715],[.43803879,.36920775],[.91109913,.09836036],[.07327586,.76977678],[-.0932112,1.27868476],[.37984913,1.00783737],[.74784482,.34212301],[.10829741,1.12187838],[.58135775,.85103099],[-.1616379,.68994807],[-.328125,1.19885606],[.14493534,.92800867],[.03987068,.53314169],[.51293103,.26229431],[-.1266163,1.04204968],[-.0851293,.36778224],[.34644396,.77120229],[-.2516163,.87669022],[.22144396,.60584283],[.17995689,1.28011027],[.54795258,.61439591],[.11637931,.21097585],[.89601293,.17818906],[-.0501077,.71988384],[.42295258,.44903645],[.25646551,.95794444],[.31788793,.05416947],[.6244612,.29223007],[.18803879,.36920775],[.02155172,.87811573],[-.3432112,1.27868476],[.38954741,.21240137],[.69612068,.45046196],[-.1417025,1.12187838],[.33135775,.85103099],[.53286637,.69422461],[.1012931,.29080456],[.36637931,1.2031326],[.13631465,.64290616],[-.3766163,1.04204968],[-.0700431,1.28011027],[.81088362,.21525239],[.29795258,.61439591],[.60452586,.85245651],[.17295258,.44903645],[.13146551,1.12330389],[.00646551,.95794444],[.06788793,.05416947],[.33297413,.96649751],[.84752155,.02138268],[-.0985991,.56307746],[.68103448,.53029067],[.3744612,.29223007],[.51454741,1.03919865],[.20797413,.80113805],[.04148706,1.31004604],[.57596982,.13542369],[-.0220905,.24091162],[-.2284482,.87811573],[.13954741,.21240137],[-.0269396,.72130935],[.44612068,.45046196],[-.1934267,1.23021733],[.17456896,.56450297],[.64762931,.29365558],[.48114224,.80256357],[.04956896,.39914351],[.11637931,1.2031326],[.84913793,.1368492],[-.1136853,.64290616],[.359375,.37205877],[-.2801724,1.15181414],[.56088362,.21525239],[.39439655,.72416038],[-.1185344,1.12330389],[.01616379,.16250843],[.55603448,.69565012],[.38954741,1.20455811],[-.0420258,.80113805],[-.2085129,1.31004604],[.32596982,.13542369],[.59105603,1.04775173],[.6325431,.37348429],[-.3135775,.91517906],[.46605603,.88239227],[.15948275,.64433167],[-.0070043,1.15323966],[.83405172,.2166779],[.36099137,.48752529],[.66756465,.72558589],[.23599137,.32216583],[-.4434267,1.23021733],[.39762931,.29365558],[-.2419181,1.07341095],[.23114224,.80256357],[.43265086,.64575718],[.00107758,.24233713],[.06788793,1.04632621],[-.1654094,.75124511],[.3744612,1.28438681],[.2025862,.08553075],[.50915948,.32359135],[-.3286637,.99500776],[.14439655,.72416038],[-.0220905,1.23306836],[.34590517,.56735399],[.81896551,.29650661],[.1794181,1.07626198],[.65247844,.80541459],[-.4585129,1.31004604],[-.0905172,.64433167],[.21605603,.88239227],[-.2570043,1.15323966],[.58405172,.2166779],[.11099137,.48752529],[-.0554956,.99643327],[.41756465,.72558589],[.25107758,1.23449387],[-.1804956,.83107382],[-.0140086,.32216583],[.78556034,.05987152],[.61907327,.56877951],[.1875,.16535945],[.02101293,.67426744],[.49407327,.40342005],[.38900862,.00855307],[.69558189,.24661367],[.01616379,1.15466517],[.21767241,.99785879],[-.2139008,.59443873],[.25915948,.32359135],[.32596982,1.12758043],[.69073275,.7270114],[-.2720905,1.23306836],[.52424568,1.23591938],[.4606681,.16678496],[.09590517,.56735399],[-.0705818,1.07626198],[.40247844,.80541459],[.23599137,1.31432258],[.77047413,.13970023],[.60398706,.64860821],[.4375,1.15751619],[-.1390086,.48752529],[-.3054956,.99643327],[.00107758,1.23449387],[.53556034,.05987152],[-.103987,.83962689],[-.0625,.16535945],[.36907327,.56877951],[-.228987,.67426744],[.24407327,.40342005],[-.3954741,1.18317542],[.0775862,.91232803],[.2025862,1.07768749],[.57058189,.41197312],[.13900862,.00855307],[.67564655,.8068401],[-.0274784,.51746105],[.44558189,.24661367],[.27909482,.75552165],[.75215517,.48467427],[.64709051,.08980729],[.27424568,1.23591938],[.2106681,.16678496],[.47575431,1.079113],[.04418103,.67569295],[-.122306,1.18460093],[.41217672,.00997858],[.71875,.24803918],[.24568965,.51888657],[.55226293,.75694716],[.35398706,.64860821],[.1875,1.15751619],[.92025862,.0912328],[.38900862,1.00070981],[-.0474137,1.07768749],[.25915948,1.31574809],[.32058189,.41197312],[.08728448,.11689202],[.15409482,.92088111],[.62715517,.65003372],[.4606681,1.15894171],[.02909482,.75552165],[-.1373922,1.26442964],[-.0759698,.36065467],[.39709051,.08980729],[-.2424568,.86956266],[.23060344,.59871527],[.06411637,1.10762325],[.70366379,.32786788],[.53717672,.83677587],[.90517241,.1710615],[.73868534,.67996949],[-.2058189,.67569295],[.16217672,.00997858],[.46875,.24803918],[-.0043103,.51888657],[.30226293,.75694716],[-.1707974,1.02779455],[.67025862,.0912328],[.19719827,.36208019],[.50377155,.60014078],[.07219827,.19672073],[.13900862,1.00070981],[.44558189,1.23877041],[.27370689,.03991435],[.58028017,.27797494],[-.0959051,.92088111],[.2106681,1.15894171],[-.3873922,1.26442964],[.57866379,.49322734],[-.0608836,1.27298271],[-.0193965,.59871527],[.41217672,1.00213532],[-.1858836,1.10762325],[.28717672,.83677587],[.61368534,.84532894],[.18211206,.44190889],[.65517241,.1710615],[.015625,.95081687],[.48868534,.67996949],[.32219827,1.18887747],[.85668103,.01425512],[.69019396,.5231631],[.42025862,.0912328],[-.0528017,.36208019],[.25377155,.60014078],[-.2192887,.87098817],[.08728448,1.10904877],[.14870689,.2052738],[.45528017,.4433344],[.92834051,.17248701],[.02370689,.03991435],[-.1427801,.54882233],[.39709051,1.08196403],[.53178879,.12116856],[-.1443965,.76407473],[-.3108836,1.27298271],[.53017241,.33642096],[.296875,.04133986],[.36368534,.84532894],[-.0678879,.44190889],[-.234375,.95081687],[.23868534,.67996949],[.07219827,1.18887747],[.13362068,.28510251],[.60668103,.01425512],[-.0328663,.79401049],[.44019396,.5231631],[.27370689,1.03207109],[.80495689,.12259408],[.64170258,.36635672],[-.1627155,1.10904877],[.20528017,.4433344],[-.2677801,.71418179],[.0387931,.95224238],[.51185344,.681395],[-.4342672,1.22308977],[.40678879,.28652802],[.87984913,.01568063],[.24030172,.795436],[.28178879,.12116856],[.71336206,.52458862],[.11530172,.63007655],[.546875,1.0334966],[.78987068,.20242278],[-.0479525,.87383919],[.046875,.04133986],[.62661637,.44618543],[.08189655,.39344146],[.62176724,.92658316],[-.2828663,.79401049],[.14870689,1.19743055],[-.4493534,1.30291847],[.02370689,1.03207109],[.33028017,1.27013169],[.39170258,.36635672],[.69827586,.60441732],[-.2478448,1.14611209],[.53178879,1.1133253],[.22521551,.87526471],[.42672413,.71845833],[-.0048491,.31503827],[.4682112,.04419088],[-.2112068,.95224238],[-.0096982,.795436],[.46336206,.52458862],[-.1761853,1.30434399],[-.1346982,.63007655],[.296875,1.0334966],[.19181034,.63862962],[.66487068,.36778224],[.49838362,.87669022],[.06681034,.47327016],[.53987068,.20242278],[-.0996767,.98217815],[.86637931,.21097585],[.26831896,.31646378],[.74137931,.0456164],[.57489224,.55452438],[.21012931,.95509341],[-.1012931,1.19743055],[-.3345905,.90234945],[.03340517,.23663508],[.57327586,.76977678],[.33997844,.47469568],[.40678879,1.27868476],[-.0247844,.87526471],[.28178879,1.1133253],[.64978448,.44761094],[.17672413,.71845833],[.48329741,.95651892],[.05172413,.55309887],[.01023706,1.22736631],[.8512931,.29080456],[.68480603,.79971254],[.7262931,.1254451],[-.2198275,.66713987],[-.4261853,1.30434399],[.25323275,.39629249],[.45474137,.23948611],[-.2246767,1.14753761],[.24838362,.87669022],[.55495689,1.11475082],[-.3496767,.98217815],[.44989224,.71988384],[.01831896,.31646378],[.49137931,.0456164],[-.1481681,.82537177],[.32489224,.55452438],[.28340517,1.22879182],[.21982758,.1596574],[.52640086,.397718],[.16163793,.79828703],[-.0048491,1.30719501],[.76454741,.04704191],[.29148706,.3178893],[.125,.82679728],[-.0732758,.71845833],[-.2397629,1.22736631],[-.3647629,1.06200685],[.6012931,.29080456],[.79956896,.39914351],[.43480603,.79971254],[.00323275,.39629249],[.26831896,1.30862052],[.30980603,.63435308],[-.1632543,.90520047],[-.0382543,1.07055993],[.20474137,.23948611],[.03825431,.74839409],[.51131465,.4775467],[.71282327,.32074032],[.03340517,1.22879182],[.50646551,.95794444],[-.0301724,.1596574],[-.1966594,.66856539],[.27640086,.397718],[-.3631465,1.17747337],[.10991379,.90662598],[.1713362,.00285102],[.47790948,.24091162],[.31142241,.7498196],[-.1201508,.34639955],[.35290948,.07555216],[.41971982,.87954124],[.78448275,.47897222],[.61799568,.9878802],[-.125,.82679728],[.45474137,1.23164285],[.54956896,.39914351],[-.2882543,1.07055993],[.01831896,1.30862052],[.38631465,.64290616],[.15301724,.34782506],[.21982758,1.15181414],[-.2117456,.74839409],[-.0452586,.23948611],[-.3782327,1.25730207],[.09482758,.98645469],[-.010237,.59158771],[.46282327,.32074032],[-.1767241,1.10049569],[.2963362,.8296483],[.76939655,.55880092],[.66433189,.16393394],[.29148706,1.31004604],[-.1400862,.90662598],[.22790948,.24091162],[.06142241,.7498196],[.53448275,.47897222],[-.1050646,1.25872759],[.36799568,.9878802],[.4294181,.08410524],[.26293103,.59301322],[.73599137,.32216583],[.56950431,.83107382],[.13793103,.42765376],[.20474137,1.23164285],[-.028556,.93656175],[.8125,0],[.33943965,.27084738],[.64601293,.50890798],[-.0969827,.34782506],[-.0301724,1.15181414],[.16810344,1.2601531],[.10452586,.19101868],[.64439655,.72416038],[.47790948,1.23306836],[.0463362,.8296483],[.35290948,1.0677089],[.41433189,.16393394],[.24784482,.67284192],[.72090517,.40199454],[.08135775,1.18174991],[.5544181,.91090252],[-.1885775,.7498196],[-.3550646,1.25872759],[.1794181,.08410524],[.01293103,.59301322],[.48599137,.32216583],[.31950431,.83107382],[-.1120689,.42765376],[-.153556,1.1019212],[.6875,.16535945],[.21443965,.43620684],[.52101293,.67426744],[.5625,0],[.35452586,1.18317542],[.39601293,.50890798],[.46282327,1.31289706],[.08943965,.27084738],[.88900862,.00855307],[-.0770474,.77975537],[.29094827,.114041],[.59752155,.3521016],[.05603448,.0342123],[.36260775,.27227289],[.4294181,1.07626198],[-.0021551,.67284192],[.19612068,.78118088],[-.1686422,1.18174991],[.3044181,.91090252],[.67241379,.24518816],[.03286637,1.02494353],[.50592672,.75409614],[.33943965,1.26300412],[.70743534,.59728976],[-.403556,1.1019212],[.4375,.16535945],[-.0355603,.43620684],[.27101293,.67426744],[-.2020474,.94511482],[.10452586,1.18317542],[.5775862,.91232803],[.63900862,.00855307],[.47252155,.51746105],[.04094827,.114041],[.30603448,1.02636904],[.34752155,.3521016],[-.1255387,.62294898],[.18103448,.86100958],[-.2920258,1.13185697],[.54903017,.19529522],[.11260775,.27227289],[.31411637,.11546651],[-.0506465,.51603554],[.14762931,.6243745],[-.2171336,1.02494353],[.62068965,.35352711],[.08943965,1.26300412],[.62392241,.08838177],[.82219827,.19672073],[.45743534,.59728976],[.29094827,1.10619774],[.22737068,.03706332],[-.1454741,1.18317542],[.22252155,.51746105],[-.2505387,.78830844],[.05603448,1.02636904],[.52909482,.75552165],[.36260775,1.26442964],[-.0689655,.86100958],[-.4170258,1.29721642],[.42403017,.36065467],[.89709051,.08980729],[.2575431,.86956266],[.29903017,.19529522],[.73060344,.59871527],[.1325431,.7042032],[.60560344,.43335581],[-.0339439,1.21311118],[.56411637,1.10762325],[-.1740301,.4661426],[-.3405172,.97505059],[.50053879,.03848883],[.33405172,.54739682],[.80711206,.27654943],[.640625,.78545742],[.06411637,.11546651],[-.1023706,.6243745],[-.2688577,1.13328248],[.09913793,.46756811],[.57219827,.19672073],[.4057112,.70562871],[.04094827,1.10619774],[.77370689,.03991435],[.17564655,.14540228],[.71551724,.67854397],[-.1891163,.54597131],[.54903017,1.18745196],[.24245689,.94939136],[.48545258,.11831754],[-.1939655,1.02636904],[-.1540948,.89807291],[.0075431,.86956266],[.48060344,.59871527],[.31411637,1.10762325],[-.1174568,.7042032],[.52047413,.47041914],[-.2839439,1.21311118],[.68211206,.44190889],[.25053879,.03848883],[.515625,.95081687],[.08405172,.54739682],[.55711206,.27654943],[-.0824353,1.0563048],[.390625,.78545742],[.22413793,1.2943654],[.28556034,.39059044],[.75862068,.11974305],[.59213362,.62865103],[.36206896,.0684246],[-.150862,.46756811],[-.3173491,.9764761],[.32219827,.19672073],[.1557112,.70562871],[.52370689,.03991435],[.83028017,.27797494],[.35721982,.54882233],[-.0075431,.94939136],[-.2408405,.65431026],[.19073275,1.05773031],[.66702586,.52173759],[.43372844,.22665649],[.50053879,1.03064558],[.06896551,.62722552],[.74353448,.19957175],[.27047413,.47041914],[.10398706,.97932712],[.9450431,.04276537],[.77855603,.55167336],[-.1659482,.54739682],[-.2074353,1.22166426],[-.3324353,1.0563048],[.265625,.95081687],[.46713362,.79401049],[.03556034,.39059044],[.50862068,.11974305],[-.1309267,.89949842],[.34213362,.62865103],[.17564655,1.13755902],[.30064655,1.30291847],[.64870689,.86671163],[.54364224,.47184465],[.11206896,.0684246],[.37715517,.98075264],[-.0544181,.57733258],[.48545258,1.11047428],[.62015086,.14967881],[.10721982,.54882233],[-.0592672,1.05773031],[.78178879,.12116856],[.61530172,.63007655],[.14224137,.90092393],[.44881465,1.13898453],[-.2225215,1.30149296],[.81681034,.47327016],[.38523706,.06985011],[.21875,.57875809],[.02047413,.47041914],[-.1460129,.97932712],[.6950431,.04276537],[.89331896,.15110433],[.52855603,.55167336],[.05549568,.82252074],[.05064655,1.30291847],[.52370689,1.03207109],[-.0743534,1.13755902],[-.012931,.23378405],[.65840517,.07127562],[-.1794181,.74269204],[.29364224,.47184465],[-.3459051,1.25160002],[.12715517,.98075264],[.60021551,.70990525],[.43372844,1.21881323],[.49515086,.31503827],[.9682112,.04419088],[.32866379,.82394625],[-.1029094,.4205262],[.37015086,.14967881],[-.2693965,.92943418],[.20366379,.6585868],[-.3092672,1.05773031],[.36530172,.63007655],[.40517241,.50178042],[.87823275,.23093303],[.13523706,.06985011],[.40032327,.98217815],[-.03125,.57875809],[.17025862,.42195171],[.64331896,.15110433],[-.1945043,.82252074],[.11206896,1.06058134],[.48006465,.39486697],[.24676724,.09978587],[.31357758,.90377496],[-.1228448,.98075264],[.24515086,.31503827],[-.3943965,1.09479364],[.07866379,.82394625],[.55172413,.55309887],[-.0463362,.6585868],[.38523706,1.06200685],[-.2128232,1.16749478],[.28017241,.66713987],[.75323275,.39629249],[.58674568,.90520047],[.15517241,.50178042],[.62823275,.23093303],[-.0113146,1.0106884],[.46174568,.73984101],[.35668103,.34497403],[.82974137,.07412665],[.66325431,.58303463],[-.0797413,.42195171],[.39331896,.15110433],[-.2462284,.9308597],[.12176724,.26514533],[.42834051,.50320593],[-.0032327,.09978587],[.06357758,.90377496],[.26185344,1.01211391],[.49515086,1.30719501],[.73814655,.47612119],[.09859913,1.25587656],[.57165948,.98502917],[-.1713362,.82394625],[.03017241,.66713987],[.50323275,.39629249],[-.1363146,1.17604786],[-.0948275,.50178042],[.33674568,.90520047],[-.2613146,1.0106884],[.70474137,.23948611],[.53825431,.74839409],[.10668103,.34497403],[.37176724,1.25730207],[.41325431,.58303463],[-.059806,.85388202],[.24676724,1.09194262],[.57974137,.07412665],[.30818965,.18816765],[.61476293,.42622825],[.44827586,.93513623],[.17834051,.50320593],[-.4612068,1.2829613],[.01185344,1.01211391],[.07327586,.10833895],[.37984913,.34639955],[.85290948,.07555216],[.21336206,.85530753],[.68642241,.58446014],[-.1514008,1.25587656],[.45635775,.02423371],[.5231681,.82822279],[.28987068,.53314169],[-.3863146,1.17604786],[.28825431,.74839409],[.12176724,1.25730207],[.59482758,.98645469],[-.309806,.85388202],[-.0032327,1.09194262],[.05818965,.18816765],[.32327586,1.10049569],[.36476293,.42622825],[-.1082974,.69707564],[.19827586,.93513623],[.6713362,.66428885],[.50484913,1.17319683],[-.2747844,1.20598362],[.56627155,.26942187],[.39978448,.77832985],[.12984913,.34639955],[-.0366379,.85530753],[-.1417025,.46044055],[.33135775,.18959317],[.16487068,.69850115],[.20635775,.02423371],[.63793103,.42765376],[.47144396,.93656175],[.53286637,.03278678],[.83943965,.27084738],[.04310344,.26799636],[.24137931,.37633531],[.71443965,.10548792],[-.1282327,1.25730207],[.23976293,.59158771],[.00646551,.29650661],[.07327586,1.10049569],[.5463362,.8296483],[-.0517241,.93513623],[.31627155,.26942187],[-.1567887,.54026926],[.14978448,.77832985],[.62284482,.50748247],[-.0167025,1.28723784],[.45635775,1.01639045],[-.3232758,1.04917724],[.51778017,.11261549],[.3512931,.62152347],[.82435344,.35067608],[.65786637,.85958407],[-.2866379,.85530753],[.08135775,.18959317],[-.0851293,.69850115],[.38793103,.42765376],[-.2516163,1.20740913],[.22144396,.93656175],[.28286637,.03278678],[.11637931,.54169477],[.58943965,.27084738],[.42295258,.77975537],[-.0086206,.37633531],[.05818965,1.18032439],[-.1751077,.88524329],[.25646551,1.28866335],[.79094827,.114041],[.19288793,.21952893],[.4994612,.45758953],[-.0420258,.13970023],[.49784482,.67284192],[.33135775,1.18174991],[-.1002155,.77832985],[-.2667025,1.28723784],[.26778017,.11261549],[.53286637,1.02494353],[.1012931,.62152347],[.57435344,.35067608],[-.0651939,1.13043145],[.40786637,.85958407],[.77586206,.1938697],[.609375,.70277769],[.44288793,1.21168567],[.37931034,.14255125],[-.1336206,.54169477],[-.3001077,1.05060275],[.17295258,.77975537],[.00646551,1.28866335],[.54094827,.114041],[.84752155,.3521016],[-.057112,.21952893],[-.0985991,.89379637],[-.2235991,.72843691],[.2494612,.45758953],[-.3900862,1.2373449],[.3744612,.62294898],[.20797413,1.13185697],[.14439655,.06272255],[.92403017,.02993576],[.45096982,.30078315],[.08620689,.70135217],[.28448275,.80969113],[.76077586,.27369841],[.21605603,.22095444],[.28286637,1.02494353],[.04956896,.72986243],[-.3151939,1.13043145],[.41756465,.06414806],[.52586206,.1938697],[.72413793,.30220866],[-.1136853,.97362507],[-.0721982,.29935763],[.359375,.70277769],[.19288793,1.21168567],[.56088362,.54597131],[.12931034,.14255125],[.39439655,1.05487929],[-.0371767,.65145923],[-.2435344,1.28866335],[.63739224,.22380547],[.1244612,.62294898],[.43103448,.86100958],[-.0420258,1.13185697],[.79903017,.19529522],[.6325431,.7042032],[.20096982,.30078315],[.46605603,1.21311118],[.15948275,.97505059],[.03448275,.80969113],[-.0705818,.41482415],[.40247844,.14397676],[.70905172,.38203736],[.23599137,.65288475],[.54256465,.89094534],[-.1287715,1.05345378],[.91056034,.22523098],[.37931034,1.13470799],[.00107758,.57305604],[.47413793,.30220866],[-.3636853,.97362507],[.54094827,1.10619774],[-.057112,1.21168567],[.67564655,.14540228],[.31088362,.54597131],[.14439655,1.05487929],[.61745689,.7840319],[.45096982,1.29293989],[-.0856681,.49465285],[.38739224,.22380547],[-.2521551,1.00356084],[.22090517,.73271345],[.58890086,.06699909],[.3825431,.7042032],[.42241379,.57590707],[.21605603,1.21311118],[-.2155172,.80969113],[.15247844,.14397676],[.41756465,1.0563048],[.45905172,.38203736],[-.0140086,.65288475],[-.1804956,1.16179273],[.1875,.49607837],[.66056034,.22523098],[.49407327,.73413896],[.0625,.33071891],[.12931034,1.13470799],[.3275862,1.24304695],[.86206896,.0684246],[.26400862,.17391253],[.25915948,.65431026],[-.1056034,1.05487929],[.02909482,.09408382],[.09590517,.89807291],[.56896551,.62722552],[.40247844,1.13613351],[-.0290948,.73271345],[-.1955818,1.24162143],[.33890086,.06699909],[.60398706,.97932712],[-.3006465,.84675446],[.17241379,.57590707],[.00592672,1.08481505],[.64547413,.30505968],[.47898706,.81396767],[.37392241,.41910069],[.84698275,.1482533],[.68049568,.65716129],[.47413793,1.2943654],[-.4304956,1.16179273],[-.0625,.49607837],[.41056034,.22523098],[-.228987,1.00498635],[.24407327,.73413896],[.0775862,1.24304695],[.13900862,.33927198],[.61206896,.0684246],[.44558189,.57733258],[.01400862,.17391253],[.27909482,1.08624057],[-.1524784,.68282051],[-.3189655,1.1917285],[.21551724,.01710615],[.52209051,.25516674],[.58890086,1.05915583],[.35560344,.76407473],[.28717672,.17533804],[.35398706,.97932712],[-.0775862,.57590707],[-.2440732,1.08481505],[.12392241,.41910069],[.59698275,.1482533],[-.0425646,.92800867],[.43049568,.65716129],[.26400862,1.16606927],[.63200431,.5003549],[.46551724,1.00926289],[-.1724137,1.24304695],[-.1109913,.33927198],[-.2774784,.84817997],[.19558189,.57733258],[.02909482,1.08624057],[.50215517,.81539318],[-.0759698,.69137359],[.39709051,.4205262],[.23060344,.92943418],[.27209051,.25516674],[.87015086,.14967881],[-.3674568,1.03492211],[.10560344,.76407473],[.70366379,.6585868],[.59859913,.26371982],[.53717672,1.16749478],[.47359913,.09836036],[.30711206,.60726835],[.78017241,.33642096],[.03717672,.17533804],[.23868534,.01853166],[.07219827,.52743964],[-.2925646,.92800867],[.01400862,1.16606927],[.74676724,.09978587],[.38200431,.5003549],[.68857758,.7384155],[.21551724,1.00926289],[.52209051,1.24732348],[-.2575431,1.28011027],[.41702586,.85245651],[-.2209051,1.08624057],[.14709051,.4205262],[-.0193965,.92943418],[.45366379,.6585868],[.28717672,1.16749478],[.34859913,.26371982],[.18211206,.7726278],[.22359913,.09836036],[.65517241,.50178042],[.05711206,.60726835],[.48868534,1.0106884],[-.109375,1.11617633],[.85668103,.34497403],[-.0479525,.21240137],[.25862068,.45046196],[.73168103,.17961458],[.56519396,.68852256],[.39870689,1.19743055],[.93318965,.0228082],[-.1778017,.52743964],[.49676724,.09978587],[.56357758,.90377496],[.02370689,.37063326],[-.0344827,1.00926289],[.33351293,.34354852],[.10021551,.04846742],[.16702586,.85245651],[.6400862,.58160912],[.47359913,1.0905171],[-.0630387,.29223007],[.09859913,.26371982],[-.0678879,.7726278],[-.234375,1.28153579],[-.1928879,.60726835],[.23868534,1.0106884],[-.359375,1.11617633],[.13362068,.61582142],[.60668103,.34497403],[-.0328663,1.1247294],[.00862068,.45046196],[.48168103,.17961458],[-.1578663,.95936995],[.31519396,.68852256],[.44019396,.85388202],[.21012931,.29365558],[.68318965,.0228082],[.51670258,.53171618],[.35021551,1.04062416],[-.0247844,.21382688],[.28178879,.45188748],[.34859913,1.25587656],[.11530172,.96079546],[-.1912715,.72273486],[.48329741,.29508109],[.95635775,.02423371],[.59159482,.42480274],[.78987068,.53314169],[-.0479525,1.20455811],[.42510775,.93371072],[.62661637,.77690434],[.1950431,.37348429],[.46012931,1.28581232],[-.484375,1.28153579],[-.2828663,1.1247294],[.19019396,.85388202],[.49676724,1.09194262],[.39170258,.69707564],[-.0398706,.29365558],[.22521551,1.20598362],[-.2063577,.80256357],[.26670258,.53171618],[-.3728448,1.31147155],[.10021551,1.04062416],[.16163793,.1368492],[.94127155,.10406241],[-.0048491,.64575718],[.4682112,.3749098],[.30172413,.88381778],[.03178879,.45188748],[-.1346982,.96079546],[.23329741,.29508109],[.70635775,.02423371],[.06681034,.80398908],[.53987068,.53314169],[-.2979525,1.20455811],[.43480603,.13827471],[.74137931,.37633531],[.37661637,.77690434],[.14331896,.48182324],[.21012931,1.28581232],[-.2214439,.88239227],[.81788793,.05416947],[-.0199353,.72558589],[.453125,.4547385],[.65463362,.29793212],[-.0247844,1.20598362],[-.1497844,1.04062416],[.64978448,.77832985],[.2182112,.3749098],[.48329741,1.28723784],[.52478448,.6129704],[-.4213362,1.15466517],[.35829741,1.12187838],[.17672413,1.04917724],[.05172413,.88381778],[.41971982,.21810342],[.7262931,.45616401],[.29471982,.05274396],[.55980603,.965072],[.25323275,.7270114],[.0231681,.16678496],[-.1831896,.80398908],[-.3496767,1.31289706],[.01831896,.6471827],[.49137931,.37633531],[-.1481681,1.15609068],[.32489224,.88524329],[-.0398706,1.28581232],[.69288793,.21952893],[.52640086,.72843691],[.09482758,.32501686],[.56788793,.05416947],[-.2699353,.72558589],[.63469827,.85815856],[-.4364224,1.23449387],[.03663793,.96364649],[.40463362,.29793212],[-.2349137,1.07768749],[.23814655,.8068401],[.71120689,.53599272],[.23329741,1.28723784],[.16971982,.21810342],[.43480603,1.13043145],[.4762931,.45616401],[.00323275,.7270114],[.30980603,.965072],[-.1217672,.56165194],[.36799568,.32644237],[-.1632543,1.23591938],[.67780172,.29935763],[.20474137,.57020502],[.51131465,.80826562],[.55280172,.13399818],[.34482758,1.3171736],[.07974137,.40484556],[.87931034,.14255125],[.28125,.24803918],[-.3981681,1.15609068],[.07489224,.88524329],[.27640086,.72843691],[.7494612,.45758953],[.10991379,1.2373449],[.58297413,.96649751],[.0463362,.16821048],[-.1201508,.67711846],[.35290948,.40627107],[-.0118534,.8068401],[.41971982,1.21026016],[-.1783405,1.31574809],[.18965517,.65003372],[.66271551,.37918634],[.0231681,1.15894171],[.49622844,.88809432],[.69773706,.73128794],[-.4132543,1.23591938],[.12122844,.06129704],[-.0452586,.57020502],[-.2117456,1.079113],[.26131465,.80826562],[.09482758,1.3171736],[-.3367456,.91375355],[.56788793,1.04632621],[.62931034,.14255125],[-.010237,.92230662],[.03125,.24803918],[.46282327,.65145923],[-.135237,.75694716],[.33782327,.48609978],[-.3017241,1.26585515],[.2963362,1.16036722],[.23275862,.0912328],[.53933189,.3292934],[.37284482,.83820138],[-.1400862,1.2373449],[.53448275,.80969113],[.10290948,.40627107],[.36799568,1.31859911],[-.0021551,.0114041],[-.1686422,.52031208],[.3044181,.24946469],[.13793103,.75837268],[-.2268318,1.15894171],[.50592672,.09265831],[.8125,.33071891],[.44773706,.73128794],[.28125,1.24019592],[.48275862,1.08338954],[-.1551724,1.3171736],[-.260237,.92230662],[.21282327,.65145923],[.0463362,1.16036722],[.51939655,.88951983],[-.0786637,.99500776],[.41433189,.49465285],[-.0172413,.0912328],[.24784482,1.00356084],[-.1837284,.60014078],[.28933189,.3292934],[-.3502155,1.10904877],[.12284482,.83820138],[.88739224,.22380547],[.59590517,.56735399],[.72090517,.73271345],[.01778017,.4433344],[.49084051,.17248701],[.32435344,.681395],[.79741379,.41054761],[.63092672,.9194556],[.11799568,1.31859911],[.69234913,.01568063],[.0544181,.24946469],[-.1120689,.75837268],[-.278556,1.26728066],[.25592672,.09265831],[.5625,.33071891],[.08943965,.6015663],[.39601293,.83962689],[.03125,1.24019592],[.76400862,.17391253],[.16594827,.27940046],[.23275862,1.08338954],[.16433189,.49465285],[-.0689655,.19957175],[-.0021551,1.00356084],[.3044181,1.24162143],[-.1271551,.83820138],[.83890086,.06699909],[.67241379,.57590707],[.24084051,.17248701],[.50592672,1.08481505],[.07435344,.681395],[.54741379,.41054761],[-.0921336,1.19030298],[.38092672,.9194556],[.44234913,.01568063],[.27586206,.52458862],[.74892241,.25374123],[.58243534,.76264921],[.41594827,1.2715572],[.95043103,.09693485],[.00592672,.09265831],[-.1605603,.6015663],[-.3270474,1.11047428],[.51400862,.17391253],[.04094827,.44475991],[.34752155,.68282051],[.82058189,.41197312],[.18103448,1.1917285],[-.0840517,.27940046],[-.1255387,.9536679],[.71551724,.01710615],[.54903017,.52601413],[.11745689,.12259408],[.65732758,.65573577],[.49084051,1.16464376],[-.0506465,.84675446],[.25592672,1.08481505],[-.3421336,1.19030298],[.19234913,.01568063],[.390625,.12401959],[.02586206,.52458862],[.45743534,.92800867],[-.140625,1.0334966],[.33243534,.76264921],[.16594827,1.2715572],[.22737068,.36778224],[.70043103,.09693485],[.06088362,.87669022],[.53394396,.60584283],[.36745689,1.11475082],[.09752155,.68282051],[-.0689655,1.1917285],[.46551724,.01710615],[-.0075431,.28795353],[.29903017,.52601413],[.77209051,.25516674],[.1325431,1.03492211],[.60560344,.76407473],[-.1740301,.79686152],[.50053879,.36920775],[.37553879,.20384829],[.44234913,1.00783737],[.20905172,.71275627],[-.0975215,.47469568],[.57704741,.04704191],[.88362068,.28510251],[.140625,.12401959],[.20743534,.92800867],[-.390625,1.0334966],[-.0840517,1.2715572],[-.0226293,.36778224],[.24245689,1.28011027],[-.1891163,.87669022],[.28394396,.60584283],[.59051724,.84390343],[.11745689,1.11475082],[.48545258,.44903645],[.05387931,.0456164],[.31896551,.95794444],[.04903017,.52601413],[.08890086,.397718],[-.1174568,1.03492211],[.25053879,.36920775],[.72359913,.09836036],[.08405172,.87811573],[.12553879,.20384829],[.55711206,.60726835],[-.0409482,.71275627],[.390625,1.11617633],[.75862068,.45046196],[.32704741,.04704191],[.59213362,.95936995],[.16056034,.55594989],[.63362068,.28510251],[-.2042025,.95651892],[.83512931,.12829613],[.47036637,.52886515],[-.0743534,.47612119],[-.0075431,1.28011027],[-.2408405,.98502917],[.60021551,.04846742],[.66702586,.85245651],[.23545258,.44903645],[.43372844,.55737541],[-.4040948,1.22879182],[.06896551,.95794444],[.37553879,1.19600503],[.91002155,.02138268],[.74353448,.53029067],[.3119612,.12687061],[.57704741,1.03919865],[-.3275862,.90662598],[.27047413,.80113805],[-.1659482,.87811573],[.34698275,.47897222],[.140625,1.11617633],[.50862068,.45046196],[.07704741,.04704191],[-.1309267,1.23021733],[-.0894396,.55594989],[.34213362,.95936995],[-.2559267,1.06485788],[.54364224,.80256357],[.11206896,.39914351],[.58512931,.12829613],[-.0544181,.9080515],[.41864224,.63720411],[-.419181,1.30862052],[.05387931,1.03777314],[.25215517,1.14611209],[.62015086,.48039773],[.18857758,.07697767],[.72844827,.61011937],[.35021551,.04846742],[-.2893318,.82822279],[.18372844,.55737541],[.85829741,.12972164],[.38523706,.40056902],[.02047413,.80113805],[.32704741,1.03919865],[-.1460129,1.31004604],[.6950431,.37348429],[.46174568,.07840319],[.52855603,.88239227],[.5700431,.20812483],[.09698275,.47897222],[-.0695043,.9878802],[.77155172,.05131845],[.29849137,.32216583],[.60506465,.56022643],[.09213362,.95936995],[.76670258,.53171618],[-.137931,.39914351],[.12715517,1.31147155],[-.3044181,.9080515],[.16864224,.63720411],[.60021551,1.04062416],[.06357758,.24233713],[-.1029094,.75124511],[.37015086,.48039773],[.20366379,.98930571],[.8432112,.20955034],[.67672413,.71845833],[.57165948,.32359135],[-.0264008,.42907928],[.44665948,.15823189],[.51346982,.96222097],[-.03125,.90947701],[-.3960129,1.31004604],[.64331896,.48182324],[.27855603,.88239227],[.47683189,.99073122],[-.1945043,1.15323966],[-.3195043,.9878802],[.04849137,.32216583],[.31357758,1.23449387],[-.1179956,.83107382],[.35506465,.56022643],[.18857758,1.06913441],[.08351293,.67426744],[.55657327,.40342005],[.3900862,.91232803],[-.1228448,1.31147155],[.12015086,.48039773],[-.0463362,.98930571],[.0150862,.08553075],[-.1514008,.59443873],[.32165948,.32359135],[.15517241,.83249933],[.19665948,.15823189],[.79471982,.05274396],[.62823275,.56165194],[.46174568,1.07055993],[.5231681,.16678496],[.82974137,.40484556],[-.0748922,.27227289],[.3981681,.00142551],[.23168103,.51033349],[.29849137,1.31432258],[.90625,.08267972],[-.2462284,1.26157861],[.23006465,.72558589],[-.0032327,.43050479],[.06357758,1.23449387],[.42834051,.83392484],[-.0614224,1.06913441],[.6713362,.00285102],[-.166487,.67426744],[.30657327,.40342005],[-.3329741,1.18317542],[.1400862,.91232803],[.61314655,.64148065],[.44665948,1.15038863],[.50808189,.24661367],[.34159482,.75552165],[.81465517,.48467427],[.07165948,.32359135],[-.0948275,.83249933],[.21174568,1.07055993],[.2731681,.16678496],[.10668103,.67569295],[.1481681,.00142551],[.41325431,.91375355],[-.0183189,.51033349],[-.059806,1.18460093],[-.184806,1.01924148],[.57974137,.40484556],[.78125,.24803918],[.61476293,.75694716],[.65625,.08267972],[.18318965,.35352711],[.48976293,.59158771],[-.0517241,.27369841],[.4213362,.00285102],[-.2182112,.78260639],[.32165948,1.31574809],[.25808189,.24661367],[.45635775,.35495262],[.09159482,.75552165],[.5231681,1.15894171],[-.0748922,1.26442964],[.3981681,.99358225],[.76616379,.32786788],[.12661637,1.10762325],[.59967672,.83677587],[-.1433189,.67569295],[.16325431,.91375355],[-.309806,1.18460093],[.53125,.24803918],[.05818965,.51888657],[.36476293,.75694716],[-.0668103,.35352711],[.19827586,1.26585515],[-.2332974,.86243509],[-.1082974,1.02779455],[.73275862,.0912328],[.56627155,.60014078],[.13469827,.19672073],[.44127155,.43478133],[.91433189,.16393394],[.27478448,.94368931],[-.0317887,.70562871],[.64278017,.27797494],[.20635775,.35495262],[.2731681,1.15894171],[-.3248922,1.26442964],[.40786637,.19814624],[.04310344,.59871527],[.71443965,.43620684],[-.1233836,1.10762325],[.34967672,.83677587],[.55118534,.67996949],[.38469827,1.18887747],[-.1918103,.51888657],[.11476293,.75694716],[-.3582974,1.02779455],[-.0517241,1.26585515],[.48275862,.0912328],[.31627155,.60014078],[.78933189,.3292934],[.14978448,1.10904877],[.19127155,.43478133],[.62284482,.83820138],[.02478448,.94368931],[-.1567887,.87098817],[-.4482758,1.2145367],[.08620689,.03991435],[.39278017,.27797494],[.86584051,.00712756],[.2262931,.78688293],[.69935344,.51603554],[-.0802801,.54882233],[.59428879,.12116856],[-.0436422,.35495262],[.15786637,.19814624],[-.0086206,.70705422],[-.3733836,1.10762325],[-.1751077,1.21596221],[.359375,.04133986],[.66594827,.27940046],[.30118534,.67996949],[.4994612,.78830844],[.13469827,1.18887747],[.07112068,.11974305],[.33620689,1.03207109],[.06627155,.60014078],[-.1002155,1.10904877],[.26778017,.4433344],[.74084051,.17248701],[.1012931,.95224238],[.14278017,.27797494],[.57435344,.681395],[-.0237068,.78688293],[.40786637,1.19030298],[-.1901939,1.29579091],[.77586206,.52458862],[.34428879,.12116856],[-.1287715,.39201595],[.17780172,.63007655],[.65086206,.35922916],[.01131465,1.13898453],[.484375,.86813714],[.85237068,.20242278],[.68588362,.71133076],[-.2586206,.70705422],[-.4251077,1.21596221],[-.057112,.55024784],[.41594827,.27940046],[-.2235991,1.05915583],[.2494612,.78830844],[.61745689,.12259408],[.45096982,.63150206],[.01939655,.228082],[.08620689,1.03207109],[-.1470905,.73698999],[.39278017,1.27013169],[.76077586,.60441732],[.32920258,.20099727],[.52747844,.30933622],[-.3103448,.98075264],[-.1487068,.95224238],[.36422413,.55309887],[.15786637,1.19030298],[-.4401939,1.29579091],[.52586206,.52458862],[.09428879,.12116856],[-.1136853,1.30434399],[-.0721982,.63007655],[.359375,1.0334966],[-.2386853,1.13898453],[.234375,.86813714],[.56088362,.87669022],[.12931034,.47327016],[.60237068,.20242278],[-.0371767,.98217815],[.00431034,.30791071],[.43588362,.71133076],[.26939655,1.22023875],[.80387931,.0456164],[.63739224,.55452438],[.20581896,.15110433],[-5387e-7,.78830844],[.36745689,.12259408],[.67403017,.36065467],[-.2720905,.90234945],[.20096982,.63150206],[.03448275,1.14041004],[.87553879,.20384829],[.40247844,.47469568],[.70905172,.71275627],[-.1955818,.58018361],[.34428879,1.1133253],[.27747844,.30933622],[.47898706,.15252984],[.11422413,.55309887],[-.0522629,1.06200685],[.7887931,.1254451],[.62230603,.63435308],[.109375,1.0334966],[.24407327,.07270114],[-.1206896,.47327016],[-.2871767,.98217815],[.18588362,.71133076],[.01939655,1.22023875],[.55387931,.0456164],[-.0856681,.82537177],[-.044181,.15110433],[.38739224,.55452438],[-.2106681,.66001231],[.22090517,1.06343236],[.86045258,.28367699],[.69396551,.79258498],[.58890086,.397718],[-.0091594,.50320593],[.46390086,.23235854],[-.0490301,.63150206],[-.2155172,1.14041004],[.62553879,.20384829],[.66540948,.07555216],[.45905172,.71275627],[-.0140086,.98360366],[.29256465,1.22166426],[.66056034,.55594989],[.22898706,.15252984],[.49407327,1.06485788],[.0625,.66143782],[.29579741,.95651892],[-.3022629,1.06200685],[.73706896,.23378405],[.37230603,.63435308],[.57058189,.74269204],[.20581896,1.14326107],[-.1007543,.90520047],[.40732758,.98645469],[.13739224,.55452438],[-.0290948,1.06343236],[.27747844,1.30149296],[.33890086,.397718],[.8119612,.12687061],[.17241379,.90662598],[.21390086,.23235854],[.64547413,.6357786],[.04741379,.74126653],[.47898706,1.14468658],[-.0576508,.34639955],[.41540948,.07555216],[.24892241,.58446014],[.72198275,.31361276],[.92349137,.15680638],[-.0210129,.15252984],[.24407327,1.06485788],[-.1875,.66143782],[.48706896,.23378405],[.01400862,.50463144],[-.1524784,1.01353943],[.68857758,.07697767],[.32381465,.4775467],[.09051724,.1824656],[.15732758,.98645469],[.52209051,.58588566],[.46390086,1.22451528],[-.0775862,.90662598],[.22898706,1.14468658],[-.3690732,1.25017451],[.12392241,.7498196],[.16540948,.07555216],[-.0425646,1.25872759],[-.0010775,.58446014],[.59698275,.47897222],[-.1675646,1.09336813],[.30549568,.82252074],[.43049568,.9878802],[.79849137,.32216583],[.63200431,.83107382],[.20043103,.42765376],[.67349137,.15680638],[.50700431,.66571436],[.03394396,.93656175],[.34051724,1.17462234],[.875,0],[.70851293,.50890798],[.50215517,1.14611209],[-.0344827,.34782506],[.43857758,.07697767],[-.2009698,.85673304],[.27209051,.58588566],[.10560344,1.09479364],[.16702586,.19101868],[.47359913,.42907928],[.04202586,.02565922],[-.1244612,.5345672],[.41540948,1.0677089],[.55010775,.10691344],[.6169181,.91090252],[-.1260775,.7498196],[-.2925646,1.25872759],[.18049568,.9878802],[.54849137,.32216583],[.31519396,.02708473],[.38200431,.83107382],[-.0495689,.42765376],[.25700431,.66571436],[-.216056,.93656175],[.09051724,1.17462234],[.625,0],[.15193965,.27084738],[.45851293,.50890798],[-.0145474,.77975537],[.29202586,1.01781596],[.66002155,.3521016],[.02209051,.58588566],[-.2494612,.69992666],[.22359913,.42907928],[.05711206,.93798726],[.69665948,.15823189],[.53017241,.66713987],[.42510775,.27227289],[.8981681,.00142551],[.73168103,.51033349],[.30010775,.10691344],[.3669181,.91090252],[.56519396,1.01924148],[.80818965,.18816765],[.13200431,.83107382],[-.341056,1.1019212],[.80657327,.40342005],[-.0980603,.27084738],[.16702586,1.18317542],[.20851293,.50890798],[.6400862,.91232803],[.04202586,1.01781596],[-.2645474,.77975537],[-.4310344,1.28866335],[.41002155,.3521016],[.88308189,.08125421],[.24353448,.86100958],[.71659482,.59016219],[.55010775,1.09907018],[-.0630387,.62294898],[-.1928879,.93798726],[.17510775,.27227289],[.6481681,.00142551],[.00862068,.78118088],[.05010775,.10691344],[-.1578663,1.29008886],[.48168103,.51033349],[.31519396,1.01924148],[.37661637,.11546651],[.68318965,.35352711],[.51670258,.86243509],[.08512931,.45901504],[.15193965,1.26300412],[-.0813577,.96792302],[.75969827,.03136127],[.5932112,.54026926],[-.0829741,1.18317542],[.05172413,.22237995],[.59159482,.75552165],[.16002155,.3521016],[.42510775,1.26442964],[-.0064655,.86100958],[.30010775,1.09907018],[.36153017,.19529522],[.1950431,.7042032],[.66810344,.43335581],[.02855603,1.21311118],[.50161637,.9422638],[.86961206,.27654943],[-.0350215,.14397676],[-.2413793,.78118088],[-.4078663,1.29008886],[.06519396,1.01924148],[-.0398706,.6243745],[.43318965,.35352711],[.73976293,.59158771],[-.1648706,.45901504],[-.2063577,1.13328248],[-.3313577,.96792302],[.26670258,.86243509],[.16163793,.46756811],[.63469827,.19672073],[.4682112,.70562871],[.03663793,.30220866],[.50969827,.03136127],[-.1298491,.81111664],[.3432112,.54026926],[.54471982,.38346287],[.17995689,.7840319],[.85452586,.35637813],[.17510775,1.26442964],[.30980603,.30363417],[.37661637,1.10762325],[-.0549568,.7042032],[-.2214439,1.21311118],[.25161637,.9422638],[.61961206,.27654943],[-.0199353,1.0563048],[.02155172,.38203736],[.453125,.78545742],[.28663793,1.2943654],[.65463362,.62865103],[.22306034,.22523098],[.01670258,.86243509],[.69127155,.43478133],[-.2548491,.9764761],[.52478448,.94368931],[.2182112,.70562871],[.0932112,.54026926],[.05172413,1.2145367],[.89278017,.27797494],[-.0118534,.14540228],[.41971982,.54882233],[.76778017,.11261549],[-.1783405,.65431026],[.29471982,.38346287],[.12823275,.89237086],[-.2365301,1.29293989],[.49622844,.22665649],[.80280172,.46471709],[-.1018318,.33214442],[.43803879,.86528612],[.05980603,.30363417],[-.106681,.81254215],[.26131465,.14682779],[.56788793,.38488839],[-.2699353,1.0563048],[.203125,.78545742],[.03663793,1.2943654],[.40463362,.62865103],[-.0269396,.22523098],[.23814655,1.13755902],[-.1934267,.73413896],[.27963362,.46329158],[.00808189,.57733258],[.48114224,.3064852],[.95420258,.03563781],[-.1982758,1.2145367],[.68265086,.14967881],[.4762931,.78688293],[.04471982,.38346287],[.30980603,1.29579091],[-.1217672,.89237086],[.00323275,1.05773031],[.67780172,.63007655],[.24622844,.22665649],[.51131465,1.13898453],[.55280172,.46471709],[.07974137,.73556448],[.38631465,.97362507],[-.0867456,1.24447246],[-.2850215,1.13613351],[.44773706,.06985011],[.75431034,.30791071],[.38954741,.70847974],[.15625,.41339864],[.22306034,1.21738772],[.58782327,.81681869],[-.1551724,.65573577],[-.3216594,1.16464376],[.51939655,.228082],[.35290948,.73698999],[-.0118534,1.13755902],[.82920258,.20099727],[.18965517,.98075264],[.23114224,.3064852],[.66271551,.70990525],[-.4084051,1.08624057],[.06465517,.81539318],[.49622844,1.21881323],[.43265086,.14967881],[.26616379,.6585868],[.73922413,.38773941],[.05980603,1.29579091],[.09967672,1.16749478],[.26131465,1.13898453],[-.1702586,.73556448],[-.3367456,1.24447246],[.19773706,.06985011],[.03125,.57875809],[.50431034,.30791071],[.33782327,.81681869],[-.135237,1.08766608],[-.09375,.41339864],[.23275862,.42195171],[.70581896,.15110433],[.53933189,.66001231],[.10775862,.25659226],[-.0587284,.76550024],[.48114224,1.29864194],[.61584051,.33784647],[.10290948,.73698999],[.77747844,.30933622],[-.0603448,.98075264],[.24622844,1.21881323],[.07435344,.01995717],[.61422413,.55309887],[.38092672,.25801777],[.44773706,1.06200685],[.01616379,.6585868],[-.1503232,1.16749478],[.32273706,.8966474],[.21767241,.50178042],[.69073275,.23093303],[.05118534,1.0106884],[.52424568,.73984101],[.35775862,1.248749],[.89224137,.07412665],[.72575431,.58303463],[-.21875,.57875809],[.51939655,1.22023875],[-.385237,1.08766608],[.08782327,.81681869],[-.0172413,.42195171],[.45581896,.15110433],[-.1837284,.9308597],[.28933189,.66001231],[.12284482,1.16892029],[.76239224,.38916492],[.59590517,.89807291],[-.4752155,1.27440822],[.49084051,.50320593],[.05926724,.09978587],[-.1072198,.60869386],[.36584051,.33784647],[.19935344,.84675446],[.43265086,1.14183556],[.56734913,.18104009],[.13092672,.25801777],[.39601293,1.17034581],[.19773706,1.06200685],[-.4003232,1.16749478],[.33243534,.10121139],[-.0323275,.50178042],[-.1988146,1.0106884],[.27424568,.73984101],[.10775862,1.248749],[.64224137,.07412665],[.47575431,.58303463],[.30926724,1.09194262],[-.1271551,1.16892029],[-.2322198,.77405331],[.24084051,.50320593],[-.3987068,1.2829613],[.11584051,.33784647],[.07435344,1.01211391],[.54741379,.74126653],[.38092672,1.25017451],[.44234913,.34639955],[.91540948,.07555216],[.74892241,.58446014],[-.1557112,.45188748],[.31734913,.18104009],[.15086206,.68994807],[.62392241,.41910069],[-.015625,1.19885606],[.58243534,1.09336813],[.51885775,.02423371],[.82543103,.26229431],[.65894396,.77120229],[.08243534,.10121139],[-.0840517,.61011937],[.59051724,.1824656],[.11745689,.45331299],[.22575431,.58303463],[.42403017,.69137359],[.05926724,1.09194262],[-.247306,.85388202],[.79202586,.02565922],[.90032327,.15538086],[-.0043103,.0228082],[.26077586,.93513623],[.7338362,.66428885],[-.1756465,1.01211391],[.13092672,1.25017451],[.19234913,.34639955],[.02586206,.85530753],[.49892241,.58446014],[.33243534,1.09336813],[-.0991379,.68994807],[-.265625,1.19885606],[.70043103,.42765376],[.26885775,.02423371],[.53394396,.93656175],[.10237068,.53314169],[.57543103,.26229431],[-.0641163,1.04204968],[.40894396,.77120229],[.77693965,.10548792],[.61045258,.61439591],[.34051724,.1824656],[-.1325431,.45331299],[-.2990301,.96222097],[.54202586,.02565922],[.06896551,.29650661],[.37553879,.5345672],[.84859913,.26371982],[.01077586,.93513623],[.31734913,1.17319683],[.68534482,.50748247],[.25377155,.10406241],[.04579741,1.28723784],[.51885775,1.01639045],[-.2241379,.85530753],[.08243534,1.09336813],[-.0226293,.69850115],[.45043103,.42765376],[-.1891163,1.20740913],[-.1476293,.53314169],[.28394396,.93656175],[-.3141163,1.04204968],[.15894396,.77120229],[.48545258,.77975537],[.05387931,.37633531],[.52693965,.10548792],[.83351293,.34354852],[-.1126077,.88524329],[.36045258,.61439591],[.19396551,1.12330389],[.25538793,.21952893],[.5619612,.45758953],[.29202586,.02565922],[.12553879,.5345672],[-.0409482,1.04347519],[.32704741,.37776082],[.80010775,.10691344],[.63362068,.61582142],[-.2042025,1.28723784],[.26885775,1.01639045],[.40355603,.05559498],[.47036637,.85958407],[.0387931,.45616401],[.71336206,.02851025],[.07381465,.80826562],[-.4391163,1.20740913],[.74838362,.38061185],[.23545258,.77975537],[.54202586,1.01781596],[.11045258,.61439591],[.06896551,1.28866335],[-.0560344,1.12330389],[.00538793,.21952893],[.27047413,1.13185697],[.78502155,.18674214],[-.1610991,.72843691],[.61853448,.69565012],[.3119612,.45758953],[.45204741,1.20455811],[.14547413,.96649751],[.98653017,.02993576],[.51346982,.30078315],[-.0845905,.40627107],[-.2909482,1.04347519],[.07704741,.37776082],[-.0894396,.88666881],[.38362068,.61582142],[.11206896,.72986243],[.15355603,.05559498],[.58512931,.45901504],[-.012931,.56450297],[.41864224,.96792302],[.78663793,.30220866],[.66163793,.1368492],[-.1761853,.80826562],[.296875,.53741823],[-.3426724,1.3171736],[.49838362,.38061185],[.33189655,.88951983],[-.1810344,1.28866335],[-.0463362,.32786788],[.49353448,.86100958],[.02047413,1.13185697],[-.1045258,.96649751],[.26346982,.30078315],[.52855603,1.21311118],[.5700431,.53884374],[-.3760775,1.08053852],[.40355603,1.04775173],[.13846982,.13542369],[.09698275,.80969113],[-.0695043,1.31859911],[.77155172,.38203736],[.29849137,.65288475],[.60506465,.89094534],[.17349137,.48752529],[.84806034,.05987152],[.33512931,.45901504],[-.3044181,1.23877041],[.16864224,.96792302],[.37015086,.81111664],[-.0614224,.40769659],[.00538793,1.21168567],[-.2279094,.91660457],[.1400862,.25089021],[.44665948,.4889508],[-.3911637,1.16036722],[.08189655,.88951983],[.28340517,.73271345],[.75646551,.46186606],[.1169181,1.24162143],[.58997844,.97077405],[.27855603,1.21311118],[-.1530172,.80969113],[.15355603,1.04775173],[-.3195043,1.31859911],[.21497844,.14397676],[.52155172,.38203736],[.04849137,.65288475],[.35506465,.89094534],[-.1179956,1.16179273],[-.0765086,.48752529],[-.2429956,.99643327],[.72306034,.22523098],[.55657327,.73413896],[.125,.33071891],[.59806034,.05987152],[-.041487,.83962689],[.43157327,.56877951],[.32650862,.17391253],[.63308189,.41197312],[-.0463362,1.32002463],[.15517241,1.16321824],[-.2764008,.75979819],[.19665948,.4889508],[.26346982,1.29293989],[.62823275,.89237086],[.09159482,.09408382],[.3981681,.33214442],[.87122844,.06129704],[.03340517,.73271345],[-.1330818,1.24162143],[.33997844,.97077405],[.70797413,.30505968],[.47467672,.00997858],[.54148706,.81396767],[-.0032327,.7612237],[-.2015086,.65288475],[-.3679956,1.16179273],[.47306034,.22523098],[.6713362,.33356993],[.30657327,.73413896],[-.166487,1.00498635],[-.125,.33071891],[.18157327,.56877951],[-.291487,.83962689],[.0150862,1.07768749],[.1400862,1.24304695],[.61314655,.97219956],[.50808189,.57733258],[.07650862,.17391253],[-.0899784,.68282051],[.38308189,.41197312],[.21659482,.92088111],[.85614224,.14112574],[.68965517,.65003372],[.58459051,.25516674],[.1481681,.33214442],[.41325431,1.24447246],[-.0183189,.84105241],[.34967672,.17533804],[.65625,.41339864],[.22467672,.00997858],[.48976293,.92230662],[.18318965,.68424602],[.29148706,.81396767],[.85775862,.25659226],[.32650862,1.16606927],[-.1099137,1.24304695],[.25808189,.57733258],[.02478448,.28225148],[.09159482,1.08624057],[.56465517,.81539318],[-.0334051,.92088111],[.93265086,.14967881],[-.1384698,.52601413],[.33459051,.25516674],[-.3049568,1.03492211],[.16810344,.76407473],[.00161637,1.27298271],[.64116379,.49322734],[.47467672,1.00213532],[.53609913,.09836036],[.84267241,.33642096],[.67618534,.84532894],[-.2683189,.84105241],[.09967672,.17533804],[.40625,.41339864],[-.0668103,.68424602],[.23976293,.92230662],[-.2332974,1.19315401],[.30118534,.01853166],[.60775862,.25659226],[.13469827,.52743964],[.44127155,.76550024],[.00969827,.36208019],[.07650862,1.16606927],[.80926724,.09978587],[.21120689,.2052738],[.51778017,.4433344],[-.1584051,1.08624057],[-.0237068,.1254451],[.51616379,.6585868],[.34967672,1.16749478],[-.0818965,.76407473],[-.2483836,1.27298271],[.22467672,1.00213532],[.28609913,.09836036],[.55118534,1.0106884],[.11961206,.60726835],[.59267241,.33642096],[-.046875,1.11617633],[.42618534,.84532894],[.79418103,.17961458],[.62769396,.68852256],[.05118534,.01853166],[.35775862,.25659226],[-.1153017,.52743964],[.19127155,.76550024],[-.2817887,1.03634763],[.02478448,1.27440822],[.55926724,.09978587],[.08620689,.37063326],[.39278017,.60869386],[.86584051,.33784647],[-.0387931,.2052738],[-.2052801,.71418179],[.33459051,1.24732348],[.16271551,.04846742],[.46928879,.28652802],[.94234913,.01568063],[-.2068965,.92943418],[.46767241,.50178042],[.234375,.20669932],[.30118534,1.0106884],[-.1303879,.60726835],[-.296875,1.11617633],[.17618534,.84532894],[.07112068,.45046196],[.54418103,.17961458],[-.0953663,.95936995],[.37769396,.68852256],[.21120689,1.19743055],[.74245689,.28795353],[.57920258,.53171618],[.14762931,.12829613],[-.2252155,1.27440822],[.30926724,.09978587],[.14278017,.60869386],[-.3302801,.87954124],[-.0237068,1.11760184],[.44935344,.84675446],[.34428879,.45188748],[.81734913,.18104009],[.17780172,.96079546],[.21928879,.28652802],[.65086206,.68994807],[.05280172,.795436],[.484375,1.19885606],[.42079741,.12972164],[.72737068,.36778224],[-.015625,.20669932],[.18588362,.04989293],[.01939655,.55880092],[.55926724,1.09194262],[-.3453663,.95936995],[-.0387931,1.19743055],[.49568965,.0228082],[.69396551,.13114715],[.32920258,.53171618],[.63577586,.76977678],[-.3103448,1.31147155],[.46928879,1.27868476],[.16271551,1.04062416],[.36422413,.88381778],[-.0673491,.48039773],[.4057112,.20955034],[-.2737068,1.11760184],[.09428879,.45188748],[.60721982,.05274396],[-.0721982,.96079546],[.40086206,.68994807],[.234375,1.19885606],[-.1971982,.795436],[.76885775,.02423371],[.12931034,.80398908],[.17079741,.12972164],[.60237068,.53314169],[.00431034,.63862962],[.47737068,.36778224],[-.1621767,1.14753761],[.43588362,1.04204968],[.80387931,.37633531],[.20581896,.48182324],[.67887931,.21097585],[.51239224,.71988384],[.88038793,.05416947],[-.3970905,1.0677089],[-.0290948,.40199454],[.51077586,.93513623],[.44396551,.13114715],[.27747844,.64005513],[-.0872844,1.04062416],[.21928879,1.27868476],[.04741379,.0798287],[.58728448,.6129704],[.11422413,.88381778],[.42079741,1.12187838],[.7887931,.45616401],[.35721982,.05274396],[.62230603,.965072],[-.3221982,.96079546],[-.2823275,.83249933],[.19073275,.56165194],[.86530172,.13399818],[.35237068,.53314169],[-.2871767,1.31289706],[.18588362,1.04204968],[.49245689,1.28011027],[-.4121767,1.14753761],[.39224137,.40484556],[.38739224,.88524329],[-.044181,.48182324],[.42887931,.21097585],[-.2106681,.99073122],[.26239224,.71988384],[.15732758,.32501686],[.63038793,.05416947],[.46390086,.56307746],[.03232758,.1596574],[.09913793,.96364649],[.2338362,.00285102],[.70204741,.21240137],[.22898706,.48324875],[.0625,.99215674],[-.1357758,.88381778],[.90355603,.05559498],[.73706896,.56450297],[.5387931,.45616401],[.37230603,.965072],[-.0592672,.56165194],[-.1007543,1.23591938],[-.2257543,1.07055993],[.61530172,.13399818],[.14224137,.40484556],[-.0242456,.91375355],[.44881465,.64290616],[.65032327,.48609978],[.44396551,1.12330389],[-.0926724,.32501686],[.38038793,.05416947],[-.2591594,.83392484],[.21390086,.56307746],[.04741379,1.07198544],[.17241379,1.2373449],[.1088362,.16821048],[.41540948,.40627107],[.88846982,.13542369],[.24892241,.91517906],[-.1826508,.511759],[.29040948,.24091162],[.35721982,1.0449007],[.72198275,.64433167],[.55549568,1.15323966],[.4919181,.08410524],[-.1875,.99215674],[.48706896,.56450297],[-.3507543,1.23591938],[.25700431,.00427653],[.32381465,.80826562],[.09051724,.51318452],[.15732758,1.3171736],[-.2742456,.91375355],[-.1077586,.40484556],[.03232758,1.15181414],[.7650862,.08553075],[-.072737,.75694716],[.40032327,.48609978],[-.2392241,1.26585515],[.2338362,.99500776],[.70689655,.72416038],[.60183189,.3292934],[-.2025862,1.07198544],[.16540948,.40627107],[.43049568,1.31859911],[-.0010775,.91517906],[.47198275,.64433167],[.30549568,1.15323966],[.3669181,.24946469],[.20043103,.75837268],[.2419181,.08410524],[.50700431,.99643327],[.07543103,.59301322],[.67349137,.48752529],[-.091056,1.1019212],[.75,.16535945],[.27693965,.43620684],[.58351293,.67426744],[.95150862,.00855307],[.00700431,.00427653],[-.1594827,.51318452],[-.0926724,1.3171736],[.04202586,.35637813],[.5150862,.08553075],[.58189655,.88951983],[-.0161637,.99500776],[.29040948,1.23306836],[.35183189,.3292934],[.11853448,.0342123],[.18534482,.83820138],[.65840517,.56735399],[.4919181,1.07626198],[-.2510775,.91517906],[.1169181,.24946469],[-.0495689,.75837268],[.42349137,.48752529],[.25700431,.99643327],[-.1745689,.59301322],[-.216056,1.26728066],[.625,.33071891],[.15193965,.6015663],[.45851293,.83962689],[.5,.16535945],[.02693965,.43620684],[.33351293,.67426744],[-.1395474,.94511482],[.82650862,.17391253],[.70150862,.00855307],[.22844827,.27940046],[.53502155,.51746105],[.2650862,.08553075],[-.0064655,.19957175],[.30010775,.43763235],[.3669181,1.24162143],[-.0646551,.83820138],[.13362068,.94654033],[.2419181,1.07626198],[.97467672,.00997858],[.60991379,.41054761],[-.0296336,1.19030298],[.44342672,.9194556],[.64493534,.76264921],[-.466056,1.26728066],[.375,.33071891],[-.0980603,.6015663],[.20851293,.83962689],[-.2645474,1.11047428],[.5150862,1.07768749],[.57650862,.17391253],[.41002155,.68282051],[.45150862,.00855307],[.24353448,1.1917285],[.28502155,.51746105],[-.0215517,.27940046],[.11853448,1.02636904],[-.1880387,.78830844],[-.3545258,1.29721642],[.17995689,.12259408],[.48653017,.36065467],[.95959051,.08980729],[.05010775,.43763235],[.25161637,.28082597],[.72467672,.00997858],[-.1131465,.681395],[.08512931,.78973395],[-.2796336,1.19030298],[.55818965,.51888657],[.56142241,.25374123],[.75969827,.36208019],[.39493534,.76264921],[.22844827,1.2715572],[.16487068,.20242278],[.83620689,.03991435],[.16002155,.68282051],[-.3130387,.9536679],[-.0064655,1.1917285],[.46659482,.92088111],[-.1314655,1.02636904],[.36153017,.52601413],[.83459051,.25516674],[.1950431,1.03492211],[.23653017,.36065467],[.66810344,.76407473],[.0700431,.86956266],[.54310344,.59871527],[.50161637,1.27298271],[-.2365301,.63150206],[-.4030172,1.14041004],[.43803879,.20384829],[.27155172,.71275627],[.74461206,.44190889],[.578125,.95081687],[.00161637,.28082597],[-.1648706,.78973395],[-.3313577,1.29864194],[.203125,.12401959],[.03663793,.63292757],[.50969827,.36208019],[.3432112,.87098817],[-.0215517,1.2715572],[.71120689,.2052738],[.11314655,.31076173],[.65301724,.84390343],[-.2516163,.71133076],[.17995689,1.11475082],[.42295258,.28367699],[-.2564655,1.1917285],[-.0549568,1.03492211],[.41810344,.76407473],[.25161637,1.27298271],[-.1799568,.86956266],[.61961206,.60726835],[.18803879,.20384829],[.453125,1.11617633],[.02155172,.71275627],[.49461206,.44190889],[-.1449353,1.22166426],[.328125,.95081687],[.38954741,.04704191],[.22306034,.55594989],[.69612068,.28510251],[.52963362,.79401049],[.89762931,.12829613],[.29956896,.23378405],[-.213362,.63292757],[-.3798491,1.14183556],[.25969827,.36208019],[.0932112,.87098817],[-.0118534,.47612119],[.46120689,.2052738],[.76778017,.4433344],[.29471982,.71418179],[-.0700431,1.11475082],[-.3033405,.81966972],[.12823275,1.22308977],[.66271551,.04846742],[.06465517,.15395535],[.60452586,.68709705],[.37122844,.39201595],[.43803879,1.19600503],[.00646551,.79258498],[.68103448,.36493121],[.20797413,.6357786],[.8825431,.20812483],[.203125,1.11617633],[-.2284482,.71275627],[-.3949353,1.22166426],[.13954741,.04704191],[.40463362,.95936995],[-.0269396,.55594989],[.44612068,.28510251],[-.1934267,1.06485788],[.27963362,.79401049],[.11314655,1.30291847],[.58620689,1.03207109],[.64762931,.12829613],[.48114224,.63720411],[.04956896,.23378405],[.31465517,1.14611209],[.25107758,.07697767],[.04471982,.71418179],[-.1217672,1.22308977],[.71928879,.28652802],[.24622844,.55737541],[.55280172,.795436],[.07974137,1.06628339],[.38631465,1.30434399],[.92079741,.12972164],[.75431034,.63862962],[.32273706,.23520957],[.15625,.74411755],[-.0420258,.6357786],[-.2085129,1.14468658],[.6325431,.20812483],[.83081896,.31646378],[.46605603,.71703281],[-.0070043,.9878802],[.46120689,1.19743055],[-.1368534,1.30291847],[-.075431,.39914351],[.39762931,.12829613],[-.2419181,.9080515],[.23114224,.63720411],[.06465517,1.14611209],[.59590517,.23663508],[.53771551,.87526471],[.43265086,.48039773],[.00107758,.07697767],[.26616379,.98930571],[-.1654094,.58588566],[.30765086,.31503827],[-.3318965,1.09479364],[.9057112,.20955034],[-.3717672,1.22308977],[.50915948,.15823189],[.30280172,.795436],[.34267241,.66713987],[-.1702586,1.06628339],[.50431034,.63862962],[.07273706,.23520957],[.33782327,1.14753761],[-.09375,.74411755],[.27424568,.07840319],[.58081896,.31646378],[.10775862,.58731117],[-.2570043,.9878802],[.04956896,1.2259408],[.78232758,.1596574],[.41756465,.56022643],[.18426724,.26514533],[.25107758,1.06913441],[-.1853448,1.14611209],[.18265086,.48039773],[-.4568965,1.2601531],[.01616379,.98930571],[.48922413,.71845833],[-.1088362,.82394625],[.32273706,1.22736631],[.85721982,.05274396],[.21767241,.83249933],[.25915948,.15823189],[.69073275,.56165194],[.09267241,.66713987],[.56573275,.39629249],[-.0738146,1.17604786],[.52424568,1.07055993],[.4606681,.00142551],[.29418103,.51033349],[.76724137,.23948611],[.60075431,.74839409],[.08782327,1.14753761],[.02424568,.07840319],[.33081896,.31646378],[-.1422413,.58731117],[-.3087284,1.09621915],[.53232758,.1596574],[.05926724,.43050479],[.36584051,.66856539],[-.0657327,.26514533],[.00107758,1.06913441],[.19935344,1.17747337],[.7338362,.00285102],[.13577586,.10833895],[.67564655,.64148065],[.50915948,1.15038863],[-.2338362,.98930571],[-.0323275,.83249933],[.44073275,.56165194],[.27424568,1.07055993],[-.1573275,.66713987],[-.3238146,1.17604786],[.64224137,.40484556],[.2106681,.00142551],[.47575431,.91375355],[.04418103,.51033349],[.51724137,.23948611],[.35075431,.74839409],[-.122306,1.01924148],[.18426724,1.25730207],[.71875,.08267972],[.24568965,.35352711],[.55226293,.59158771],[.38577586,1.10049569],[.34590517,1.22879182],[.28232758,.1596574],[.11584051,.66856539],[-.0506465,1.17747337],[.01077586,.27369841],[.4838362,.00285102],[.31734913,.511759],[.79040948,.24091162],[.15086206,1.02066699],[.62392241,.7498196],[.39385775,.18959317],[.4606681,.99358225],[.22737068,.69850115],[.15894396,.10976446],[.22575431,.91375355],[.53232758,1.15181414],[-.372306,1.01924148],[-.0657327,1.25730207],[.46875,.08267972],[.26077586,1.26585515],[.30226293,.59158771],[-.0043103,.35352711],[.13577586,1.10049569],[.6088362,.8296483],[-.1707974,.86243509],[.50377155,.43478133],[.33728448,.94368931],[.06734913,.511759],[-.0991379,1.02066699],[-.2042025,.62580001],[.26885775,.35495262],[.10237068,.86386061],[.14385775,.18959317],[.7419181,.08410524],[.57543103,.59301322],[.40894396,1.1019212],[.47036637,.19814624],[.77693965,.43620684],[.34536637,.03278678],[.17887931,.54169477],[.65193965,.27084738],[.65517241,.00570205],[.85344827,.114041],[.17726293,.75694716],[-.0560344,.46186606],[.01077586,1.26585515],[.4838362,.99500776],[-.1142241,1.10049569],[.61853448,.0342123],[.25377155,.43478133],[-.2192887,.70562871],[.08728448,.94368931],[.56034482,.67284192],[.39385775,1.18174991],[-.3857758,1.2145367],[.45528017,.27797494],[.92834051,.00712756],[.2887931,.78688293],[.76185344,.51603554],[.59536637,1.02494353],[-.3491379,1.02066699],[.01885775,.35495262],[-.1476293,.86386061],[.32543103,.59301322],[.15894396,1.1019212],[.22036637,.19814624],[.05387931,.70705422],[.09536637,.03278678],[.52693965,.43620684],[-.0711206,.54169477],[.36045258,.94511482],[-.2376077,1.05060275],[.72844827,.27940046],[.13038793,.38488839],[.60344827,.114041],[.4369612,.62294898],[.36853448,.0342123],[.43534482,.83820138],[-.1045258,.30505968],[-.1627155,.94368931],[.20528017,.27797494],[.47036637,1.19030298],[.0387931,.78688293],[.51185344,.51603554],[-.1276939,1.29579091],[.34536637,1.02494353],[.71336206,.35922916],[.546875,.86813714],[.31681034,.30791071],[-.1961206,.70705422],[-.3626077,1.21596221],[.11045258,.94511482],[.47844827,.27940046],[.78502155,.51746105],[-.119612,.38488839],[-.1610991,1.05915583],[-.2860991,.89379637],[.35344827,.114041],[.1869612,.62294898],[.3119612,.78830844],[.14547413,1.29721642],[.08189655,.228082],[.86153017,.19529522],[.38846982,.4661426],[.02370689,.86671163],[.22198275,.97505059],[.69827586,.43905786],[.15355603,.3863139],[.22036637,1.19030298],[-.012931,.89522188],[-.3776939,1.29579091],[.35506465,.22950752],[.46336206,.35922916],[.66163793,.46756811],[-.1761853,1.13898453],[-.1346982,.46471709],[.296875,.86813714],[.49838362,.71133076],[.06681034,.30791071],[.53987068,.03706332],[-.0996767,.81681869],[.33189655,1.22023875],[.57489224,.38916492],[.0619612,.78830844],[.36853448,1.02636904],[-.1045258,1.29721642],[.73653017,.36065467],[.5700431,.86956266],[.13846982,.4661426],[.09698275,1.14041004],[-.0280172,.97505059],[.03340517,.07127562],[.81303879,.03848883],[-.1330818,.58018361],[.64655172,.54739682],[.33997844,.30933622],[.48006465,1.0563048],[-.1912715,1.21881323],[.17349137,.8182442],[.84806034,.39059044],[-.0964439,.3863139],[-.0614224,.7384155],[.41163793,.46756811],[-.4261853,1.13898453],[.47844827,1.2715572],[.61314655,.31076173],[.24838362,.71133076],[.08189655,1.22023875],[.55495689,.94939136],[.01831896,.15110433],[-.1481681,.66001231],[.32489224,.38916492],[-.3146551,1.16892029],[.15840517,.89807291],[.52640086,.23235854],[.3200431,.86956266],[.35991379,.74126653],[-.2780172,.97505059],[.08997844,.30933622],[.35506465,1.22166426],[.39655172,.54739682],[-.0765086,.8182442],[.29148706,.15252984],[.59806034,.39059044],[.125,.66143782],[.43157327,.89949842],[0,.49607837],[.06681034,1.30006745],[.79956896,.23378405],[.20150862,.33927198],[.67456896,.0684246],[-.2764008,1.0905171],[.19665948,.81966972],[-.1681034,1.22023875],[-.0334051,.25944328],[.03340517,1.06343236],[.50646551,.79258498],[.33997844,1.30149296],[-.0915948,.89807291],[.27640086,.23235854],[.54148706,1.14468658],[-.3631465,1.01211391],[.10991379,.74126653],[-.0565732,1.25017451],[.58297413,.47041914],[.41648706,.97932712],[.31142241,.58446014],[.78448275,.31361276],[.61799568,.82252074],[.04148706,.15252984],[.34806034,.39059044],[-.125,.66143782],[-.291487,1.17034581],[.18157327,.89949842],[.54956896,.23378405],[.07650862,.50463144],[.38308189,.74269204],[-.0484913,.33927198],[.42456896,.0684246],[-.2149784,.84817997],[.21659482,1.25160002],[.75107758,.07697767],[.15301724,.1824656],[.45959051,.4205262],[.52640086,1.22451528],[-.0183189,1.17177132],[.65625,.74411755],[.22467672,.3406975],[.29148706,1.14468658],[-.1400862,.74126653],[-.3065732,1.25017451],[.06142241,.58446014],[.53448275,.31361276],[-.1050646,1.09336813],[.36799568,.82252074],[.73599137,.15680638],[.56950431,.66571436],[.40301724,1.17462234],[.36314655,1.30291847],[-.1734913,.50463144],[-.3399784,1.01353943],[.13308189,.74269204],[-.0334051,1.25160002],[.43965517,.98075264],[.50107758,.07697767],[-.1384698,.85673304],[.33459051,.58588566],[.16810344,1.09479364],[.20959051,.4205262],[.80765086,.31503827],[-.4299568,1.20028157],[.04310344,.92943418],[.64116379,.82394625],[.53609913,.42907928],[.10452586,.02565922],[.41109913,.26371982],[.24461206,.7726278],[.71767241,.50178042],[-.0253232,.3406975],[.23976293,1.25302554],[.17618534,.18389112],[.00969827,.6927991],[-.3550646,1.09336813],[.37769396,.02708473],[.68426724,.26514533],[.31950431,.66571436],[.62607758,.90377496],[.15301724,1.17462234],[.35452586,1.01781596],[-.2834051,1.25160002],[.08459051,.58588566],[-.0818965,1.09479364],[.39116379,.82394625],[.28609913,.42907928],[.75915948,.15823189],[.11961206,.93798726],[.16109913,.26371982],[.59267241,.66713987],[-.0053879,.7726278],[.42618534,1.17604786],[-.171875,1.28153579],[.9606681,.00142551],[.79418103,.51033349],[-.1104525,.37776082],[.36260775,.10691344],[.19612068,.61582142],[.66918103,.34497403],[.50269396,.85388202],[.87068965,.18816765],[-.2403017,.6927991],[.12769396,.02708473],[.43426724,.26514533],[.50107758,1.06913441],[-.0387931,.53599272],[-.0969827,1.17462234],[.63577586,.10833895],[.27101293,.50890798],[.03771551,.21382688],[.10452586,1.01781596],[.5775862,.74696858],[.41109913,1.25587656],[.54903017,.02993576],[.03609913,.42907928],[-.1303879,.93798726],[.17618534,1.17604786],[-.2553879,.7726278],[-.421875,1.28153579],[.7106681,.00142551],[.07112068,.78118088],[.11260775,.10691344],[-.0953663,1.29008886],[-.0538793,.61582142],[.41918103,.34497403],[-.2203663,1.1247294],[.54418103,.51033349],[.25269396,.85388202],[.37769396,1.01924148],[.14762931,.45901504],[.62068965,.18816765],[.45420258,.69707564],[.28771551,1.20598362],[.82219827,.03136127],[.38577586,.10833895],[-.0872844,.37918634],[.21928879,.61724693],[-.2537715,.88809432],[.05280172,1.12615492],[.42079741,.46044055],[.89385775,.18959317],[.52909482,.59016219],[.72737068,.69850115],[.36260775,1.09907018],[-.0107758,.0570205],[.29903017,.02993576],[.56411637,.9422638],[-.1788793,.78118088],[-.3453663,1.29008886],[.12769396,1.01924148],[.43426724,1.25730207],[.49568965,.35352711],[.26239224,.05844601],[.32920258,.86243509],[-.1023706,.45901504],[-.2688577,.96792302],[.20420258,.69707564],[.03771551,1.20598362],[.09913793,.30220866],[.57219827,.03136127],[.87877155,.26942187],[-.025862,.1368492],[-.0673491,.81111664],[.4057112,.54026926],[.23922413,1.04917724],[-.0307112,.61724693],[-.1971982,1.12615492],[.17079741,.46044055],[.64385775,.18959317],[.00431034,.96934854],[.47737068,.69850115],[.37230603,.30363417],[.84536637,.03278678],[.67887931,.54169477],[.24730603,.13827471],[.31411637,.9422638],[.08081896,.6471827],[.55711206,.11118997],[.75538793,.21952893],[-.0824353,.89094534],[.01239224,.05844601],[.59213362,.46329158],[.07920258,.86243509],[-.2122844,1.20598362],[.75377155,.43478133],[.58728448,.94368931],[.1557112,.54026926],[.11422413,1.2145367],[.46228448,.77832985],[-.4838362,1.32002463],[.29579741,1.28723784],[-.0107758,1.04917724],[.83028017,.11261549],[.35721982,.38346287],[.6637931,.62152347],[.23221982,.21810342],[.49730603,1.13043145],[.19073275,.89237086],[-.0792025,.46044055],[-.0393318,.33214442],[-.2456896,.96934854],[.43372844,.06129704],[-.044181,.81254215],[-.0026939,.13827471],[-.2106681,1.32145014],[.42887931,.54169477],[.26239224,1.05060275],[.63038793,.38488839],[.46390086,.89379637],[.03232758,.49037632],[.50538793,.21952893],[-.3324353,.89094534],[.57219827,1.02351801],[.70689655,.06272255],[.34213362,.46329158],[-.2974137,1.24304695],[.17564655,.97219956],[.10721982,.38346287],[.37230603,1.29579091],[.4137931,.62152347],[-.0592672,.89237086],[.24730603,1.13043145],[-.1842672,.7270114],[.30549568,.49180183],[.61530172,.46471709],[.18372844,.06129704],[.44881465,.97362507],[.49030172,.29935763],[.01724137,.57020502],[.14224137,.73556448],[.81681034,.30791071],[.21875,.41339864],[.69181034,.14255125],[-.4606681,1.32145014],[.01239224,1.05060275],[.21390086,.89379637],[.6869612,.62294898],[.52047413,1.13185697],[-.0161637,.33356993],[.45689655,.06272255],[-.1826508,.84247792],[.29040948,.57163053],[-.0743534,.97219956],[.06034482,.0114041],[.12715517,.81539318],[.60021551,.54454579],[.43372844,1.05345378],[.63523706,.8966474],[.73006465,.06414806],[.05872844,.22665649],[-.1077586,.73556448],[.19881465,.97362507],[-.2742456,1.24447246],[.50538793,1.21168567],[-.3992456,1.079113],[.56681034,.30791071],[.40032327,.81681869],[.44181034,.14255125],[-.072737,1.08766608],[-.03125,.41339864],[-.197737,.92230662],[.27532327,.65145923],[.17025862,.25659226],[.47683189,.49465285],[.31034482,1.00356084],[.47198275,.97505059],[.04040948,.57163053],[-.0646551,.17676355],[-.2311422,.68567154],[.2419181,.41482415],[.07543103,.92373213],[.71497844,.14397676],[.44342672,.25801777],[.75,.49607837],[.31842672,.09265831],[.38523706,.8966474],[.42025862,1.248749],[.15032327,.81681869],[-.322737,1.08766608],[.45689655,1.05487929],[-.1411637,1.16036722],[.35183189,.66001231],[-.0797413,.25659226],[.18534482,1.16892029],[-.2462284,.76550024],[.22683189,.49465285],[-.4127155,1.27440822],[.06034482,1.00356084],[.82489224,.38916492],[.53340517,.73271345],[.65840517,.89807291],[-.0447198,.60869386],[.42834051,.33784647],[.26185344,.84675446],[.90140086,.06699909],[.73491379,.57590707],[.56842672,1.08481505],[.62984913,.18104009],[-.0080818,.41482415],[-.1745689,.92373213],[.19342672,.25801777],[.5,.49607837],[.06842672,.09265831],[.33351293,1.00498635],[.02693965,.76692575],[.39493534,.10121139],[.70150862,.33927198],[.10344827,.44475991],[.17025862,1.248749],[.77801724,.01710615],[.10183189,.66001231],[-.1314655,.36493121],[-.0646551,1.16892029],[-.1896551,1.00356084],[.77640086,.23235854],[.60991379,.74126653],[.17834051,.33784647],[.44342672,1.25017451],[.01185344,.84675446],[.48491379,.57590707],[.31842672,1.08481505],[.37984913,.18104009],[.21336206,.68994807],[.68642241,.41910069],[.51993534,.92800867],[.88793103,.26229431],[-.0565732,.25801777],[-.2230603,.76692575],[-.3895474,1.27583374],[.14493534,.10121139],[.45150862,.33927198],[-.0215517,.61011937],[.28502155,.84817997],[.75808189,.57733258],[-.1465517,.44475991],[-.1880387,1.11902735],[.65301724,.1824656],[.48653017,.69137359],[.52801724,.01710615],[.59482758,.82109523],[.05495689,.28795353],[-.1131465,1.01211391],[.19342672,1.25017451],[.12984913,.18104009],[.328125,.28937904],[-.0366379,.68994807],[.39493534,1.09336813],[-.203125,1.19885606],[.26993534,.92800867],[.16487068,.53314169],[.63793103,.26229431],[-.0016163,1.04204968],[.47144396,.77120229],[.30495689,1.28011027],[.03502155,.84817997],[.40301724,.1824656],[-.0700431,.45331299],[.23653017,.69137359],[.70959051,.4205262],[.0700431,1.20028157],[.54310344,.92943418],[-.2365301,.96222097],[.60452586,.02565922],[.43803879,.5345672],[.00646551,.13114715],[.31303879,.36920775],[.37984913,1.17319683],[.14655172,.87811573],[-.1600215,.64005513],[.51454741,.21240137],[.82112068,.45046196],[.078125,.28937904],[.14493534,1.09336813],[-.453125,1.19885606],[.27963362,.13257266],[-.0851293,.53314169],[-.2516163,1.04204968],[.22144396,.77120229],[.52801724,1.00926289],[.05495689,1.28011027],[.58943965,.10548792],[.42295258,.61439591],[-.0086206,.21097585],[.25646551,1.12330389],[.19288793,.05416947],[-.0134698,.69137359],[-.1799568,1.20028157],[.18803879,.5345672],[.66109913,.26371982],[.02155172,1.04347519],[.06303879,.36920775],[.49461206,.7726278],[-.1034482,.87811573],[.328125,1.28153579],[-.2850215,.80541459],[.38954741,.37776082],[.86260775,.10691344],[.69612068,.61582142],[.26454741,.21240137],[.52963362,1.1247294],[.09806034,.72130935],[.57112068,.45046196],[-.2667025,1.12187838],[.46605603,.05559498],[.77262931,.29365558],[.40786637,.69422461],[.02963362,.13257266],[-.1368534,.64148065],[-.3033405,1.15038863],[.53771551,.21382688],[.60452586,1.01781596],[.17295258,.61439591],[.37122844,.72273486],[.00646551,1.12330389],[.84752155,.18674214],[.68103448,.69565012],[.2494612,.29223007],[.51454741,1.20455811],[.20797413,.96649751],[.45096982,.13542369],[-.2284482,1.04347519],[.078125,1.28153579],[-.0269396,.88666881],[.01454741,.21240137],[.44612068,.61582142],[-.1519396,.72130935],[.27963362,1.1247294],[-.3184267,1.23021733],[.64762931,.45901504],[.21605603,.05559498],[.48114224,.96792302],[.04956896,.56450297],[.52262931,.29365558],[-.1169181,1.07341095],[.35614224,.80256357],[-.0086206,1.2031326],[.18965517,1.31147155],[.72413793,.1368492],[.55765086,.64575718],[.12607758,.24233713],[.66594827,.77547883],[.28771551,.21382688],[-.3518318,.99358225],[.12122844,.72273486],[.79579741,.29508109],[.32273706,.56592848],[-.0420258,.96649751],[.26454741,1.20455811],[.6325431,.53884374],[.20096982,.13542369],[.46605603,1.04775173],[.5075431,.37348429],[.03448275,.64433167],[.39924568,.24376264],[.70905172,.2166779],[.23599137,.48752529],[.02963362,1.1247294],[.91056034,.05987152],[.23114224,.96792302],[-.200431,.56450297],[.70420258,.69707564],[-.3669181,1.07341095],[.10614224,.80256357],[.53771551,1.20598362],[.00107758,.40769659],[.47413793,.1368492],[-.1654094,.91660457],[.30765086,.64575718],[.14116379,1.15466517],[.7807112,.3749098],[.61422413,.88381778],[.50915948,.4889508],[.0775862,.08553075],[-.0889008,.59443873],[.38415948,.32359135],[.45096982,1.12758043],[.07273706,.56592848],[-.09375,1.07483647],[.58081896,.6471827],[.21605603,1.04775173],[.41433189,1.15609068],[-.2570043,1.31859911],[-.3820043,1.15323966],[.35075431,.08695626],[-.0140086,.48752529],[.29256465,.72558589],[-.1804956,.99643327],[.66056034,.05987152],[.02101293,.83962689],[.49407327,.56877951],[.3275862,1.07768749],[.48922413,1.04917724],[.05765086,.64575718],[-.1088362,1.15466517],[-.0474137,.25089021],[-.2139008,.75979819],[.25915948,.4889508],[.09267241,.99785879],[.13415948,.32359135],[.73221982,.21810342],[.56573275,.7270114],[.39924568,1.23591938],[.4606681,.33214442],[.93372844,.06129704],[.76724137,.57020502],[-.1373922,.43763235],[.3356681,.16678496],[-.34375,1.07483647],[.16918103,.67569295],[.53717672,.00997858],[.84375,.24803918],[.33081896,.6471827],[.10075431,.08695626],[.16756465,.89094534],[-.0657327,.59586425],[.36584051,.9992843],[-.1239224,1.23449387],[.6088362,.16821048],[-.228987,.83962689],[.24407327,.56877951],[.0775862,1.07768749],[.55064655,.8068401],[.44558189,.41197312],[.91864224,.14112574],[.27909482,.92088111],[.75215517,.65003372],[.00915948,.4889508],[-.1573275,.99785879],[.14924568,1.23591938],[.2106681,.33214442],[.68372844,.06129704],[.04418103,.84105241],[.0856681,.16678496],[.35075431,1.079113],[-.0808189,.67569295],[.51724137,.57020502],[-.247306,1.18460093],[.71875,.41339864],[.28717672,.00997858],[.55226293,.92230662],[.59375,.24803918],[.12068965,.51888657],[.42726293,.75694716],[.79525862,.0912328],[-.1142241,.43905786],[.3588362,.16821048],[-.2807112,.94796585],[.56034482,.0114041],[.19558189,.41197312],[-.0377155,.11689202],[.02909482,.92088111],[.39385775,.52031208],[.3356681,1.15894171],[.70366379,.49322734],[.06411637,1.27298271],[.53717672,1.00213532],[-.2058189,.84105241],[.10075431,1.079113],[.46875,.41339864],[.03717672,.00997858],[.30226293,.92230662],[-.1293103,.51888657],[-.0043103,.68424602],[-.2957974,1.02779455],[-.1707974,1.19315401],[.67025862,.25659226],[.50377155,.76550024],[.54525862,.0912328],[.07219827,.36208019],[.37877155,.60014078],[.85183189,.3292934],[.21228448,1.10904877],[-.0942887,.87098817],[.58028017,.4433344],[.31034482,.0114041],[.14385775,.52031208],[.0387931,.1254451],[.34536637,.3635057],[.81842672,.09265831],[-.0193965,.76407473],[.65193965,.6015663],[-.1858836,1.27298271],[.28717672,1.00213532],[.421875,.04133986],[.48868534,.84532894],[-.2543103,.68424602],[.05226293,.92230662],[-.4207974,1.19315401],[.42025862,.25659226],[.25377155,.76550024],[.72683189,.49465285],[.08728448,1.27440822],[.12877155,.60014078],[.56034482,1.00356084],[-.0377155,1.10904877],[-.2192887,1.03634763],[.02370689,.2052738],[.33028017,.4433344],[.80334051,.17248701],[.1637931,.95224238],[.63685344,.681395],[-.1427801,.71418179],[.53178879,.28652802],[-.1061422,.52031208],[.09536637,.3635057],[.56842672,.09265831],[-.0711206,.87241368],[-.4358836,1.27298271],[.296875,.20669932],[.60344827,.44475991],[.171875,.04133986],[.23868534,.84532894],[.4369612,.9536679],[.00862068,.28510251],[.27370689,1.19743055],[.00377155,.76550024],[-.1627155,1.27440822],[.20528017,.60869386],[.67834051,.33784647],[.0387931,1.11760184],[.08028017,.4433344],[.51185344,.84675446],[-.0862068,.95224238],[.71336206,.68994807],[.28178879,.28652802],[.75484913,.01568063],[.11530172,.795436],[.58836206,.52458862],[-.0511853,1.30434399],[.421875,1.0334966],[-.1912715,.55737541],[.48329741,.12972164],[.78987068,.36778224],[.62338362,.87669022],[-.3211206,.87241368],[.046875,.20669932],[-.119612,.7156073],[.35344827,.44475991],[-.2860991,1.22451528],[.1869612,.9536679],[.55495689,.28795353],[.38846982,.79686152],[-.0431034,.39344146],[.02370689,1.19743055],[-.2095905,.90234945],[.69827586,.76977678],[.26670258,.36635672],[.46497844,.47469568],[-.3728448,1.14611209],[-.2112068,1.11760184],[.30172413,.71845833],[.46336206,.68994807],[.03178879,.28652802],[.296875,1.19885606],[-.1346982,.795436],[-.3011853,1.30434399],[.171875,1.0334966],[.23329741,.12972164],[.49838362,1.04204968],[.06681034,.63862962],[.53987068,.36778224],[-.0996767,1.14753761],[.37338362,.87669022],[.74137931,.21097585],[.57489224,.71988384],[.14331896,.31646378],[-.0630387,.9536679],[.30495689,.28795353],[.61153017,.52601413],[-.3345905,1.0677089],[.13846982,.79686152],[-.0280172,1.3057695],[.81303879,.36920775],[.33997844,.64005513],[.64655172,.87811573],[-.2580818,.74554306],[.28178879,1.27868476],[.21497844,.47469568],[.88954741,.04704191],[.41648706,.3178893],[.05172413,.71845833],[-.1147629,1.22736631],[.7262931,.29080456],[.55980603,.79971254],[.046875,1.19885606],[.18157327,.23806059],[-.1831896,.63862962],[-.3496767,1.14753761],[.12338362,.87669022],[.49137931,.21097585],[-.1481681,.99073122],[-.106681,.31646378],[.32489224,.71988384],[-.2731681,.82537177],[.15840517,1.22879182],[.79795258,.44903645],[.63146551,.95794444],[.52640086,.56307746],[.09482758,.1596574],[-.0716594,.66856539],[.40140086,.397718],[-.1115301,.79686152],[-.2780172,1.3057695],[.56303879,.36920775],[.60290948,.24091162],[.39655172,.87811573],[-.0765086,1.14896312],[.59806034,.72130935],[.16648706,.3178893],[.43157327,1.23021733],[0,.82679728],[.23329741,1.12187838],[-.3647629,1.22736631],[.36799568,.16108291],[.67456896,.39914351],[.30980603,.79971254],[.50808189,.9080515],[.14331896,1.30862052],[-.1632543,1.07055993],[.34482758,1.15181414],[.07489224,.71988384],[-.0915948,1.22879182],[.44288793,.05416947],[.27640086,.56307746],[.7494612,.29223007],[.10991379,1.07198544],[.15140086,.397718],[.58297413,.80113805],[-.0150862,.90662598],[.41648706,1.31004604],[.0463362,.00285102],[-.1201508,.511759],[.35290948,.24091162],[.18642241,.7498196],[.65948275,.47897222],[.5544181,.08410524],[.86099137,.32216583],[-.0835129,.3178893],[.18157327,1.23021733],[-.25,.82679728],[.11799568,.16108291],[.38308189,1.07341095],[.42456896,.39914351],[-.0484913,.6699909],[-.2149784,1.17889888],[.31950431,.00427653],[.62607758,.24233713],[.26131465,.64290616],[.02801724,.34782506],[.09482758,1.15181414],[.45959051,.75124511],[.22467672,.67141641],[-.1400862,1.07198544],[.16648706,1.31004604],[.70096982,.13542369],[.89924568,.24376264],[.06142241,.91517906],[.10290948,.24091162],[.53448275,.64433167],[-.0635775,.7498196],[.36799568,1.15323966],[-.2300646,1.25872759],[.24299568,.9878802],[.73599137,.48752529],[.3044181,.08410524],[.56950431,.99643327],[.13793103,.59301322],[.61099137,.32216583],[.44450431,.83107382],[-.028556,1.1019212],[.8125,.16535945],[.64601293,.67426744],[.43965517,1.31147155],[.06950431,.00427653],[.37607758,.24233713],[-.0969827,.51318452],[-.2634698,1.0220925],[.20959051,.75124511],[.04310344,1.2601531],[.10452586,.35637813],[.5775862,.08553075],[.41109913,.59443873],[-.0204741,.19101868],[-.1869612,.69992666],[.35290948,1.23306836],[.48760775,.27227289],[.5544181,1.07626198],[-.1885775,.91517906],[.11799568,1.15323966],[.48599137,.48752529],[.25269396,.19244419],[.31950431,.99643327],[-.1120689,.59301322],[.19450431,.83107382],[-.278556,1.1019212],[.5625,.16535945],[.08943965,.43620684],[.39601293,.67426744],[-.0770474,.94511482],[.22952586,1.18317542],[.76400862,.00855307],[.59752155,.51746105],[-.0404094,.75124511],[.3275862,.08553075],[-.3119612,.86528612],[.16109913,.59443873],[-.0053879,1.10334672],[.63415948,.32359135],[.46767241,.83249933],[.36260775,.43763235],[.8356681,.16678496],[.66918103,.67569295],[.23760775,.27227289],[.3044181,1.07626198],[.50269396,1.18460093],[.43911637,.11546651],[.74568965,.35352711],[.06950431,.99643327],[-.403556,1.26728066],[.20420258,.03563781],[.74407327,.56877951],[-.1605603,.43620684],[.5775862,1.07768749],[.14601293,.67426744],[-.3270474,.94511482],[-.0204741,1.18317542],[.51400862,.00855307],[.34752155,.51746105],[.82058189,.24661367],[.18103448,1.02636904],[.65409482,.75552165],[.48760775,1.26442964],[-.1255387,.78830844],[-.2553879,1.10334672],[.11260775,.43763235],[.5856681,.16678496],[-.0538793,.94654033],[-.0123922,.27227289],[.41918103,.67569295],[.25269396,1.18460093],[.31411637,.28082597],[.78717672,.00997858],[.62068965,.51888657],[.18911637,.11546651],[.45420258,1.02779455],[.02262931,.6243745],[-.1438577,1.13328248],[.69719827,.19672073],[.5307112,.70562871],[.46228448,.11689202],[.52909482,.92088111],[.09752155,.51746105],[-.0107758,.38773941],[-.0689655,1.02636904],[.23760775,1.26442964],[.29903017,.36065467],[.77209051,.08980729],[.1325431,.86956266],[.60560344,.59871527],[.43911637,1.10762325],[.80711206,.44190889],[.37553879,.03848883],[-.0975215,.30933622],[-.3038793,.94654033],[.00269396,1.18460093],[-.1023706,.78973395],[.37068965,.51888657],[.67726293,.75694716],[-.2273706,.6243745],[-.2688577,1.29864194],[-.3938577,1.13328248],[.20420258,1.02779455],[.09913793,.63292757],[.57219827,.36208019],[.4057112,.87098817],[-.025862,.46756811],[.44719827,.19672073],[-.1923491,.9764761],[.2807112,.70562871],[.64870689,.03991435],[.48221982,.54882233],[.21228448,.11689202],[-.0592672,.23093303],[.24730603,.46899363],[.31411637,1.27298271],[-.1174568,.86956266],[.18911637,1.10762325],[.921875,.04133986],[.55711206,.44190889],[.12553879,.03848883],[-.0824353,1.22166426],[-.0409482,.54739682],[.390625,.95081687],[.59213362,.79401049],[.16056034,.39059044],[.63362068,.11974305],[-.0457974,1.02779455],[.32219827,.36208019],[.62877155,.60014078],[-.3173491,1.14183556],[.46228448,1.10904877],[.1557112,.87098817],[.0307112,.70562871],[.83028017,.4433344],[-.0743534,.31076173],[.39870689,.03991435],[.70528017,.27797494],[-.2408405,.81966972],[.23221982,.54882233],[.35721982,.71418179],[.06573275,1.05773031],[.12715517,.15395535],[.90678879,.12116856],[.43372844,.39201595],[.74030172,.63007655],[-.0026939,.46899363],[-.169181,.97790161],[.19881465,.31218725],[.671875,.04133986],[.50538793,.55024784],[-.3324353,1.22166426],[.140625,.95081687],[.34213362,.79401049],[-.0894396,.39059044],[.17564655,1.30291847],[-.2559267,.89949842],[-.0544181,.74269204],[.41864224,.47184465],[.89170258,.20099727],[.62015086,.31503827],[.4137931,.95224238],[-.0177801,.54882233],[-.0592672,1.22308977],[-.1842672,1.05773031],[.61530172,.795436],[.65678879,.12116856],[.44881465,1.30434399],[.49030172,.63007655],[.18372844,.39201595],[.32381465,1.13898453],[-.3475215,1.30149296],[.01724137,.90092393],[.38523706,.23520957],[.69181034,.47327016],[.26023706,.06985011],[.32704741,.87383919],[.52532327,.98217815],[-.2176724,.82109523],[.45689655,.39344146],[.92995689,.12259408],[.29040948,.90234945],[-.0743534,1.30291847],[.76670258,.36635672],[.12715517,1.14611209],[.16864224,.47184465],[.60021551,.87526471],[-.4709051,1.25160002],[.00215517,.98075264],[.37015086,.31503827],[.8432112,.04419088],[.20366379,.82394625],[.67672413,.55309887],[.19881465,1.30434399],[-.2327586,.90092393],[.13523706,.23520957],[.44181034,.47327016],[-.03125,.74411755],[.27532327,.98217815],[-.197737,1.25302554],[-.15625,.57875809],[.01023706,.06985011],[.33674568,.07840319],[.64331896,.31646378],[.17025862,.58731117],[.47683189,.82537177],[.04525862,.42195171],[.51831896,.15110433],[-.1212284,.9308597],[.55334051,.50320593],[.04040948,.90234945],[.71497844,.47469568],[-.1228448,1.14611209],[.01185344,.18531663],[.55172413,.71845833],[.31842672,.42337723],[.38523706,1.22736631],[-.0463362,.82394625],[.26023706,1.06200685],[.15517241,.66713987],[.62823275,.39629249],[-.0113146,1.17604786],[.46174568,.90520047],[.82974137,.23948611],[.66325431,.74839409],[-.28125,.74411755],[.02532327,.98217815],[-.447737,1.25302554],[.08674568,.07840319],[.39331896,.31646378],[-.0797413,.58731117],[-.2462284,1.09621915],[.22683189,.82537177],[.69989224,.55452438],[.53340517,1.06343236],[.59482758,.1596574],[.42834051,.66856539],[-.0032327,.26514533],[-.1697198,.77405331],[.30334051,.50320593],[.13685344,1.01211391],[.37015086,1.30719501],[.19827586,.10833895],[.50484913,.34639955],[.06842672,.42337723],[.13523706,1.22736631],[.26993534,.26657084],[-.0948275,.66713987],[-.2613146,1.17604786],[.21174568,.90520047],[.57974137,.23948611],[.41325431,.74839409],[.24676724,1.25730207],[.34482758,.1596574],[-.2947198,.93941277],[.17834051,.66856539],[.01185344,1.17747337],[.05334051,.50320593],[.48491379,.90662598],[.37984913,.511759],[.85290948,.24091162],[.68642241,.7498196],[-.2182112,.61724693],[.25484913,.34639955],[.08836206,.85530753],[.72790948,.07555216],[.56142241,.58446014],[.51993534,1.25872759],[.45635775,.18959317],[.76293103,.42765376],[.59644396,.93656175],[.01993534,.26657084],[-.1465517,.77547883],[.22144396,.10976446],[.52801724,.34782506],[.05495689,.61867245],[.16325431,.74839409],[.36153017,.85673304],[-.0032327,1.25730207],[-.309806,1.01924148],[.72952586,.19101868],[.83782327,.32074032],[.19827586,1.10049569],[.6713362,.8296483],[-.2381465,1.17747337],[.12984913,.511759],[-.0366379,1.02066699],[.43642241,.7498196],[.26993534,1.25872759],[-.1616379,.85530753],[.8044181,.08410524],[.63793103,.59301322],[.20635775,.18959317],[.47144396,1.1019212],[.03987068,.69850115],[.51293103,.42765376],[-.1266163,1.20740913],[.34644396,.93656175],[.40786637,.03278678],[.71443965,.27084738],[.54795258,.77975537],[-.028556,.10976446],[.27801724,.34782506],[-.1950431,.61867245],[-.3615301,1.12758043],[.47952586,.19101868],[.00646551,.46186606],[.31303879,.69992666],[.78609913,.42907928],[-.0517241,1.10049569],[.68103448,.0342123],[.08297413,.13970023],[.62284482,.67284192],[.45635775,1.18174991],[.39278017,.11261549],[-.2866379,1.02066699],[.01993534,1.25872759],[-.0851293,.86386061],[.38793103,.59301322],[.22144396,1.1019212],[-.2101293,.69850115],[-.3766163,1.20740913],[.09644396,.93656175],[.15786637,.03278678],[.42295258,.94511482],[-.0086206,.54169477],[.46443965,.27084738],[.77101293,.50890798],[-.1751077,1.05060275],[.29795258,.77975537],[.13146551,1.28866335],[.19288793,.38488839],[.66594827,.114041],[.4994612,.62294898],[.22952586,.19101868],[.06303879,.69992666],[-.1034482,1.20883465],[.43103448,.0342123],[.26454741,.54312028],[.73760775,.27227289],[.57112068,.78118088],[.20635775,1.18174991],[.93911637,.11546651],[.34105603,.22095444],[.40786637,1.02494353],[-.0237068,.62152347],[.65086206,.1938697],[.10614224,.14112574],[.17295258,.94511482],[.47952586,1.18317542],[.04795258,.77975537],[-.1185344,1.28866335],[-.057112,.38488839],[.41594827,.114041],[.72252155,.3521016],[-.2235991,.89379637],[.55603448,.86100958],[.2494612,.62294898],[.08297413,1.13185697],[.20797413,1.29721642],[.92403017,.19529522],[.01939655,.06272255],[.45096982,.4661426],[-.1470905,.57163053],[-.3534482,1.20883465],[.01454741,.54312028],[.52747844,.14397676],[-.1519396,1.05202826],[.32112068,.78118088],[.21605603,.3863139],[.68911637,.11546651],[.04956896,.89522188],[.09105603,.22095444],[.52262931,.6243745],[-.075431,.72986243],[.35614224,1.13328248],[.72413793,.46756811],[.29256465,.06414806],[.59913793,.30220866],[-.2386853,.97362507],[.234375,.70277769],[.43588362,.54597131],[-.1088362,.49322734],[.43103448,1.02636904],[-.0420258,1.29721642],[-.1670258,1.13185697],[.56573275,.06557357],[.6325431,.86956266],[.20096982,.4661426],[.5075431,.7042032],[-.4385775,1.24589797],[.34105603,1.21311118],[.07596982,.30078315],[.03448275,.97505059],[.87553879,.03848883],[.70905172,.54739682],[.27747844,.14397676],[.54256465,1.0563048],[.23599137,.8182442],[.78556034,.22523098],[-.200431,.89522188],[.27262931,.6243745],[.10614224,1.13328248],[.47413793,.46756811],[.04256465,.06414806],[.30765086,.9764761],[-.1239224,.57305604],[-.2904094,1.08196403],[.0775862,.41624966],[.55064655,.14540228],[.38415948,.65431026],[.01939655,1.05487929],[.86045258,.11831754],[.22090517,.89807291],[.69396551,.62722552],[-.2155172,.97505059],[.09105603,1.21311118],[.82381465,.14682779],[.15247844,.30933622],[.45905172,.54739682],[-.0140086,.8182442],[.29256465,1.0563048],[-.1390086,.65288475],[.66056034,.39059044],[.49407327,.89949842],[.0625,.49607837],[.53556034,.22523098],[-.103987,1.00498635],[.26400862,.33927198],[.73706896,.0684246],[.57058189,.57733258],[.05765086,.9764761],[.73221982,.54882233],[.30064655,.14540228],[.56573275,1.05773031],[-.3389008,.92515765],[.13415948,.65431026],[.02909482,.25944328],[.3356681,.49750388],[.80872844,.22665649],[-.0290948,.89807291],[.27747844,1.13613351],[.64547413,.47041914],[.41217672,.17533804],[.47898706,.97932712],[-.0657327,.92658316],[-.2640086,.8182442],[.41056034,.39059044],[.6088362,.49892939],[.24407327,.89949842],[-.228987,1.17034581],[-.1875,.49607837],[-.353987,1.00498635],[.11907327,.73413896],[.55064655,1.13755902],[.44558189,.74269204],[.01400862,.33927198],[.48706896,.0684246],[-.1524784,.84817997],[.32058189,.57733258],[.15409482,1.08624057],[.79364224,.3064852],[.52209051,.4205262],[.31573275,1.05773031],[.0856681,.49750388],[-.0808189,1.00641186],[-.0193965,.1026369],[.28717672,.3406975],[.76023706,.06985011],[.59375,.57875809],[.16217672,.17533804],[.42726293,1.08766608],[.12068965,.84960548],[.22898706,.97932712],[.79525862,.42195171],[.36368534,.01853166],[.19558189,.74269204],[-.0377155,.44761094],[.02909482,1.25160002],[.50215517,.98075264],[-.0959051,1.08624057],[.87015086,.31503827],[.63685344,.01995717],[-.2009698,.69137359],[.27209051,.4205262],[-.3674568,1.20028157],[.10560344,.92943418],[.57866379,.6585868],[.41217672,1.16749478],[.47359913,.26371982],[.78017241,.50178042],[.61368534,1.0106884],[-.3308189,1.00641186],[.03717672,.3406975],[.34375,.57875809],[-.1293103,.84960548],[.17726293,1.08766608],[.23868534,.18389112],[.54525862,.42195171],[.11368534,.01853166],[.37877155,.9308597],[-.0528017,.52743964],[.07219827,.6927991],[.74676724,.26514533],[.62176724,.09978587],[.14870689,.37063326],[.45528017,.60869386],[-.2209051,1.25160002],[-.0862068,.29080456],[.38685344,.01995717],[.45366379,.82394625],[-.1443965,.92943418],[.16217672,1.16749478],[.22359913,.26371982],[.48868534,1.17604786],[.05711206,.7726278],[.53017241,.50178042],[-.109375,1.28153579],[.36368534,1.0106884],[.73168103,.34497403],[.56519396,.85388202],[-.0113146,.18389112],[.29525862,.42195171],[-.1778017,.6927991],[.12877155,.9308597],[-.3442887,1.20170708],[.49676724,.26514533],[.02370689,.53599272],[.33028017,.77405331],[.37176724,.09978587],[.80334051,.50320593],[-.1012931,.37063326],[-.2677801,.87954124],[.69827586,.10833895],[.10021551,.21382688],[.40678879,.45188748],[.87984913,.18104009],[-.2693965,1.09479364],[.40517241,.66713987],[.171875,.37205877],[.23868534,1.17604786],[-.1928879,.7726278],[-.359375,1.28153579],[.11368534,1.0106884],[.00862068,.61582142],[.48168103,.34497403],[-.1578663,1.1247294],[.31519396,.85388202],[.67995689,.45331299],[.51670258,.69707564],[.24676724,.26514533],[.28663793,.1368492],[.08028017,.77405331],[-.3927801,1.0449007],[-.0862068,1.2829613],[.38685344,1.01211391],[.44827586,.10833895],[.28178879,.61724693],[.75484913,.34639955],[.11530172,1.12615492],[.15678879,.45188748],[.58836206,.85530753],[-.0096982,.96079546],[.05172413,.0570205],[.35829741,.29508109],[.83135775,.02423371],[.66487068,.53314169],[-.078125,.37205877],[.12338362,.21525239],[-.0431034,.72416038],[.49676724,1.25730207],[-.4078663,1.1247294],[.43318965,.18816765],[.63146551,.29650661],[.26670258,.69707564],[.57327586,.93513623],[.10021551,1.20598362],[.03663793,.1368492],[.30172413,1.04917724],[-.1298491,.64575718],[-.3362068,1.2829613],[.03178879,.61724693],[.54471982,.21810342],[-.1346982,1.12615492],[.33836206,.85530753],[-.2596982,.96079546],[.70635775,.18959317],[.06681034,.96934854],[.10829741,.29508109],[.53987068,.69850115],[-.0581896,.80398908],[.41487068,.53314169],[-.2246767,1.31289706],[.37338362,1.20740913],[.74137931,.54169477],[.30980603,.13827471],[.14331896,.6471827],[.61637931,.37633531],[.44989224,.88524329],[.81788793,.21952893],[-.4595905,1.23306836],[-.0915948,.56735399],[.44827586,1.10049569],[.38146551,.29650661],[.21497844,.80541459],[-.1497844,1.20598362],[.58297413,.13970023],[-.0150862,.24518816],[.52478448,.77832985],[.05172413,1.04917724],[.35829741,1.28723784],[.7262931,.62152347],[.29471982,.21810342],[.55980603,1.13043145],[-.3846982,1.12615492],[-.3448275,.99785879],[.12823275,.7270114],[.80280172,.29935763],[.28987068,.69850115],[.12338362,1.20740913],[.32974137,.57020502],[-.4746767,1.31289706],[.05980603,.13827471],[.32489224,1.05060275],[-.106681,.6471827],[.36637931,.37633531],[-.2731681,1.15609068],[.19989224,.88524329],[.09482758,.49037632],[.56788793,.21952893],[.40140086,.72843691],[-.0301724,.32501686],[.03663793,1.12900594],[.76939655,.06272255],[.1713362,.16821048],[.13146551,.29650661],[.63954741,.37776082],[.16648706,.64860821],[0,1.15751619],[-.1982758,1.04917724],[.84105603,.22095444],[.67456896,.72986243],[.4762931,.62152347],[.30980603,1.13043145],[-.1217672,.7270114],[-.2882543,1.23591938],[.24622844,.06129704],[.55280172,.29935763],[.07974137,.57020502],[-.0867456,1.079113],[.38631465,.80826562],[.75431034,.14255125],[.58782327,.65145923],[.38146551,1.28866335],[-.1551724,.49037632],[.31788793,.21952893],[-.3216594,.9992843],[.15140086,.72843691],[-.0150862,1.2373449],[.0463362,.33356993],[.51939655,.06272255],[.35290948,.57163053],[.82596982,.30078315],[.18642241,1.08053852],[-.2451508,.67711846],[.22790948,.40627107],[.29471982,1.21026016],[.65948275,.80969113],[.49299568,1.31859911],[.12284482,.0114041],[.4294181,.24946469],[-.25,1.15751619],[-.0484913,1.00070981],[.42456896,.72986243],[.62607758,.57305604],[.19450431,.16963599],[.26131465,.97362507],[.02801724,.67854397],[-.1702586,.57020502],[-.3367456,1.079113],[-.0301724,1.3171736],[.50431034,.14255125],[.7025862,.25089021],[-.135237,.92230662],[.33782327,.65145923],[.1713362,1.16036722],[.64439655,.88951983],[.53933189,.49465285],[-.2650862,1.2373449],[.26939655,.06272255],[.10290948,.57163053],[-.0635775,1.08053852],[.40948275,.80969113],[.24299568,1.31859911],[.3044181,.41482415],[.77747844,.14397676],[.13793103,.92373213],[.1794181,.24946469],[.44450431,1.16179273],[.01293103,.75837268],[.61099137,.65288475],[.38092672,.09265831],[.6875,.33071891],[.21443965,.6015663],[.88900862,.17391253],[-.0554956,.16963599],[.20959051,1.08196403],[-.2219827,.67854397],[.14601293,.01282961],[-.0204741,.52173759],[.4525862,.25089021],[.51939655,1.05487929],[-.0786637,1.16036722],[.65409482,.09408382],[.28933189,.49465285],[.05603448,.19957175],[.12284482,1.00356084],[.59590517,.73271345],[.4294181,1.24162143],[.96390086,.06699909],[-.3135775,1.08053852],[.0544181,.41482415],[-.1120689,.92373213],[.36099137,.65288475],[.19450431,1.16179273],[-.2370689,.75837268],[.5625,.49607837],[.13092672,.09265831],[.39601293,1.00498635],[.4375,.33071891],[.08943965,.76692575],[.27101293,.83962689],[-.0355603,.6015663],[-.2020474,1.11047428],[.76400862,.33927198],[.63900862,.17391253],[.16594827,.44475991],[.47252155,.68282051],[.84051724,.01710615],[.2025862,.25089021],[.46767241,1.16321824],[-.0689655,.36493121],[.40409482,.09408382],[.23760775,.60299181],[-.1271551,1.00356084],[.07112068,1.11189979],[.1794181,1.24162143],[.91217672,.17533804],[.0075431,.04276537],[.54741379,.57590707],[.38092672,1.08481505],[.58243534,.92800867],[.3125,.49607837],[-.1605603,.76692575],[.14601293,1.00498635],[-.3270474,1.27583374],[.4525862,1.24304695],[.51400862,.33927198],[.34752155,.84817997],[.38900862,.17391253],[-.0840517,.44475991],[.22252155,.68282051],[-.2505387,.9536679],[.05603448,1.1917285],[.59051724,.01710615],[.11745689,.28795353],[.42403017,.52601413],[.89709051,.25516674],[.15409482,.09408382],[-.0123922,.60299181],[.18911637,.44618543],[.66217672,.17533804],[-.1756465,.84675446],[.02262931,.95509341],[.49568965,.68424602],[.86368534,.01853166],[.49892241,.41910069],[.265625,.12401959],[.33243534,.92800867],[.69719827,.52743964],[.10237068,.36778224],[.77370689,.2052738],[.09752155,.84817997],[-.3755387,1.11902735],[.40409482,1.08624057],[-.1939655,1.1917285],[.29903017,.69137359],[.34051724,.01710615],[.1325431,1.20028157],[.17403017,.52601413],[.77209051,.4205262],[.0075431,1.03492211],[.48060344,.76407473],[.60560344,.92943418],[-.2990301,.79686152],[-.4655172,1.3057695],[.37553879,.36920775],[.84859913,.09836036],[.20905172,.87811573],[.68211206,.60726835],[.515625,1.11617633],[-.0608836,.44618543],[-.2273706,.95509341],[.140625,.28937904],[.61368534,.01853166],[-.025862,.79828703],[.015625,.12401959],[.44719827,.52743964],[.2807112,1.03634763],[.34213362,.13257266],[.64870689,.37063326],[.05064655,.47612119],[.59051724,1.00926289],[.11745689,1.28011027],[.72521551,.04846742],[.36045258,.44903645],[.04903017,.69137359],[-.1174568,1.20028157],[.35560344,.92943418],[-.2424568,1.03492211],[.72359913,.26371982],[.55711206,.7726278],[.12553879,.36920775],[.390625,1.28153579],[-.0409482,.87811573],[.43211206,.60726835],[.265625,1.11617633],[.32704741,.21240137],[.16056034,.72130935],[.20204741,.04704191],[.63362068,.45046196],[.46713362,.95936995],[.83512931,.29365558],[-.275862,.79828703],[.19719827,.52743964],[-.4423491,1.30719501],[.0307112,1.03634763],[.87176724,.09978587],[-.0743534,.64148065],[.70528017,.60869386],[.39870689,.37063326],[-.1325431,1.28011027],[-.3658405,.98502917],[.23221982,.87954124],[.60021551,.21382688],[.00215517,.31931481],[.54202586,.85245651],[.47521551,.04846742],[.30872844,.55737541],[.14547413,.80113805],[.8200431,.37348429],[.30711206,.7726278],[.140625,1.28153579],[-.2909482,.87811573],[.07704741,.21240137],[.34213362,1.1247294],[-.0894396,.72130935],[.38362068,.45046196],[-.2559267,1.23021733],[.21713362,.95936995],[.52370689,1.19743055],[.58512931,.29365558],[.41864224,.80256357],[-.012931,.39914351],[.46012931,.12829613],[.25215517,1.31147155],[.18857758,.24233713],[-.0177801,.87954124],[.65678879,.45188748],[.22521551,.04846742],[.49030172,.96079546],[.18372844,.72273486],[.01724137,1.23164285],[.85829741,.29508109],[-.0463362,.16250843],[.69181034,.80398908],[.73329741,.12972164],[.26023706,.40056902],[.09375,.90947701],[-.1045258,.80113805],[-.2710129,1.31004604],[.5700431,.37348429],[.76831896,.48182324],[.40355603,.88239227],[-.0695043,1.15323966],[.02532327,.32074032],[-.137931,.56450297],[.33512931,.29365558],[-.3044181,1.07341095],[.16864224,.80256357],[.00215517,1.31147155],[.53340517,.40199454],[.47521551,1.04062416],[.37015086,.64575718],[-.0614224,.24233713],[.20366379,1.15466517],[-.2279094,.75124511],[.24515086,.48039773],[-.3943965,1.2601531],[.8432112,.3749098],[.1400862,.08553075],[.44665948,.32359135],[.91971982,.05274396],[.24030172,.96079546],[.28017241,.83249933],[-.2327586,1.23164285],[.44181034,.80398908],[.01023706,.40056902],[.27532327,1.31289706],[-.15625,.90947701],[.21174568,.24376264],[.04525862,.75267063],[.51831896,.48182324],[-.3195043,1.15323966],[.71982758,.32501686],[.35506465,.72558589],[.12176724,.43050479],[.18857758,1.23449387],[.7963362,.00285102],[-.2478448,1.31147155],[.12015086,.64575718],[-.0463362,1.15466517],[.42672413,.88381778],[-.1713362,.98930571],[.79471982,.21810342],[.15517241,.99785879],[.19665948,.32359135],[.62823275,.7270114],[.03017241,.83249933],[.50323275,.56165194],[.46174568,1.23591938],[.3981681,.16678496],[.23168103,.67569295],[.70474137,.40484556],[.53825431,.91375355],[.02532327,1.31289706],[-.0382543,.24376264],[-.2047413,.75267063],[.26831896,.48182324],[-.3712284,1.26157861],[.16325431,.08695626],[-.0032327,.59586425],[.46982758,.32501686],[.30334051,.83392484],[-.1282327,.43050479],[-.0614224,1.23449387],[.94288793,.05416947],[.6713362,.16821048],[.07327586,.27369841],[.5463362,.00285102],[.61314655,.8068401],[.44665948,1.31574809],[-.2963362,1.15466517],[-.0948275,.99785879],[.37823275,.7270114],[.21174568,1.23591938],[-.2198275,.83249933],[.57974137,.57020502],[.1481681,.16678496],[.41325431,1.079113],[-.0183189,.67569295],[.45474137,.40484556],[.28825431,.91375355],[-.184806,1.18460093],[.65625,.24803918],[.18318965,.51888657],[.48976293,.75694716],[.32327586,1.26585515],[.85775862,.0912328],[.21982758,.32501686],[.05334051,.83392484],[-.0517241,.43905786],[.4213362,.16821048],[.25484913,.67711846],[.2963362,.00285102],[.08836206,1.18602644],[.72790948,.40627107],[.56142241,.91517906],[.62284482,.0114041],[.02478448,.11689202],[.33135775,.35495262],[.3981681,1.15894171],[.16487068,.86386061],[.09644396,.27512392],[.16325431,1.079113],[.46982758,1.3171736],[-.434806,1.18460093],[.40625,.24803918],[-.0668103,.51888657],[.23976293,.75694716],[-.2332974,1.02779455],[.07327586,1.26585515],[.5463362,.99500776],[.60775862,.0912328],[.44127155,.60014078],[.27478448,1.10904877],[.00484913,.67711846],[-.1616379,1.18602644],[.37284482,.0114041],[-.2667025,.79115947],[.20635775,.52031208],[.03987068,1.02922006],[.08135775,.35495262],[.6794181,.24946469],[.51293103,.75837268],[.34644396,1.26728066],[.40786637,.3635057],[.88092672,.09265831],[.71443965,.6015663],[.28286637,.19814624],[.11637931,.70705422],[.58943965,.43620684],[.79094827,.27940046],[.04795258,.11831754],[.11476293,.92230662],[-.1185344,.62722552],[.4213362,1.16036722],[-.1767241,1.26585515],[.55603448,.19957175],[.19127155,.60014078],[-.2817887,.87098817],[.02478448,1.10904877],[.49784482,.83820138],[.39278017,.4433344],[.86584051,.17248701],[.2262931,.95224238],[.69935344,.681395],[.53286637,1.19030298],[-.4116379,1.18602644],[-.0436422,.52031208],[-.2101293,1.02922006],[.26293103,.75837268],[.09644396,1.26728066],[.15786637,.3635057],[.63092672,.09265831],[-.0086206,.87241368],[.03286637,.19814624],[.46443965,.6015663],[-.1336206,.70705422],[.29795258,1.11047428],[-.3001077,1.21596221],[.66594827,.44475991],[.234375,.04133986],[.06788793,.55024784],[.54094827,.27940046],[.3744612,.78830844],[.74245689,.12259408],[.30603448,.19957175],[.37284482,1.00356084],[-.1670258,.47041914],[-.2252155,1.10904877],[.5075431,.04276537],[.14278017,.4433344],[-.0237068,.95224238],[.44935344,.681395],[.28286637,1.19030298],[.81734913,.01568063],[.65086206,.52458862],[.21928879,.12116856],[.484375,1.0334966],[.25431034,.47327016],[-.2586206,.87241368],[.04795258,1.11047428],[.92887931,.0456164],[-.015625,.04133986],[.72252155,.68282051],[-.182112,.55024784],[-.057112,.7156073],[-.3485991,1.05915583],[-.2235991,1.22451528],[.29094827,.27940046],[.41594827,.44475991],[.61745689,.28795353],[.1244612,.78830844],[.01939655,.39344146],[.49245689,.12259408],[.79903017,.36065467],[.32596982,.63150206],[-.0387931,1.03207109],[.15948275,1.14041004],[.09590517,.07127562],[.63577586,.60441732],[.2575431,.04276537],[.09105603,.55167336],[-.075431,1.06058134],[.29256465,.39486697],[.765625,.12401959],[.40086206,.52458862],[.59913793,.63292757],[-.2386853,1.30434399],[-.1971982,.63007655],[.234375,1.0334966],[.43588362,.87669022],[.00431034,.47327016],[.47737068,.20242278],[.67887931,.0456164],[-5387e-7,.9536679],[.30603448,1.1917285],[.67403017,.52601413],[.20096982,.79686152],[.5075431,1.03492211],[.07596982,.63150206],[.03448275,1.3057695],[-.0905172,1.14041004],[-.0290948,.23663508],[.75053879,.20384829],[-.1955818,.74554306],[.58405172,.71275627],[.27747844,.47469568],[.41756465,1.22166426],[.11099137,.98360366],[.95204741,.04704191],[.78556034,.55594989],[-.1589439,.55167336],[.35398706,.15252984],[.515625,.12401959],[-.1239224,.90377496],[.34913793,.63292757],[-.4886853,1.30434399],[.55064655,.47612119],[.11907327,.07270114],[.18588362,.87669022],[.49245689,1.11475082],[-.044181,.31646378],[.42887931,.0456164],[-.2106681,.82537177],[.26239224,.55452438],[.62715517,.15395535],[.46390086,.397718],[.9369612,.12687061],[.2575431,1.03492211],[.29741379,.90662598],[-.2155172,1.3057695],[-.3405172,1.14041004],[.45905172,.87811573],[.02747844,.47469568],[.33405172,.71275627],[-.1390086,.98360366],[.70204741,.04704191],[.22898706,.3178893],[.0625,.82679728],[.53556034,.55594989],[.36907327,1.06485788],[-.0625,.66143782],[.10398706,.15252984],[.73706896,.39914351],[.13900862,.50463144],[.61206896,.23378405],[.81357758,.07697767],[-.3389008,1.25587656],[.13415948,.98502917],[-.0959051,.42480274],[-.0290948,1.22879182],[.44396551,.95794444],[-.1540948,1.06343236],[.21390086,.397718],[.47898706,1.31004604],[-.4256465,1.17747337],[.04741379,.90662598],[.52047413,.6357786],[.24892241,.7498196],[.72198275,.47897222],[.55549568,.9878802],[-.0210129,.3178893],[-.1875,.82679728],[.28556034,.55594989],[.11907327,1.06485788],[.18049568,.16108291],[.48706896,.39914351],[.01400862,.6699909],[.32058189,.9080515],[.36206896,.23378405],[-.1109913,.50463144],[-.2774784,1.01353943],[.68857758,.24233713],[.09051724,.34782506],[.56357758,.07697767],[.39709051,.58588566],[-.1158405,.98502917],[.55872844,.55737541],[.59375,.90947701],[.16217672,.50605695],[.22898706,1.31004604],[-.2025862,.90662598],[.83674568,.07840319],[-.0010775,.7498196],[.47198275,.47897222],[-.1675646,1.25872759],[.30549568,.9878802],[.67349137,.32216583],[.50700431,.83107382],[-.2359913,.6699909],[-.4024784,1.17889888],[.07058189,.9080515],[.37715517,1.14611209],[.43857758,.24233713],[-.2009698,1.0220925],[.31357758,.07697767],[.27209051,.75124511],[.14709051,.58588566],[.10560344,1.2601531],[-.0193965,1.09479364],[.74515086,.48039773],[.57866379,.98930571],[.47359913,.59443873],[.04202586,.19101868],[.34859913,.42907928],[.82165948,.15823189],[.18211206,.93798726],[.65517241,.66713987],[-.0878232,.50605695],[.11368534,.34925057],[.58674568,.07840319],[-.0528017,.85815856],[-.4175646,1.25872759],[.31519396,.19244419],[.62176724,.43050479],[.19019396,.02708473],[.25700431,.83107382],[.56357758,1.06913441],[.29202586,1.18317542],[.02209051,.75124511],[-.1443965,1.2601531],[.32866379,.98930571],[.22359913,.59443873],[.69665948,.32359135],[.05711206,1.10334672],[.09859913,.42907928],[.53017241,.83249933],[-.0678879,.93798726],[.8981681,.16678496],[.73168103,.67569295],[-.1729525,.54312028],[.30010775,.27227289],[.13362068,.78118088],[.7731681,.00142551],[.60668103,.51033349],[.44019396,1.01924148],[.50161637,.11546651],[.80818965,.35352711],[-.3028017,.85815856],[.06519396,.19244419],[.37176724,.43050479],[.43857758,1.23449387],[-.1012931,.70135217],[.26670258,.03563781],[.57327586,.27369841],[.20851293,.67426744],[-.0247844,.37918634],[.04202586,1.18317542],[.5150862,.91232803],[-.0264008,.59443873],[-.1928879,1.10334672],[-.3178879,.93798726],[.6481681,.16678496],[.00862068,.94654033],[.05010775,.27227289],[.48168103,.67569295],[-.1163793,.78118088],[.35668103,.51033349],[-.2828663,1.29008886],[.19019396,1.01924148],[.31519396,1.18460093],[.25161637,.11546651],[.08512931,.6243745],[.55818965,.35352711],[.39170258,.86243509],[.75969827,.19672073],[.01670258,.03563781],[.32327586,.27369841],[-.1497844,.54454579],[.15678879,.78260639],[-.3162715,1.05345378],[-.0096982,1.29151437],[.52478448,.11689202],[.35829741,.62580001],[.83135775,.35495262],[.46659482,.75552165],[.66487068,.86386061],[.30010775,1.26442964],[-.0732758,.22237995],[.23653017,.19529522],[.50161637,1.10762325],[-.2413793,.94654033],[.06519396,1.18460093],[.43318965,.51888657],[.00161637,.11546651],[.19989224,.22380547],[-.1648706,.6243745],[.26670258,1.02779455],[-.3313577,1.13328248],[.14170258,.86243509],[.03663793,.46756811],[.50969827,.19672073],[.81627155,.43478133],[-.1298491,.9764761],[.3432112,.70562871],[.17672413,1.2145367],[.71120689,.03991435],[.11314655,.14540228],[-.0932112,.78260639],[-.2596982,1.29151437],[.27478448,.11689202],[.10829741,.62580001],[.58135775,.35495262],[-.0581896,1.13470799],[.41487068,.86386061],[.30980603,.46899363],[.78286637,.19814624],[.61637931,.70705422],[.18480603,.30363417],[.25161637,1.10762325],[.01831896,.81254215],[.38631465,.14682779],[.49461206,.27654943],[.69288793,.38488839],[-.1449353,1.0563048],[-.0501077,.22380547],[.52963362,.62865103],[.01670258,1.02779455],[.15140086,.06699909],[.69127155,.60014078],[.52478448,1.10904877],[.0932112,.70562871],[.39978448,.94368931],[-.0732758,1.2145367],[.46120689,.03991435],[.76778017,.27797494],[.29471982,.54882233],[.6012931,.78688293],[.12823275,1.05773031],[.43480603,1.29579091],[-.1417025,.62580001],[-.1018318,.49750388],[-.3081896,1.13470799],[.37122844,.22665649],[.53286637,.19814624],[-.106681,.97790161],[-.0651939,.30363417],[.36637931,.70705422],[.19989224,1.21596221],[.56788793,.55024784],[.13631465,.14682779],[.40140086,1.05915583],[-.0301724,.65573577],[.44288793,.38488839],[-.3949353,1.0563048],[.50969827,1.18887747],[.64439655,.228082],[.27963362,.62865103],[.11314655,1.13755902],[.40948275,.1482533],[.04471982,.54882233],[.24299568,.65716129],[.3512931,.78688293],[-.1217672,1.05773031],[.18480603,1.29579091],[.71928879,.12116856],[.55280172,.63007655],[.12122844,.22665649],[.38631465,1.13898453],[-.0452586,.73556448],[.07974137,.90092393],[.75431034,.47327016],[.32273706,.06985011],[.15625,.57875809],[.62931034,.30791071],[-.0501077,1.21596221],[.83081896,.15110433],[.15140086,1.05915583],[.6244612,.78830844],[.45797413,1.29721642],[.35290948,.90234945],[-.0786637,.49892939],[.39439655,.228082],[-.2451508,1.00783737],[.22790948,.73698999],[-.1368534,1.13755902],[.59590517,.07127562],[-.0021551,.17676355],[.06465517,.98075264],[.53771551,.70990525],[.37122844,1.21881323],[.57273706,1.06200685],[.66756465,.22950752],[-.0037715,.39201595],[-.1702586,.90092393],[.13631465,1.13898453],[-.4617456,1.24447246],[.50431034,.47327016],[.07273706,.06985011],[-.135237,1.25302554],[.37931034,.30791071],[-.09375,.57875809],[-.260237,1.08766608],[.33782327,.98217815],[.21282327,.81681869],[.10775862,.42195171],[.58081896,.15110433],[.41433189,.66001231],[.40948275,1.14041004],[-.0220905,.73698999],[-.1271551,.34212301],[.34590517,.07127562],[-.2936422,.85103099],[.1794181,.58018361],[.01293103,1.08909159],[.65247844,.30933622],[.61099137,.98360366],[.38092672,.42337723],[.85398706,.15252984],[.6875,.66143782],[.25592672,.25801777],[.32273706,1.06200685],[-.2219827,1.00926289],[.4525862,.58160912],[.08782327,.98217815],[-.385237,1.25302554],[.39439655,1.22023875],[.22252155,.02138268],[.28933189,.82537177],[-.1422413,.42195171],[.76239224,.55452438],[-.3087284,.9308597],[.16433189,.66001231],[-.0021551,1.16892029],[.47090517,.89807291],[.59590517,1.06343236],[-.1072198,.77405331],[.36584051,.50320593],[.19935344,1.01211391],[.83890086,.23235854],[.67241379,.74126653],[.56734913,.34639955],[-.0705818,.58018361],[-.2370689,1.08909159],[.13092672,.42337723],[.60398706,.15252984],[.4375,.66143782],[.00592672,.25801777],[.27101293,1.17034581],[-.0355603,.93228521],[.33243534,.26657084],[.63900862,.50463144],[.20743534,.10121139],[.04094827,.61011937],[.71551724,.1824656],[.03933189,.82537177],[-.1939655,.53029067],[-.2521551,1.16892029],[.71390086,.397718],[.48060344,.1026369],[.54741379,.90662598],[.11584051,.50320593],[-.0506465,1.01211391],[.42241379,.74126653],[.25592672,1.25017451],[.31734913,.34639955],[.79040948,.07555216],[.15086206,.85530753],[.62392241,.58446014],[.45743534,1.09336813],[.82543103,.42765376],[-.1190732,.42337723],[-.2855603,.93228521],[.08243534,.26657084],[.38900862,.50463144],[-.0840517,.77547883],[.22252155,1.01353943],[.69558189,.74269204],[-.2090517,.61011937],[-.2505387,1.28438681],[.59051724,.34782506],[.42403017,.85673304],[.46551724,.1824656],[.53232758,.98645469],[-.0075431,.45331299],[.66702586,.02565922],[-.1756465,1.17747337],[.06734913,.34639955],[.265625,.4547385],[-.0991379,.85530753],[.33243534,1.25872759],[.20743534,1.09336813],[.94019396,.02708473],[.10237068,.69850115],[.57543103,.42765376],[-.0641163,1.20740913],[.40894396,.93656175],[-.0274784,1.01353943],[.34051724,.34782506],[-.1325431,.61867245],[.17403017,.85673304],[.64709051,.58588566],[.48060344,1.09479364],[-.2990301,1.12758043],[.54202586,.19101868],[.37553879,.69992666],[.41702586,.02565922],[-.0560344,.29650661],[.25053879,.5345672],[-.2225215,.80541459],[.08405172,1.04347519],[.45204741,.37776082],[.92510775,.10691344],[.75862068,.61582142],[.015625,.4547385],[.08243534,1.25872759],[.21713362,.29793212],[.69019396,.02708473],[-.1476293,.69850115],[-.3141163,1.20740913],[.15894396,.93656175],[.46551724,1.17462234],[.52693965,.27084738],[.36045258,.77975537],[-.0711206,.37633531],[.19396551,1.28866335],[.13038793,.21952893],[-.0759698,.85673304],[.12553879,.69992666],[.59859913,.42907928],[-.0409482,1.20883465],[53879e-8,.5345672],[.43211206,.93798726],[-.1659482,1.04347519],[-.3475215,.97077405],[.32704741,.54312028],[.80010775,.27227289],[.63362068,.78118088],[.20204741,.37776082],[.67510775,.10691344],[.03556034,.88666881],[.50862068,.61582142],[.46713362,1.29008886],[.40355603,.22095444],[.71012931,.45901504],[-.0328663,.29793212],[.44019396,.02708473],[-.1993534,.8068401],[-.3658405,1.31574809],[.16864224,.14112574],[.47521551,.37918634],[.54202586,1.18317542],[.11045258,.77975537],[.30872844,.88809432],[-.0560344,1.28866335],[.78502155,.3521016],[.61853448,.86100958],[.1869612,.45758953],[.14547413,1.13185697],[.86153017,.02993576],[-.1244612,.69992666],[-.2909482,1.20883465],[.38846982,.30078315],[-.0894396,1.05202826],[-.0479525,.37776082],[.38362068,.78118088],[-.2144396,.88666881],[.21713362,1.29008886],[.58512931,.6243745],[.15355603,.22095444],[.41864224,1.13328248],[-.012931,.72986243],[.02855603,.05559498],[-.1794181,1.23877041],[.46012931,.45901504],[.29364224,.96792302],[.35506465,.06414806],[.66163793,.30220866],[.49515086,.81111664],[.22521551,.37918634],[-.4143318,1.15894171],[.05872844,.88809432],[.42672413,.22237995],[.73329741,.46044055],[.26023706,.73128794],[-.1045258,1.13185697],[.5700431,.7042032],[.13846982,.30078315],[.40355603,1.21311118],[.4450431,.53884374],[-.0280172,.80969113],[.33674568,.4091221],[.64655172,.38203736],[.17349137,.65288475],[-.0328663,1.29008886],[.84806034,.22523098],[.16864224,1.13328248],[-.262931,.72986243],[.64170258,.86243509],[-.4294181,1.23877041],[.04364224,.96792302],[.10506465,.06414806],[-.0614224,.57305604],[.41163793,.30220866],[-.2279094,1.08196403],[.24515086,.81111664],[.07866379,1.32002463],[.7182112,.54026926],[.55172413,1.04917724],[.61314655,.14540228],[.44665948,.65431026],[.0150862,.25089021],[-.1514008,.75979819],[.38846982,1.29293989],[.01023706,.73128794],[-.15625,1.24019592],[.68480603,.30363417],[.51831896,.81254215],[.15355603,1.21311118],[.35183189,1.32145014],[-.4445043,1.31859911],[.28825431,.25231572],[.08997844,.14397676],[-.0765086,.65288475],[-.2429956,1.16179273],[.23006465,.89094534],[.59806034,.22523098],[-.041487,1.00498635],[.43157327,.73413896],[.2650862,1.24304695],[.42672413,1.2145367],[-.0048491,.81111664],[-.1713362,1.32002463],[-.1099137,.41624966],[.36314655,.14540228],[-.2764008,.92515765],[.19665948,.65431026],[.03017241,1.16321824],[.07165948,.4889508],[.66971982,.38346287],[.50323275,.89237086],[.3981681,.49750388],[-.0334051,.09408382],[.87122844,.22665649],[-.1998922,.60299181],[.2731681,.33214442],[-.40625,1.24019592],[.10668103,.84105241],[.74622844,.06129704],[.70474137,.73556448],[.47467672,.17533804],[.78125,.41339864],[.26831896,.81254215],[.03825431,.25231572],[.10506465,1.0563048],[-.1282327,.7612237],[.30334051,1.16464376],[.23976293,.09550934],[.5463362,.33356993],[-.291487,1.00498635],[.18157327,.73413896],[.0150862,1.24304695],[.48814655,.97219956],[.38308189,.57733258],[.85614224,.3064852],[.21659482,1.08624057],[.68965517,.81539318],[-.0533405,.65431026],[-.2198275,1.16321824],[.1481681,.49750388],[.62122844,.22665649],[-.0183189,1.00641186],[.0231681,.33214442],[.28825431,1.24447246],[-.1433189,.84105241],[.45474137,.73556448],[.82273706,.06985011],[.65625,.57875809],[.22467672,.17533804],[.48976293,1.08766608],[.53125,.41339864],[.05818965,.68424602],[.36476293,.92230662],[.42618534,.01853166],[.73275862,.25659226],[-.010237,.09550934],[-.1767241,.60441732],[.2963362,.33356993],[-.3432112,1.1133253],[.49784482,.17676355],[.13308189,.57733258],[-.1002155,.28225148],[-.0334051,1.08624057],[.33135775,.68567154],[.80765086,.14967881],[.64116379,.6585868],[.47467672,1.16749478],[-.2683189,1.00641186],[.03825431,1.24447246],[.57273706,.06985011],[.40625,.57875809],[-.0253232,.17533804],[.23976293,1.08766608],[-.1918103,.68424602],[-.0668103,.84960548],[-.3582974,1.19315401],[.60775862,.42195171],[.17618534,.01853166],[.44127155,.9308597],[.48275862,.25659226],[.00969827,.52743964],[.31627155,.76550024],[.78933189,.49465285],[.14978448,1.27440822],[-.1567887,1.03634763],[.68426724,.09978587],[.51778017,.60869386],[.24784482,.17676355],[.08135775,.68567154],[-.0237068,.29080456],[.44935344,.01995717],[.28286637,.52886515],[.75592672,.25801777],[-.0818965,.92943418],[.58943965,.76692575],[.22467672,1.16749478],[.95743534,.10121139],[.359375,.20669932],[.42618534,1.0106884],[-.3168103,.84960548],[-.010237,1.08766608],[.35775862,.42195171],[.19127155,.9308597],[.66433189,.66001231],[.49784482,1.16892029],[.06627155,.76550024],[-.2817887,1.20170708],[-.1002155,1.27440822],[.43426724,.09978587],[-.0387931,.37063326],[.26778017,.60869386],[.74084051,.33784647],[.1012931,1.11760184],[.57435344,.84675446],[-.2052801,.87954124],[.46928879,.45188748],[-.1686422,.68567154],[.19935344,.01995717],[.03286637,.52886515],[.50592672,.25801777],[-.1336206,1.03777314],[.234375,.37205877],[.70743534,.10121139],[.54094827,.61011937],[.109375,.20669932],[.17618534,1.0106884],[.3744612,1.11902735],[.31088362,.04989293],[-.0538793,.45046196],[.62068965,.0228082],[-.0587284,.9308597],[.14278017,.77405331],[.61584051,.50320593],[-.0237068,1.2829613],[.01778017,.60869386],[.44935344,1.01211391],[-.1487068,1.11760184],[.65086206,.85530753],[.21928879,.45188748],[.69234913,.18104009],[.05280172,.96079546],[.52586206,.68994807],[.359375,1.19885606],[-.2537715,.72273486],[.42079741,.29508109],[.89385775,.02423371],[.72737068,.53314169],[.56088362,1.04204968],[-.3836206,1.03777314],[-.015625,.37205877],[.45743534,.10121139],[-.182112,.88096676],[.29094827,.61011937],[.1244612,1.11902735],[.49245689,.45331299],[.06088362,.04989293],[.32596982,.96222097],[-.1056034,.55880092],[-.2720905,1.0677089],[.56896551,.13114715],[.63577586,.93513623],[.20420258,.53171618],[.40247844,.64005513],[.87877155,.10406241],[-.2737068,1.2829613],[.33405172,.05131845],[.40086206,.85530753],[-.0307112,.45188748],[-.1971982,.96079546],[.109375,1.19885606],[.17079741,.29508109],[.64385775,.02423371],[.00431034,.80398908],[.04579741,.12972164],[-.1621767,1.31289706],[.47737068,.53314169],[.31088362,1.04204968],[.43588362,1.20740913],[.67887931,.37633531],[.51239224,.88524329],[.08081896,.48182324],[-.1255387,1.11902735],[.75538793,.05416947],[-.2306034,.72416038],[.54903017,.69137359],[-.3970905,1.23306836],[.24245689,.45331299],[.07596982,.96222097],[.91702586,.02565922],[.75053879,.5345672],[.31896551,.13114715],[.58405172,1.04347519],[-.3205818,.91090252],[.27747844,.80541459],[.15247844,.64005513],[.82704741,.21240137],[.35398706,.48324875],[-.0107758,.88381778],[.08405172,.05131845],[.6637931,.45616401],[.11907327,.40342005],[.18588362,1.20740913],[-.2456896,.80398908],[-.4121767,1.31289706],[.06088362,1.04204968],[.42887931,.37633531],[-.2106681,1.15609068],[-.169181,.48182324],[.26239224,.88524329],[-.3356681,.99073122],[.73545258,.61439591],[.56896551,1.12330389],[.46390086,.72843691],[.03232758,.32501686],[.50538793,.05416947],[-.1341594,.83392484],[.33890086,.56307746],[-.1740301,.96222097],[.50053879,.5345672],[.54040948,.40627107],[.33405172,1.04347519],[.02747844,.80541459],[-.1390086,1.31432258],[.53556034,.88666881],[.10398706,.48324875],[.17079741,1.28723784],[-.0625,.99215674],[-.0010775,.08838177],[.77855603,.05559498],[.30549568,.32644237],[.61206896,.56450297],[.24730603,.965072],[.44558189,1.07341095],[-.2257543,1.23591938],[.38200431,.00427653],[.28232758,1.3171736],[.44396551,1.28866335],[.01239224,.88524329],[.38038793,.21952893],[.21390086,.72843691],[.6869612,.45758953],[.04741379,1.2373449],[.08890086,.56307746],[.52047413,.96649751],[-.0161637,.16821048],[-.1826508,.67711846],[.29040948,.40627107],[.12392241,.91517906],[.76346982,.13542369],[.59698275,.64433167],[-.3890086,1.31432258],[.4919181,.24946469],[.28556034,.88666881],[-.1460129,.48324875],[.79849137,.48752529],[-.3125,.99215674],[.52855603,.05559498],[.32058189,1.23877041],[-.1109913,.83535036],[.36206896,.56450297],[.05549568,.32644237],[.25700431,.16963599],[.56357758,.40769659],[.13200431,.00427653],[.19881465,.80826562],[-.0344827,.51318452],[.03232758,1.3171736],[.39709051,.91660457],[.6400862,.08553075],[.16217672,.83677587],[-.2025862,1.2373449],[.63846982,.30078315],[.83674568,.4091221],[-.0010775,1.08053852],[.04040948,.40627107],[.47198275,.80969113],[-.1260775,.91517906],[.30549568,1.31859911],[.67349137,.65288475],[.2419181,.24946469],[.50700431,1.16179273],[.07543103,.75837268],[.54849137,.48752529],[.38200431,.99643327],[-.091056,1.26728066],[.75,.33071891],[.58351293,.83962689],[.54364224,.96792302],[.00700431,.16963599],[.31357758,.40769659],[-.1594827,.67854397],[-.3259698,1.18745196],[.14709051,.91660457],[.20851293,.01282961],[.04202586,.52173759],[.5150862,.25089021],[.34859913,.75979819],[-.0829741,.35637813],[.3900862,.08553075],[-.2494612,.86528612],[.42510775,.43763235],[.4919181,1.24162143],[-.2510775,1.08053852],[.05549568,1.31859911],[.42349137,.65288475],[.19019396,.35780365],[.25700431,1.16179273],[-.1745689,.75837268],[.13200431,.99643327],[-.341056,1.26728066],[.5,.33071891],[.02693965,.6015663],[.33351293,.83962689],[-.1395474,1.11047428],[.70150862,.17391253],[.53502155,.68282051],[-.1029094,.91660457],[.2650862,.25089021],[-.3744612,1.03064558],[.09859913,.75979819],[-.0678879,1.26870617],[.57165948,.4889508],[.40517241,.99785879],[.46659482,.09408382],[.30010775,.60299181],[.7731681,.33214442],[.60668103,.84105241],[.17510775,.43763235],[.2419181,1.24162143],[.0700431,.04276537],[.37661637,.28082597],[.84967672,.00997858],[.68318965,.51888657],[.00700431,1.16179273],[.14170258,.20099727],[.68157327,.73413896],[-.2230603,.6015663],[.5150862,1.24304695],[.08351293,.83962689],[-.3895474,1.11047428],[.45150862,.17391253],[.28502155,.68282051],[.75808189,.41197312],[.11853448,1.1917285],[.59159482,.92088111],[-.1880387,.9536679],[-.3178879,1.26870617],[.21659482,.09408382],[.05010775,.60299181],[.5231681,.33214442],[-.1163793,1.11189979],[-.0748922,.43763235],[.35668103,.84105241],[.25161637,.44618543],[.72467672,.17533804],[.55818965,.68424602],[.12661637,.28082597],[.59967672,.00997858],[-.0398706,.78973395],[.39170258,1.19315401],[-.2063577,1.29864194],[.92618534,.01853166],[.328125,.12401959],[.63469827,.36208019],[.4682112,.87098817],[.0932112,.04419088],[.39978448,.28225148],[.46659482,1.08624057],[.03502155,.68282051],[-.0732758,.55309887],[-.1314655,1.1917285],[.23653017,.52601413],[.70959051,.25516674],[.0700431,1.03492211],[.54310344,.76407473],[.37661637,1.27298271],[.74461206,.60726835],[-.1600215,.47469568],[-.3663793,1.11189979],[.51454741,.04704191],[.00161637,.44618543],[-.1648706,.95509341],[.30818965,.68424602],[.61476293,.92230662],[-.2898706,.78973395],[.14170258,1.19315401],[-.4563577,1.29864194],[.67618534,.01853166],[.03663793,.79828703],[.078125,.12401959],[.50969827,.52743964],[-.088362,.63292757],[.38469827,.36208019],[-.2548491,1.14183556],[.2182112,.87098817],[.3432112,1.03634763],[.58620689,.2052738],[.41971982,.71418179],[.14978448,.28225148],[.3512931,.1254451],[-.1217672,.39629249],[.18480603,.63435308],[-.1799568,1.03492211],[.12661637,1.27298271],[.859375,.20669932],[.49461206,.60726835],[.06303879,.20384829],[.328125,1.11617633],[.26454741,.04704191],[.52963362,.95936995],[.09806034,.55594989],[-.1082974,1.19315401],[.77262931,.12829613],[.25969827,.52743964],[.56627155,.76550024],[-.3798491,1.30719501],[.39978448,1.27440822],[.0932112,1.03634763],[-.0317887,.87098817],[.93426724,.09978587],[.76778017,.60869386],[-.1368534,.47612119],[.33620689,.2052738],[.64278017,.4433344],[-.3033405,.98502917],[.16971982,.71418179],[.29471982,.87954124],[.00323275,1.22308977],[.06465517,.31931481],[.53771551,.04846742],[.84428879,.28652802],[.37122844,.55737541],[.67780172,.795436],[.1012931,.1254451],[-.0651939,.63435308],[-.231681,1.14326107],[.13631465,.4775467],[.609375,.20669932],[.44288793,.7156073],[.078125,1.11617633],[.81088362,.04989293],[.21282327,.15538086],[.27963362,.95936995],[-.1519396,.55594989],[-.3184267,1.06485788],[.52262931,.12829613],[-.1169181,.9080515],[.35614224,.63720411],[-.0220905,.07555216],[.55765086,.48039773],[.3512931,1.11760184],[-.0802801,.71418179],[-.2467672,1.22308977],[.28771551,.04846742],[.55280172,.96079546],[.59428879,.28652802],[.12122844,.55737541],[.42780172,.795436],[.07974137,1.23164285],[.26131465,1.30434399],[-.0452586,1.06628339],[.79579741,.12972164],[.32273706,.40056902],[.62931034,.63862962],[.19773706,.23520957],[.26454741,1.03919865],[.46282327,1.14753761],[.39924568,.07840319],[-.2801724,.98645469],[-.0786637,.8296483],[-.0371767,.15538086],[.39439655,.55880092],[.22790948,1.0677089],[.86745689,.28795353],[.70420258,.53171618],[.06465517,1.31147155],[.10614224,.63720411],[.53771551,1.04062416],[-.0603448,1.14611209],[.30765086,.48039773],[.7807112,.20955034],[.14116379,.98930571],[.61422413,.71845833],[-.2952586,1.06628339],[.07273706,.40056902],[.33782327,1.31289706],[-.09375,.90947701],[.37931034,.63862962],[.21282327,1.14753761],[-.21875,.74411755],[-.0522629,.23520957],[.27424568,.24376264],[.10775862,.75267063],[.58081896,.48182324],[.41433189,.99073122],[-.0172413,.58731117],[.45581896,.31646378],[.14924568,.07840319],[.65732758,.1596574],[.49084051,.66856539],[-.0220905,1.0677089],[.1794181,.91090252],[.65247844,.64005513],[-.1853448,1.31147155],[-.0506465,.35067608],[.42241379,.0798287],[.25592672,.58873668],[.48922413,.88381778],[-.1088362,.98930571],[.19773706,1.22736631],[.73221982,.05274396],[.93049568,.16108291],[.09267241,.83249933],[.56573275,.56165194],[.39924568,1.07055993],[.76724137,.40484556],[.60075431,.91375355],[-.34375,.90947701],[-.0371767,1.14753761],[.02424568,.24376264],[-.1422413,.75267063],[.33081896,.48182324],[-.3087284,1.26157861],[.16433189,.99073122],[.63739224,.71988384],[.47090517,1.22879182],[.53232758,.32501686],[.36584051,.83392484],[-.0657327,.43050479],[.40732758,.1596574],[-.2322198,.93941277],[.24084051,.66856539],[.13577586,.27369841],[.6088362,.00285102],[.44234913,.511759],[.17241379,.0798287],[.4375,.99215674],[.00592672,.58873668],[.20743534,.4319303],[.68049568,.16108291],[-.1573275,.83249933],[.14924568,1.07055993],[.88200431,.00427653],[.51724137,.40484556],[.28394396,.10976446],[.35075431,.91375355],[.28232758,.32501686],[-.3572198,1.10477223],[.11584051,.83392484],[.42241379,1.07198544],[-.0091594,.66856539],[.31734913,.67711846],[.3588362,.00285102],[.79040948,.40627107],[-.2807112,.78260639],[.19234913,.511759],[.02586206,1.02066699],[.66540948,.24091162],[.49892241,.7498196],[.62392241,.91517906],[.39385775,.35495262],[.8669181,.08410524],[.70043103,.59301322],[.53394396,1.1019212],[-.0425646,.4319303],[-.2090517,.94083828],[.63200431,.00427653],[.15894396,.27512392],[.46551724,.51318452],[-.0075431,.7840319],[.10075431,.91375355],[.29903017,1.0220925],[-.372306,1.18460093],[.66702586,.35637813],[.77532327,.48609978],[.13577586,1.26585515],[.6088362,.99500776],[.06734913,.67711846],[-.0991379,1.18602644],[.37392241,.91517906],[-.2241379,1.02066699],[.7419181,.24946469],[.57543103,.75837268],[.14385775,.35495262],[.6169181,.08410524],[-.0226293,.86386061],[.45043103,.59301322],[.28394396,1.1019212],[.40894396,1.26728066],[.34536637,.19814624],[.65193965,.43620684],[.48545258,.94511482],[-.091056,.27512392],[.21551724,.51318452],[-.2575431,.7840319],[-.4240301,1.29293989],[.11045258,.11831754],[.41702586,.35637813],[.8900862,.08553075],[.25053879,.86528612],[.72359913,.59443873],[-.1142241,1.26585515],[-.0560344,.62722552],[.61853448,.19957175],[.49353448,.0342123],[.56034482,.83820138],[.02047413,.30505968],[.33028017,.27797494],[-.3491379,1.18602644],[-.1476293,1.02922006],[.32543103,.75837268],[.15894396,1.26728066],[-.2726293,.86386061],[.03394396,1.1019212],[.09536637,.19814624],[.36045258,1.11047428],[-.0711206,.70705422],[.40193965,.43620684],[.70851293,.67426744],[-.2376077,1.21596221],[.23545258,.94511482],[.13038793,.55024784],[.60344827,.27940046],[.4369612,.78830844],[.16702586,.35637813],[53879e-8,.86528612],[.36853448,.19957175],[-.1045258,.47041914],[.20204741,.70847974],[.24353448,.0342123],[.67510775,.43763235],[.50862068,.94654033],[.5700431,.04276537],[.87661637,.28082597],[-.0280172,.1482533],[.27855603,.3863139],[.34536637,1.19030298],[-.0862068,.78688293],[.58836206,.35922916],[.27693965,.6015663],[.04364224,.3064852],[.11045258,1.11047428],[-.0145474,.94511482],[-.119612,.55024784],[.35344827,.27940046],[.66002155,.51746105],[-.2860991,1.05915583],[.49353448,1.02636904],[.1869612,.78830844],[.02047413,1.29721642],[.55495689,.12259408],[.86153017,.36065467],[-.0431034,.228082],[.38846982,.63150206],[.15840517,.07127562],[-.0479525,.70847974],[-.2144396,1.21738772],[.25862068,.94654033],[.15355603,.55167336],[.62661637,.28082597],[-.012931,1.06058134],[.02855603,.3863139],[.46012931,.78973395],[-.137931,.89522188],[.29364224,1.29864194],[.828125,.12401959],[.66163793,.63292757],[.23006465,.22950752],[.53663793,.46756811],[-.3011853,1.13898453],[.37338362,.71133076],[-.0048491,.14967881],[-.1713362,.6585868],[.36853448,1.1917285],[-.2295258,1.29721642],[.30495689,.12259408],[.5700431,1.03492211],[.13846982,.63150206],[.50323275,.23093303],[.4450431,.86956266],[.01346982,.4661426],[-.0280172,1.14041004],[.81303879,.20384829],[.64655172,.71275627],[.68803879,.03848883],[.48006465,1.22166426],[.21497844,.30933622],[.17349137,.98360366],[.41648706,.15252984],[-.262931,1.06058134],[.21012931,.78973395],[.04364224,1.29864194],[.41163793,.63292757],[-.0199353,.22950752],[.24515086,1.14183556],[-.1864224,.7384155],[-.3529094,1.24732348],[.18157327,.07270114],[.0150862,.58160912],[.48814655,.31076173],[.32165948,.81966972],[.96120689,.03991435],[-.0431034,1.22023875],[.68965517,.15395535],[.79795258,.28367699],[.15840517,1.06343236],[.63146551,.79258498],[.25323275,.23093303],[-.2780172,1.14041004],[.76131465,.31218725],[.08997844,.47469568],[.39655172,.71275627],[-.0765086,.98360366],[.23006465,1.22166426],[-.2015086,.8182442],[.59806034,.55594989],[.16648706,.15252984],[.43157327,1.06485788],[0,.66143782],[.47306034,.39059044],[-.166487,1.17034581],[.20150862,.50463144],[.67456896,.23378405],[.50808189,.74269204],[-.0048491,1.14183556],[.66971982,.71418179],[.23814655,.31076173],[.50323275,1.22308977],[-.4014008,1.0905171],[.07165948,.81966972],[-.0334051,.42480274],[.43965517,.15395535],[.2731681,.66286334],[.74622844,.39201595],[-.0915948,1.06343236],[.21497844,1.30149296],[.04310344,.1026369],[.58297413,.6357786],[.34967672,.3406975],[.41648706,1.14468658],[-.1282327,1.09194262],[-.3265086,.98360366],[.34806034,.55594989],[.5463362,.66428885],[.18157327,1.06485788],[-.25,.66143782],[.48814655,1.30291847],[-.416487,1.17034581],[.05657327,.89949842],[.38308189,.9080515],[-.0484913,.50463144],[.42456896,.23378405],[-.2149784,1.01353943],[.25808189,.74269204],[.09159482,1.25160002],[.73114224,.47184465],[.62607758,.07697767],[.45959051,.58588566],[.25323275,1.22308977],[.18965517,.15395535],[.0231681,.66286334],[-.1433189,1.17177132],[-.0818965,.26799636],[.22467672,.50605695],[.69773706,.23520957],[.53125,.74411755],[.09967672,.3406975],[.36476293,1.25302554],[.05818965,1.01496494],[.16648706,1.14468658],[.89924568,.07840319],[.73275862,.58731117],[.30118534,.18389112],[.06627155,.10406241],[.13308189,.9080515],[-.1002155,.6129704],[.43965517,1.14611209],[-.1584051,1.25160002],[.80765086,.48039773],[.37607758,.07697767],[.57435344,.18531663],[-.2634698,.85673304],[.20959051,.58588566],[.04310344,1.09479364],[.51616379,.82394625],[.41109913,.42907928],[.88415948,.15823189],[.71767241,.66713987],[.55118534,1.17604786],[-.3933189,1.17177132],[-.0253232,.50605695],[.28125,.74411755],[-.1918103,1.01496494],[.11476293,1.25302554],[.17618534,.34925057],[.64924568,.07840319],[.48275862,.58731117],[.05118534,.18389112],[.31627155,1.09621915],[-.1153017,.6927991],[.00969827,.85815856],[.68426724,.43050479],[.25269396,.02708473],[.55926724,.26514533],[.08620689,.53599272],[.39278017,.77405331],[.76077586,.10833895],[-.1487068,.45616401],[.32435344,.18531663],[.39116379,.98930571],[-.2068965,1.09479364],[.52586206,.02851025],[.16109913,.42907928],[-.0053879,.93798726],[.46767241,.66713987],[.30118534,1.17604786],[.8356681,.00142551],[.66918103,.51033349],[.50269396,1.01924148],[-.0738146,.34925057],[.23275862,.58731117],[-.2403017,.85815856],[.06627155,1.09621915],[.43426724,.43050479],[.90732758,.1596574],[.26778017,.93941277],[.30926724,.26514533],[.74084051,.66856539],[.00269396,.02708473],[-.1637931,.53599272],[-.0387931,.70135217],[.63577586,.27369841],[-.3302801,1.0449007],[.51077586,.10833895],[.03771551,.37918634],[.34428879,.61724693],[.81734913,.34639955],[-.3318965,1.2601531],[.27586206,.02851025],[.34267241,.83249933],[.109375,.53741823],[-.2553879,.93798726],[.05118534,1.17604786],[.78394396,.10976446],[-.0538793,.78118088],[.41918103,.51033349],[-.2203663,1.29008886],[.25269396,1.01924148],[.61745689,.61867245],[.45420258,.86243509],[.18426724,.43050479],[.22413793,.30220866],[.01778017,.93941277],[-.4552801,1.21026016],[.32435344,1.17747337],[.38577586,.27369841],[.8588362,.00285102],[.21928879,.78260639],[.26077586,.10833895],[.05280172,1.29151437],[.09428879,.61724693],[.69234913,.511759],[-.0721982,1.12615492],[.52586206,1.02066699],[-.0107758,.22237995],[.29579741,.46044055],[.76885775,.18959317],[.60237068,.69850115],[.97036637,.03278678],[.02586206,.02851025],[-.140625,.53741823],[.06088362,.38061185],[.53394396,.10976446],[-.1056034,.88951983],[-.4703663,1.29008886],[.37068965,.35352711],[.13739224,.05844601],[.20420258,.86243509],[.56896551,.46186606],[.51077586,1.10049569],[-.025862,.30220866],[.44719827,.03136127],[-.1923491,.81111664],[.23922413,1.2145367],[-.0307112,.78260639],[.48221982,.38346287],[-.1971982,1.29151437],[.27586206,1.02066699],[-.3221982,1.12615492],[.17079741,.62580001],[.64385775,.35495262],[.00431034,1.13470799],[.04579741,.46044055],[.47737068,.86386061],[-.1206896,.96934854],[.35237068,.69850115],[.67887931,.70705422],[.24730603,.30363417],[.72036637,.03278678],[.08081896,.81254215],[.55387931,.54169477],[.38739224,1.05060275],[.75538793,.38488839],[-.1540948,.73271345],[.38577586,1.26585515],[.31896551,.46186606],[.15247844,.97077405],[.52047413,.30505968],[-.0775862,.41054761],[.46228448,.94368931],[-.0107758,1.2145367],[.6637931,.78688293],[.23221982,.38346287],[.49730603,1.29579091],[-.4471982,1.29151437],[-.4073275,1.16321824],[.74030172,.46471709],[-.2456896,1.13470799],[.22737068,.86386061],[.26724137,.73556448],[.42887931,.70705422],[-.0026939,.30363417],[.26239224,1.21596221],[-.169181,.81254215],[.30387931,.54169477],[-.3356681,1.32145014],[.13739224,1.05060275],[.19881465,.14682779],[.03232758,.65573577],[.50538793,.38488839],[.33890086,.89379637],[-.0926724,.49037632],[-.025862,1.2943654],[.70689655,.228082],[.1088362,.33356993],[.58189655,.06272255],[.06896551,.46186606],[.74353448,.0342123],[.57704741,.54312028],[.10398706,.81396767],[-.2607758,1.2145367],[.77855603,.3863139],[.4137931,.78688293],[.61206896,.89522188],[.24730603,1.29579091],[-.1842672,.89237086],[.85506465,.06414806],[.18372844,.22665649],[.49030172,.46471709],[.01724137,.73556448],[-.1492456,1.24447246],[.69181034,.30791071],[.52532327,.81681869],[.01239224,1.21596221],[-.0511853,.14682779],[.6869612,.78830844],[-.2176724,.65573577],[.25538793,.38488839],[-.3841594,1.16464376],[.08890086,.89379637],[-.0161637,.49892939],[.45689655,.228082],[.29040948,.73698999],[.33189655,.06272255],[.12392241,1.24589797],[-.3076508,.84247792],[.16540948,.57163053],[.76346982,.4661426],[.59698275,.97505059],[.06034482,.17676355],[.3669181,.41482415],[.83997844,.14397676],[-.1109913,1.16606927],[.36206896,.89522188],[.56357758,.7384155],[.13200431,.33499545],[.19881465,1.13898453],[-.0344827,.84390343],[-.2327586,.73556448],[-.3992456,1.24447246],[.44181034,.30791071],[.6400862,.41624966],[-.197737,1.08766608],[.27532327,.81681869],[.47683189,.66001231],[.27047413,1.29721642],[.20689655,.228082],[.04040948,.73698999],[-.1260775,1.24589797],[.34698275,.97505059],[.40840517,.07127562],[.2419181,.58018361],[.71497844,.30933622],[.07543103,1.08909159],[.1169181,.41482415],[.54849137,.8182442],[-.0495689,.92373213],[.91648706,.15252984],[.01185344,.01995717],[.31842672,.25801777],[.625,.49607837],[.15193965,.76692575],[.82650862,.33927198],[-.1179956,.33499545],[.14709051,1.24732348],[-.2844827,.84390343],[.08351293,.17818906],[-.0829741,.68709705],[.3900862,.41624966],[.45689655,1.22023875],[.59159482,.25944328],[.22683189,.66001231],[-.0064655,.36493121],[.06034482,1.16892029],[.53340517,.89807291],[.90140086,.23235854],[-.3760775,1.24589797],[-.0080818,.58018361],[-.1745689,1.08909159],[.29849137,.8182442],[-.2995689,.92373213],[.66648706,.15252984],[.5,.66143782],[.06842672,.25801777],[.33351293,1.17034581],[.375,.49607837],[.02693965,.93228521],[.20851293,1.00498635],[-.0980603,.76692575],[-.2645474,1.27583374],[.70150862,.50463144],[.26993534,.10121139],[.57650862,.33927198],[.10344827,.61011937],[.41002155,.84817997],[.77801724,.1824656],[.1400862,.41624966],[.03502155,.02138268],[-.1314655,.53029067],[.34159482,.25944328],[.17510775,.76835126],[-.1896551,1.16892029],[.00862068,1.27725925],[.54310344,.1026369],[.84967672,.3406975],[-.0549568,.20812483],[.48491379,.74126653],[.31842672,1.25017451],[.51993534,1.09336813],[.25,.66143782],[-.2230603,.93228521],[.08351293,1.17034581],[.45150862,.50463144],[.01993534,.10121139],[.28502155,1.01353943],[.32650862,.33927198],[-.1465517,.61011937],[.16002155,.84817997],[-.3130387,1.11902735],[.52801724,.1824656],[.05495689,.45331299],[.36153017,.69137359],[.83459051,.4205262],[.72952586,.02565922],[.09159482,.25944328],[-.0748922,.76835126],[.29310344,.1026369],[.12661637,.61154488],[.59967672,.3406975],[-.2381465,1.01211391],[-.0398706,1.12045287],[.43318965,.84960548],[.80118534,.18389112],[.43642241,.58446014],[.203125,.28937904],[.26993534,1.09336813],[.63469827,.6927991],[.71120689,.37063326],[.03502155,1.01353943],[-.4380387,1.28438681],[.34159482,1.25160002],[.87607758,.07697767],[.23653017,.85673304],[.27801724,.1824656],[.70959051,.58588566],[.11153017,.69137359],[.54310344,1.09479364],[-.0549568,1.20028157],[.41810344,.92943418],[-.3615301,.96222097],[.47952586,.02565922],[.31303879,.5345672],[.78609913,.26371982],[.14655172,1.04347519],[.61961206,.7726278],[.453125,1.28153579],[-.1233836,.61154488],[-.2898706,1.12045287],[.078125,.4547385],[.55118534,.18389112],[-.088362,.96364649],[-.046875,.28937904],[.38469827,.6927991],[.2182112,1.20170708],[.27963362,.29793212],[.75269396,.02708473],[.58620689,.53599272],[.15463362,.13257266],[-.0118534,.64148065],[.52801724,1.17462234],[.46443965,.10548792],[.66271551,.21382688],[-.0134698,.85673304],[.29310344,1.09479364],[-.3049568,1.20028157],[.66109913,.42907928],[.42780172,.13399818],[.49461206,.93798726],[.06303879,.5345672],[-.1034482,1.04347519],[.36961206,.7726278],[.203125,1.28153579],[.26454741,.37776082],[.73760775,.10691344],[.09806034,.88666881],[.57112068,.61582142],[.40463362,1.1247294],[.77262931,.45901504],[.34105603,.05559498],[-.171875,.4547385],[-.338362,.96364649],[.13469827,.6927991],[-.0317887,1.20170708],[.50269396,.02708473],[.80926724,.26514533],[-.1368534,.8068401],[.64278017,.77405331],[.33620689,.53599272],[.16971982,1.0449007],[-.4283405,1.15038863],[.53771551,.37918634],[-.0603448,.48467427],[.47952586,1.01781596],[.41271551,.21382688],[.24622844,.72273486],[.61422413,.0570205],[.08297413,.96649751],[.17780172,.13399818],[.7575431,.53884374],[.24461206,.93798726],[-.3534482,1.04347519],[.01454741,.37776082],[.27963362,1.29008886],[-.1519396,.88666881],[.32112068,.61582142],[.15463362,1.1247294],[.52262931,.45901504],[.09105603,.05559498],[.35614224,.96792302],[-.075431,.56450297],[.12607758,.40769659],[.59913793,.1368492],[-.0802801,1.0449007],[.59428879,.61724693],[-.3518318,1.15894171],[.42780172,1.12615492],[.16271551,.21382688],[.12122844,.88809432],[.79579741,.46044055],[-.1088362,.32786788],[.62931034,.96934854],[.67079741,.29508109],[.36422413,.0570205],[.03125,1.07483647],[-.1670258,.96649751],[.19773706,.56592848],[.87230603,.13827471],[.5075431,.53884374],[.70581896,.6471827],[.34105603,1.04775173],[-.1320043,1.31859911],[-.0371767,.48609978],[.63739224,.05844601],[-.200431,.72986243],[.27262931,.45901504],[-.3669181,1.23877041],[.10614224,.96792302],[.47090517,.56735399],[.41271551,1.20598362],[.94719827,.03136127],[.30765086,.81111664],[-.1239224,.40769659],[.34913793,.1368492],[-.2904094,.91660457],[.18265086,.64575718],[.14116379,1.32002463],[.7807112,.54026926],[.0775862,.25089021],[.38415948,.4889508],[.85721982,.21810342],[.17780172,1.12615492],[-.09375,1.24019592],[.37931034,.96934854],[-.0522629,.56592848],[-.21875,1.07483647],[.58081896,.81254215],[.62230603,.13827471],[.14924568,.4091221],[.45581896,.6471827],[-.0172413,.91803008],[-.3820043,1.31859911],[.65732758,.49037632],[.22575431,.08695626],[.29256465,.89094534],[.05926724,.59586425],[.7338362,.16821048],[.89547413,.13970023],[.05765086,.81111664],[-.1088362,1.32002463],[.36422413,1.04917724],[-.2338362,1.15466517],[.73221982,.38346287],[.09267241,1.16321824],[.13415948,.4889508],[.56573275,.89237086],[-.0323275,.99785879],[.44073275,.7270114],[.3356681,.33214442],[.80872844,.06129704],[.16918103,.84105241],[.64224137,.57020502],[-.1007543,.4091221],[.16433189,1.32145014],[-.2672413,.91803008],[.20581896,.6471827],[.10075431,.25231572],[.40732758,.49037632],[-.0657327,.7612237],[-.0242456,.08695626],[-.1907327,.59586425],[.24084051,.9992843],[.88038793,.21952893],[.30226293,.09550934],[.6088362,.33356993],[.01077586,.43905786],[.4838362,.16821048],[.55064655,.97219956],[.68534482,.0114041],[-.3588362,1.32002463],[-.1573275,1.16321824],[.31573275,.89237086],[-.2823275,.99785879],[.51724137,.73556448],[.0856681,.33214442],[.35075431,1.24447246],[-.0808189,.84105241],[.39224137,.57020502],[.22575431,1.079113],[.59375,.41339864],[.12068965,.68424602],[.42726293,.92230662],[.79525862,.25659226],[.15732758,.49037632],[-.0091594,.9992843],[.05226293,.09550934],[-.1142241,.60441732],[.3588362,.33356993],[.19234913,.84247792],[.2338362,.16821048],[.83189655,.06272255],[.66540948,.57163053],[.49892241,1.08053852],[.56034482,.17676355],[-.0377155,.28225148],[.43534482,.0114041],[.26885775,.52031208],[.10237068,1.02922006],[.94342672,.09265831],[.03394396,.44048338],[.10075431,1.24447246],[.70851293,.01282961],[.34375,.41339864],[-.1293103,.68424602],[.17726293,.92230662],[-.2957974,1.19315401],[.4838362,1.16036722],[.54525862,.25659226],[.37877155,.76550024],[.21228448,1.27440822],[-.0576508,.84247792],[.31034482,.17676355],[-.3292025,.95651892],[.18534482,.0114041],[.14385775,.68567154],[.01885775,.52031208],[-.0226293,1.19457952],[.6169181,.41482415],[.45043103,.92373213],[.34536637,.52886515],[.81842672,.25801777],[.65193965,.76692575],[.22036637,.3635057],[.69342672,.09265831],[.05387931,.87241368],[.52693965,.6015663],[.72844827,.44475991],[-.0145474,.28367699],[.05226293,1.08766608],[-.1810344,.79258498],[.1869612,.12687061],[.49353448,.36493121],[.12877155,.76550024],[-.3442887,1.03634763],[-.0377155,1.27440822],[.43534482,1.00356084],[.33028017,.60869386],[.80334051,.33784647],[.1637931,1.11760184],[.63685344,.84675446],[-.1061422,.68567154],[-.2726293,1.19457952],[.20043103,.92373213],[.09536637,.52886515],[.56842672,.25801777],[-.0711206,1.03777314],[-.0296336,.3635057],[.40193965,.76692575],[-.1961206,.87241368],[.23545258,1.27583374],[.76993534,.10121139],[.60344827,.61011937],[.171875,.20669932],[.00538793,.7156073],[.47844827,.44475991],[.3119612,.9536679],[.37338362,.04989293],[.67995689,.28795353],[.24353448,.36493121],[.31034482,1.16892029],[-.2295258,.6357786],[-.2877155,1.27440822],[.4450431,.20812483],[.08028017,.60869386],[-.0862068,1.11760184],[.38685344,.84675446],[.75484913,.18104009],[.58836206,.68994807],[.15678879,.28652802],[.421875,1.19885606],[.35829741,.12972164],[-.3211206,1.03777314],[-.0145474,1.27583374],[-.119612,.88096676],[-.078125,.20669932],[.66002155,.84817997],[-.244612,.7156073],[.22844827,.44475991],[-.4110991,1.22451528],[.35344827,.61011937],[.0619612,.9536679],[.55495689,.45331299],[.12338362,.04989293],[.1869612,1.11902735],[.90301724,.01710615],[-.0431034,.55880092],[.73653017,.52601413],[.42995689,.28795353],[.26346982,.79686152],[.09698275,1.3057695],[.63146551,.13114715],[.1950431,.20812483],[.02855603,.71703281],[-.137931,1.2259408],[.39655172,.05131845],[.23006465,.56022643],[.703125,.28937904],[.33836206,.68994807],[.53663793,.79828703],[.171875,1.19885606],[-.2596982,.795436],[.90463362,.13257266],[.10829741,.12972164],[.37338362,1.04204968],[-.0581896,.63862962],[.41487068,.36778224],[.61637931,.21097585],[-.0630387,1.11902735],[.07165948,.15823189],[.61153017,.69137359],[.13846982,.96222097],[.4450431,1.20028157],[.01346982,.79686152],[-.1530172,1.3057695],[-.0915948,.40199454],[.38146551,.13114715],[.68803879,.36920775],[-.2580818,.91090252],[.52155172,.87811573],[.21497844,.64005513],[.04849137,1.14896312],[.88954741,.21240137],[-.0150862,.0798287],[.72306034,.72130935],[-.2214439,.71703281],[-.0199353,.56022643],[.453125,.28937904],[-.1864224,1.06913441],[.28663793,.79828703],[.65463362,.13257266],[.48814655,.64148065],[.05657327,.23806059],[.12338362,1.04204968],[.42995689,1.28011027],[.25808189,.08125421],[-.106681,.48182324],[.36637931,.21097585],[-.2731681,.99073122],[.19989224,.71988384],[.56465517,.31931481],[.40140086,.56307746],[.8744612,.29223007],[.1950431,1.20028157],[.23491379,1.07198544],[-.4030172,1.3057695],[.39655172,1.04347519],[-.0350215,.64005513],[.27155172,.87811573],[-.2015086,1.14896312],[.63954741,.21240137],[.16648706,.48324875],[0,.99215674],[.47306034,.72130935],[.30657327,1.23021733],[.04148706,.3178893],[.84105603,.05559498],[.67456896,.56450297],[.24299568,.16108291],[.07650862,.6699909],[.75107758,.24233713],[.23814655,.64148065],[.07165948,1.15038863],[.91271551,.21382688],[.00808189,.08125421],[-.1584051,.59016219],[.38146551,1.12330389],[-.2165948,1.22879182],[.51616379,.16250843],[.15140086,.56307746],[-.0150862,1.07198544],[.45797413,.80113805],[.82596982,.13542369],[.18642241,.91517906],[.65948275,.64433167],[.49299568,1.15323966],[-.0835129,.48324875],[-.25,.99215674],[.22306034,.72130935],[.05657327,1.23021733],[.59105603,.05559498],[.78933189,.16393394],[-.0484913,.83535036],[.42456896,.56450297],[.25808189,1.07341095],[.29956896,.39914351],[-.1734913,.6699909],[-.3399784,1.17889888],[-.0070043,.16108291],[.11799568,.32644237],[.62607758,.40769659],[.19450431,.00427653],[.02801724,.51318452],[.50107758,.24233713],[.33459051,.75124511],[-.1783405,1.15038863],[.7025862,.08553075],[.49622844,.72273486],[.26616379,.16250843],[.53125,1.07483647],[.09967672,.67141641],[-.2650862,1.07198544],[.46767241,.00570205],[.77424568,.24376264],[-.0635775,.91517906],[.40948275,.64433167],[.24299568,1.15323966],[.61099137,.48752529],[.44450431,.99643327],[-.2984913,.83535036],[.00808189,1.07341095],[.31465517,1.31147155],[.37607758,.40769659],[-.2634698,1.18745196],[.25107758,.24233713],[.20959051,.91660457],[.08459051,.75124511],[.68265086,.64575718],[-.0818965,1.2601531],[.51616379,1.15466517],[.41109913,.75979819],[-.0204741,.35637813],[.4525862,.08553075],[.28609913,.59443873],[.75915948,.32359135],[.11961206,1.10334672],[.59267241,.83249933],[-.1503232,.67141641],[.21767241,.00570205],[.05118534,.51461003],[.52424568,.24376264],[-.1153017,1.02351801],[.72575431,.08695626],[.25269396,.35780365],[.55926724,.59586425],[.12769396,.19244419],[.19450431,.99643327],[.50107758,1.23449387],[-.0404094,.91660457],[.26616379,1.15466517],[.16109913,.75979819],[.63415948,.4889508],[-.0053879,1.26870617],[.03609913,.59443873],[.46767241,.99785879],[-.1303879,1.10334672],[.8356681,.33214442],[.66918103,.84105241],[-.2354525,.70847974],[.23760775,.43763235],[.07112068,.94654033],[.7106681,.16678496],[.54418103,.67569295],[.37769396,1.18460093],[.43911637,.28082597],[.91217672,.00997858],[.74568965,.51888657],[-.3653017,1.02351801],[.47575431,.08695626],[.00269396,.35780365],[.30926724,.59586425],[-.1637931,.86671163],[.20420258,.20099727],[.51077586,.43905786],[.07920258,.03563781],[.14601293,.83962689],[-.0872844,.54454579],[.4525862,1.07768749],[.58728448,.11689202],[-.0889008,.75979819],[-.2553879,1.26870617],[-.3803879,1.10334672],[.5856681,.33214442],[-.0538793,1.11189979],[-.0123922,.43763235],[.41918103,.84105241],[-.1788793,.94654033],[.29418103,.67569295],[.12769396,1.18460093],[.18911637,.28082597],[.66217672,.00997858],[.02262931,.78973395],[.49568965,.51888657],[.32920258,1.02779455],[.69719827,.36208019],[-.0457974,.20099727],[.26077586,.43905786],[-.2122844,.70990525],[.09428879,.94796585],[-.3787715,1.21881323],[.46228448,.28225148],[.93534482,.0114041],[.29579741,.79115947],[.33728448,.11689202],[.40409482,.92088111],[.76885775,.52031208],[.60237068,1.02922006],[-.1357758,.38773941],[.17403017,.36065467],[.43911637,1.27298271],[-.3038793,1.11189979],[.37068965,.68424602],[-.0608836,.28082597],[.13739224,.38916492],[-.2273706,.78973395],[.20420258,1.19315401],[-.3938577,1.29864194],[.07920258,1.02779455],[-.025862,.63292757],[.44719827,.36208019],[.75377155,.60014078],[-.1923491,1.14183556],[.2807112,.87098817],[.64870689,.2052738],[.05064655,.31076173],[-.1557112,.94796585],[.21228448,.28225148],[.04579741,.79115947],[.51885775,.52031208],[-.1206896,1.30006745],[.35237068,1.02922006],[.24730603,.63435308],[.72036637,.3635057],[.55387931,.87241368],[.12230603,.46899363],[.18911637,1.27298271],[-.044181,.97790161],[.32381465,.31218725],[.796875,.04133986],[.43211206,.44190889],[.63038793,.55024784],[-.1126077,.38916492],[-.0457974,1.19315401],[.08890086,.23235854],[.62877155,.76550024],[.46228448,1.27440822],[.0307112,.87098817],[.33728448,1.10904877],[.39870689,.2052738],[.70528017,.4433344],[.23221982,.71418179],[.5387931,.95224238],[.06573275,1.22308977],[.00215517,.15395535],[-.2042025,.79115947],[-.1643318,.66286334],[-.3706896,1.30006745],[.30872844,.39201595],[.47036637,.3635057],[-.169181,1.14326107],[-.1276939,.46899363],[.30387931,.87241368],[.50538793,.7156073],[.07381465,.31218725],[.546875,.04133986],[-.0926724,.82109523],[.38038793,.55024784],[-.4574353,1.22166426],[.33890086,1.22451528],[.27532327,.15538086],[.58189655,.39344146],[.21713362,.79401049],[.34698275,.31361276],[.4137931,1.11760184],[-.0177801,.71418179],[.18049568,.82252074],[.2887931,.95224238],[-.1842672,1.22308977],[.65678879,.28652802],[.49030172,.795436],[.05872844,.39201595],[.32381465,1.30434399],[-.1077586,.90092393],[.01724137,1.06628339],[.69181034,.63862962],[.26023706,.23520957],[.09375,.74411755],[.56681034,.47327016],[-.419181,1.14326107],[.76831896,.31646378],[.08890086,1.22451528],[.5619612,.9536679],[.02532327,.15538086],[.29040948,1.0677089],[-.1411637,.66428885],[.33189655,.39344146],[-.3076508,1.17319683],[.16540948,.90234945],[-.1993534,1.30291847],[.53340517,.23663508],[-.0646551,.34212301],[.00215517,1.14611209],[.47521551,.87526471],[.51023706,1.22736631],[.60506465,.39486697],[.13200431,.66571436],[-.0662715,.55737541],[-.2327586,1.06628339],[.07381465,1.30434399],[.80657327,.23806059],[.60829741,.12972164],[.44181034,.63862962],[.01023706,.23520957],[.27532327,1.14753761],[-.15625,.74411755],[.31681034,.47327016],[.15032327,.98217815],[-.322737,1.25302554],[.21174568,.07840319],[.04525862,.58731117],[.51831896,.31646378],[.35183189,.82537177],[-.1610991,1.22451528],[.71982758,.1596574],[.51346982,.79686152],[.34698275,1.3057695],[-.0845905,.90234945],[-.1896551,.50748247],[.28340517,.23663508],[-.3561422,1.01639045],[.1169181,.74554306],[-.0495689,1.25445105],[.58997844,.47469568],[.54849137,1.14896312],[.48491379,.0798287],[.31842672,.58873668],[.79148706,.3178893],[.625,.82679728],[.19342672,.42337723],[.26023706,1.22736631],[-.2844827,1.17462234],[.3900862,.74696858],[.02532327,1.14753761],[.16002155,.18674214],[.22683189,.99073122],[-.2047413,.58731117],[.69989224,.71988384],[-.3712284,1.09621915],[.10183189,.82537177],[.40840517,1.06343236],[.53340517,1.22879182],[.46982758,.1596574],[-.1697198,.93941277],[.30334051,.66856539],[.13685344,1.17747337],[.77640086,.397718],[.60991379,.90662598],[.50484913,.511759],[-.1330818,.74554306],[-.2995689,1.25445105],[.23491379,.0798287],[.06842672,.58873668],[.54148706,.3178893],[.375,.82679728],[-.0565732,.42337723],[-.0980603,1.09764467],[.26993534,.4319303],[.74299568,.16108291],[.57650862,.6699909],[.14493534,.26657084],[-.0215517,.77547883],[.94450431,.00427653],[.34644396,.10976446],[.65301724,.34782506],[-.0231681,.99073122],[-.2564655,.69565012],[.11153017,.02993576],[.65140086,.56307746],[.41810344,.26799636],[.48491379,1.07198544],[.05334051,.66856539],[-.1131465,1.17747337],[.35991379,.90662598],[.25484913,.511759],[.72790948,.24091162],[.08836206,1.02066699],[.56142241,.7498196],[.39493534,1.25872759],[.9294181,.08410524],[.76293103,.59301322],[-.1815732,.58873668],[-.3480603,1.09764467],[.01993534,.4319303],[.49299568,.16108291],[.32650862,.6699909],[-.1465517,.94083828],[.16002155,1.17889888],[.63308189,.9080515],[-.2715517,.77547883],[.69450431,.00427653],[.52801724,.51318452],[.09644396,.10976446],[.36153017,1.0220925],[.40301724,.34782506],[.46982758,1.15181414],[-.0700431,.61867245],[.60452586,.19101868],[.36961206,.11118997],[.00484913,.511759],[.203125,.62009796],[-.1616379,1.02066699],[.14493534,1.25872759],[.6794181,.08410524],[.87769396,.19244419],[.03987068,.86386061],[.51293103,.59301322],[.34644396,1.1019212],[-.0899784,1.17889888],[.44450431,.00427653],[-.028556,.27512392],[.27801724,.51318452],[-.1950431,.7840319],[.11153017,1.0220925],[.58459051,.75124511],[.41810344,1.2601531],[-.3615301,1.29293989],[.47952586,.35637813],[.9525862,.08553075],[.31303879,.86528612],[.35452586,.19101868],[-.1185344,.46186606],[.18803879,.69992666],[-.2850215,.97077405],[.02155172,1.20883465],[.55603448,.0342123],[.38954741,.54312028],[.86260775,.27227289],[.69612068,.78118088],[.11961206,.11118997],[-.046875,.62009796],[.15463362,.46329158],[.62769396,.19244419],[-.2101293,.86386061],[.09644396,1.1019212],[.82920258,.03563781],[.46443965,.43620684],[.03286637,.03278678],[.23114224,.14112574],[.29795258,.94511482],[.06788793,.38488839],[-.1384698,1.0220925],[.22952586,.35637813],[.06303879,.86528612],[.53609913,.59443873],[.36961206,1.10334672],[-.0619612,.69992666],[-.4100215,1.13613351],[-.2284482,1.20883465],[.26454741,.70847974],[.30603448,.0342123],[.73760775,.43763235],[.13954741,.54312028],[.61260775,.27227289],[-.0269396,1.05202826],[.44612068,.78118088],[.57112068,.94654033],[.34105603,.3863139],[.81411637,.11546651],[.64762931,.6243745],[-.0953663,.46329158],[.37769396,.19244419],[-.2618534,.97219956],[.10614224,.3064852],[.57920258,.03563781],[.41271551,.54454579],[-.0188577,.14112574],[.04795258,.94511482],[.24622844,1.05345378],[.72252155,.51746105],[.55603448,1.02636904],[.08297413,1.29721642],[-.1869612,.86528612],[.32596982,.4661426],[.48760775,.43763235],[-.1519396,1.21738772],[-.1104525,.54312028],[.32112068,.94654033],[-.2769396,1.05202826],[.52262931,.78973395],[.09105603,.3863139],[.56411637,.11546651],[-.075431,.89522188],[-.0339439,.22095444],[.39762931,.6243745],[.23114224,1.13328248],[.35614224,1.29864194],[.29256465,.22950752],[.59913793,.46756811],[.16756465,.06414806],[.43265086,.9764761],[.32920258,.03563781],[.16271551,.54454579],[-.0037715,1.05345378],[.83728448,.11689202],[.36422413,.38773941],[.67079741,.62580001],[.19773706,.8966474],[-.1670258,1.29721642],[.44073275,.06557357],[.5075431,.86956266],[.07596982,.4661426],[.27424568,.57448156],[-.0905172,.97505059],[.75053879,.03848883],[.58405172,.54739682],[.11099137,.8182442],[.78556034,.39059044],[.10614224,1.29864194],[-.325431,.89522188],[.57920258,1.02779455],[-.0188577,1.13328248],[.04256465,.22950752],[.30765086,1.14183556],[-.1239224,.7384155],[.34913793,.46756811],[-.2904094,1.24732348],[.18265086,.9764761],[.6557112,.70562871],[.48922413,1.2145367],[.55064655,.31076173],[.38415948,.81966972],[-.0474137,.41624966],[.42564655,.14540228],[-.2139008,.92515765],[-.0522629,.8966474],[.62230603,.46899363],[.19073275,.06557357],[.45581896,.97790161],[.22575431,.41767518],[.69881465,.14682779],[.02747844,.30933622],[-.1390086,.8182442],[.16756465,1.0563048],[.53556034,.39059044],[-.103987,1.17034581],[.36907327,.89949842],[-.0673491,.9764761],[-.1724137,.58160912],[.30064655,.31076173],[-.3389008,1.0905171],[.13415948,.81966972],[.60721982,.54882233],[.00915948,.65431026],[.44073275,1.05773031],[.50215517,.15395535],[.3356681,.66286334],[-.0959051,.25944328],[.80872844,.39201595],[-.2623922,.76835126],[.2106681,.49750388],[.04418103,1.00641186],[.68372844,.22665649],[.64224137,.90092393],[.41217672,.3406975],[.88523706,.06985011],[.71875,.57875809],[-.2672413,1.248749],[.20581896,.97790161],[.40732758,.82109523],[-.0242456,.41767518],[.04256465,1.22166426],[-.1907327,.92658316],[.17726293,.26086879],[.4838362,.49892939],[.11907327,.89949842],[-.353987,1.17034581],[.42564655,1.13755902],[.32058189,.74269204],[.79364224,.47184465],[.15409482,1.25160002],[.62715517,.98075264],[-.1158405,.81966972],[.25215517,.15395535],[.0856681,.66286334],[.55872844,.39201595],[-.0808189,1.17177132],[-.0393318,.49750388],[.39224137,.90092393],[-.2058189,1.00641186],[.76023706,.23520957],[.59375,.74411755],[.16217672,.3406975],[.42726293,1.25302554],[.46875,.57875809],[-.0043103,.84960548],[.30226293,1.08766608],[.63523706,.06985011],[.36368534,.18389112],[.67025862,.42195171],[-.072737,.26086879],[-.2392241,.76977678],[.2338362,.49892939],[-.4057112,1.27868476],[.12877155,.10406241],[.43534482,.34212301],[.90840517,.07127562],[.07058189,.74269204],[-.1627155,.44761094],[-.0959051,1.25160002],[.26885775,.85103099],[.74515086,.31503827],[.51185344,.01995717],[.57866379,.82394625],[-.3308189,1.17177132],[.51023706,.23520957],[.34375,.74411755],[-.0878232,.3406975],[.17726293,1.25302554],[-.2543103,.84960548],[-.1293103,1.01496494],[.54525862,.58731117],[.11368534,.18389112],[.37877155,1.09621915],[.42025862,.42195171],[-.0528017,.6927991],[.25377155,.9308597],[.72683189,.66001231],[-.2192887,1.20170708],[.62176724,.26514533],[.45528017,.77405331],[.18534482,.34212301],[.01885775,.85103099],[-.0862068,.45616401],[.38685344,.18531663],[.22036637,.69422461],[.69342672,.42337723],[-.1443965,1.09479364],[.52693965,.93228521],[.89493534,.26657084],[.296875,.37205877],[.36368534,1.17604786],[-.3793103,1.01496494],[-.072737,1.25302554],[.29525862,.58731117],[.12877155,1.09621915],[.60183189,.82537177],[.00377155,.9308597],[.06519396,.02708473],[.37176724,.26514533],[-.1012931,.53599272],[.20528017,.77405331],[.67834051,.50320593],[.0387931,1.2829613],[.51185344,1.01211391],[-.2677801,1.0449007],[.57327586,.10833895],[.40678879,.61724693],[-.2311422,.85103099],[.13685344,.18531663],[-.0296336,.69422461],[.44342672,.42337723],[-.1961206,1.2031326],[.33836206,.02851025],[.171875,.53741823],[.64493534,.26657084],[.47844827,.77547883],[.046875,.37205877],[.11368534,1.17604786],[.3119612,1.28438681],[.84644396,.10976446],[.24838362,.21525239],[-.1163793,.61582142],[.55818965,.18816765],[-.1212284,1.09621915],[.01346982,.13542369],[.08028017,.93941277],[.55334051,.66856539],[.38685344,1.17747337],[-.0447198,.77405331],[-.2112068,1.2829613],[.32327586,.10833895],[.58836206,1.02066699],[.15678879,.61724693],[.62984913,.34639955],[-.0096982,1.12615492],[.46336206,.85530753],[-.3162715,.88809432],[.35829741,.46044055],[.83135775,.18959317],[.66487068,.69850115],[.49838362,1.20740913],[-.4461206,1.2031326],[-.078125,.53741823],[.39493534,.26657084],[-.244612,1.04632621],[.22844827,.77547883],[.0619612,1.28438681],[.12338362,.38061185],[.59644396,.10976446],[.42995689,.61867245],[-.0016163,.21525239],[.26346982,1.12758043],[-.1681034,.72416038],[-.3345905,1.23306836],[.19989224,.05844601],[.50646551,.29650661],[.57327586,1.10049569],[.14170258,.69707564],[.33997844,.80541459],[.81627155,.26942187],[.27155172,.2166779],[.33836206,1.02066699],[-.0932112,.61724693],[-.2596982,1.12615492],[.10829741,.46044055],[.58135775,.18959317],[-.0581896,.96934854],[-.0167025,.29508109],[.41487068,.69850115],[.24838362,1.20740913],[.78286637,.03278678],[.61637931,.54169477],[.18480603,.13827471],[.44989224,1.05060275],[-.1880387,1.28438681],[-.2931034,.88951983],[.17995689,.61867245],[.48653017,.85673304],[.01346982,1.12758043],[.85452586,.19101868],[.38146551,.46186606],[.68803879,.69992666],[.25646551,.29650661],[.52155172,1.20883465],[-.3830818,1.07626198],[.21497844,.97077405],[.08997844,.80541459],[.45797413,.13970023],[.76454741,.37776082],[.29148706,.64860821],[-.0732758,1.04917724],[.02155172,.2166779],[.6012931,.62152347],[.22306034,.05987152],[.05657327,.56877951],[-.3081896,.96934854],[-.0016163,1.20740913],[.73114224,.14112574],[.36637931,.54169477],[-.2731681,1.32145014],[-.231681,.6471827],[.19989224,1.05060275],[.67295258,.77975537],[.50646551,1.28866335],[.40140086,.89379637],[-.0301724,.49037632],[.44288793,.21952893],[-.1966594,.9992843],[-.2365301,1.12758043],[.64439655,.06272255],[.43803879,.69992666],[.47790948,.57163053],[.27155172,1.20883465],[-.0350215,.97077405],[.63954741,.54312028],[.20797413,.13970023],[.47306034,1.05202826],[.04148706,.64860821],[-.125,1.15751619],[-.0635775,.25374123],[.71605603,.22095444],[.24299568,.49180183],[.54956896,.72986243],[.18480603,1.13043145],[.38308189,1.23877041],[.91756465,.06414806],[.31950431,.16963599],[-.1934267,.56877951],[.48114224,.14112574],[-.0501077,1.05060275],[.31788793,.38488839],[.08459051,.08980729],[.15140086,.89379637],[.6244612,.62294898],[.45797413,1.13185697],[.02640086,.72843691],[-.0786637,.33356993],[.39439655,.06272255],[-.2451508,.84247792],[.22790948,.57163053],[.06142241,1.08053852],[.70096982,.30078315],[.4294181,.41482415],[.90247844,.14397676],[.22306034,1.05202826],[-.2085129,.64860821],[.73599137,.65288475],[-.375,1.15751619],[.46605603,.22095444],[-.0070043,.49180183],[.29956896,.72986243],[-.1734913,1.00070981],[.66756465,.06414806],[.19450431,.33499545],[.50107758,.57305604],[.06950431,.16963599],[.13631465,.97362507],[-.0969827,.67854397],[.33459051,1.08196403],[.27101293,.01282961],[.5775862,.25089021],[.09967672,1.00213532],[.57596982,.4661426],[.77424568,.57448156],[-.0635775,1.24589797],[-.0220905,.57163053],[.40948275,.97505059],[-.1885775,1.08053852],[.61099137,.8182442],[.1794181,.41482415],[.65247844,.14397676],[.01293103,.92373213],[.48599137,.65288475],[.31950431,1.16179273],[.6875,.49607837],[.52101293,1.00498635],[.48114224,1.13328248],[-.0554956,.33499545],[.25107758,.57305604],[-.2219827,.84390343],[.08459051,1.08196403],[.14601293,.17818906],[-.0204741,.68709705],[.02101293,.01282961],[.4525862,.41624966],[-.1454741,.52173759],[.3275862,.25089021],[-.3119612,1.03064558],[.28609913,.92515765],[.92564655,.14540228],[.52909482,.09408382],[.36260775,.60299181],[.2494612,.9536679],[-.3135775,1.24589797],[.29418103,.01425512],[.36099137,.8182442],[.12769396,.5231631],[-.2370689,.92373213],[.06950431,1.16179273],[.80226293,.09550934],[.4375,.49607837],[-.0355603,.76692575],[.27101293,1.00498635],[-.2020474,1.27583374],[.63900862,.33927198],[.47252155,.84817997],[-.1654094,1.08196403],[.2025862,.41624966],[-.4369612,1.19600503],[.03609913,.92515765],[.50915948,.65431026],[.34267241,1.16321824],[.40409482,.25944328],[.23760775,.76835126],[.27909482,.09408382],[.7106681,.49750388],[.11260775,.60299181],[.54418103,1.00641186],[.0075431,.20812483],[.31411637,.44618543],[.78717672,.17533804],[.62068965,.68424602],[.98868534,.01853166],[.04418103,.01425512],[.55226293,.09550934],[.61907327,.89949842],[-.2855603,.76692575],[.07920258,.36635672],[.02101293,1.00498635],[-.4520474,1.27583374],[.38900862,.33927198],[.22252155,.84817997],[.69558189,.57733258],[.52909482,1.08624057],[-.2505387,1.11902735],[.15409482,.25944328],[-.0123922,.76835126],[.4606681,.49750388],[-.1788793,1.27725925],[-.1373922,.60299181],[.29418103,1.00641186],[.18911637,.61154488],[.66217672,.3406975],[.49568965,.84960548],[.06411637,.44618543],[.53717672,.17533804],[-.1023706,.95509341],[.86368534,.18389112],[.265625,.28937904],[.73868534,.01853166],[.57219827,.52743964],[.4057112,1.03634763],[.0307112,.20955034],[.33728448,.44761094],[.40409482,1.25160002],[-.0274784,.84817997],[-.1357758,.71845833],[.17403017,.69137359],[.64709051,.4205262],[.0075431,1.20028157],[.48060344,.92943418],[.68211206,.7726278],[-.2225215,.64005513],[-.4288793,1.27725925],[.45204741,.21240137],[-.0608836,.61154488],[-.2273706,1.12045287],[.24568965,.84960548],[.55226293,1.08766608],[-.3523706,.95509341],[.61368534,.18389112],[-.025862,.96364649],[.015625,.28937904],[.48868534,.01853166],[-.150862,.79828703],[.32219827,.52743964],[-.3173491,1.30719501],[.44719827,.6927991],[.1557112,1.03634763],[.2807112,1.20170708],[.21713362,.13257266],[.52370689,.37063326],[.35721982,.87954124],[.08728448,.44761094],[.2887931,.29080456],[.76185344,.01995717],[.12230603,.79971254],[-.1842672,.56165194],[-.2424568,1.20028157],[.49030172,.13399818],[.796875,.37205877],[.43211206,.7726278],[53879e-8,.36920775],[.265625,1.28153579],[.20204741,.21240137],[.46713362,1.1247294],[.03556034,.72130935]],ze=new ko;let ia=new xh(bh,Th),Eh=ia.getSurface(16777215,!0);ze.add(Eh);let p3=new ti;ze.add(p3);for(let i=0;i<vo.length;i++){let t=ia.fromTauCoords(vo[i]);p3.add(ia.getPoint(t,_h.light,.01))}let kt=new oh(16777215);kt.position.set(2,6,0);kt.angle=Math.PI/2;kt.decay=0;kt.penumbra=1;kt.distance=0;kt.intensity=5;kt.radius=.5;kt.shadow.mapSize.width=512;kt.shadow.mapSize.height=512;kt.shadow.camera.near=.1;kt.shadow.camera.far=10;kt.shadow.focus=1;kt.castShadow=!0;ze.add(kt);const as=kt.target;as.position.x=1;as.position.y=0;as.position.z=.05;ze.add(as);const m3=new At(new yi(100,.1,100),new Vo({color:16777215,clearcoat:1,roughness:.5,metalness:0}));m3.position.set(-1,-4,-1);ze.add(m3);const Xi=new d3;Xi.bottomColor.set(16777215);Xi.bottomColor.set(6710886);Xi.update();ze.environment=Xi;ze.background=Xi;const Mn=new Lt;Mn.position.set(.1,10,-.1);Mn.lookAt(0,0,0);let bn=new Q9({preserveDrawingBuffer:!0});bn.toneMapping=Mo;document.body.appendChild(bn.domElement);let Tn=new ah(bn);Tn.setScene(ze,Mn);Tn.renderScale=Math.max(1/window.devicePixelRatio,.5);Tn.tiles.setScalar(3);Tn.bounces=30;function wh(i){const t=new Date;let e=t.getDate(),n=t.getMonth()+1,s=t.getHours(),r=t.getMinutes(),a=document.createElement("a");a.download=`pathtrace ${n}-${e}-${s}${r}.png`,a.href=i.toDataURL("image/png"),a.click()}const Ah=new ba().close();let Rh={saveit:()=>wh(bn.domElement)};Ah.add(Rh,"saveit");let Ta=new el(Mn,bn.domElement);Ta.target.set(0,.33,-.08);Ta.addEventListener("change",()=>Tn.updateCamera());Ta.update();_3();g3();window.addEventListener("resize",_3);function g3(){requestAnimationFrame(g3),Tn.renderSample()}function _3(){const i=window.innerWidth,t=window.innerHeight;bn.setSize(i,t),bn.setPixelRatio(window.devicePixelRatio);const e=i/t;Mn.aspect=e,Mn.updateProjectionMatrix(),Tn.setScene(ze,Mn)}
